<?php

/**
 * Implement hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function apim_profile_install() {
  // Do the standard install
  include_once DRUPAL_ROOT . '/profiles/standard/standard.install';
  standard_install();

  // need to enable this one on its own first to avoid a drupal static cache issue.
  drupal_static_reset('i18n_object_info');
  module_enable(array('i18n_string'), TRUE);

  // Enable modules that are not enabled via the .info
  $modules = array(
    'bean_admin_ui',
    'page_manager',
    'flag_bookmark',
    'api',
    'plan',
    'application',
    'image_captcha',
    'hs_taxonomy',
    'i18n_redirect',
    'i18n_translation',
    'i18n_node',
    'i18n_field',
    'i18n_menu',
    'i18n_block',
    'image_captcha_refresh',
    'messaging_template',
    'messaging_mail',
    'messaging_htmlmail',
    'notifications',
    'notifications_content',
    'notifications_tags',
    'notifications_forum',
    'notifications_account',
    'content_approval_field',
    'fasttoggle_node',
    'site_uploader');
  module_enable($modules, TRUE);

  // Don't need these
  module_disable(array('shortcut', 'group', 'dblog'), TRUE);

  // turn off display of error messages
  variable_set('error_level', '0');

  // allow user registration by default
  variable_set('user_register', 1);

  // set up to use local translations
  variable_set('l10n_update_download_store', 'sites/all/translations');
  variable_set('l10n_update_check_mode', '2');

  // enable language detection
  variable_set('language_negotiation_language', array(
    "locale-user" => array(
      "callbacks" => array("language" => "locale_language_from_user"),
      "file" => "includes/locale.inc"),
    "locale-browser" => array(
      "callbacks" => array("language" => "locale_language_from_browser"),
      "file" => "includes/locale.inc",
      "cache" => 0),
    "language-default" => array("callbacks" => array("language" => "locale_language_from_default"))));
  variable_set('language_negotiation_language_content', array(
    "locale-interface" => array(
      "callbacks" => array("language" => "locale_language_from_interface"),
      "file" => "includes/locale.inc")));
  variable_set('language_negotiation_language_url', array(
    "locale-url" => array(
      "callbacks" => array(
        "language" => "locale_language_from_url",
        "switcher" => "locale_language_switcher_url",
        "url_rewrite" => "locale_language_url_rewrite_url"),
      "file" => "includes/locale.inc"),
    "locale-url-fallback" => array(
      "callbacks" => array("language" => "locale_language_url_fallback"),
      "file" => "includes/locale.inc")));
  variable_set('locale_language_providers_weight_language', array(
    "locale-url" => "-8",
    "locale-session" => "-6",
    "locale-user" => "-4",
    "locale-browser" => "-2",
    "language-default" => "10"));
  variable_set('language_content_type_page', "2");
  variable_set('language_content_type_faq', "2");

  // The Language label is an extra_field so is only stored in cache
  // hide the language labels from pages and faqs
  $info = array(
    'form' => array(
      'language' => array(
        'label' => 'Language',
        'description' => 'Language selection',
        'weight' => 0),
      'title' => array('label' => 'Title', 'description' => 'Node module element', 'weight' => -5)),
    'display' => array(
      'language' => array(
        'label' => 'Language',
        'description' => 'Language',
        'display' => array(
          'default' => array('weight' => "0", 'visible' => false),
          'full' => array('weight' => 0, 'visible' => false),
          'teaser' => array('weight' => 0, 'visible' => true),
          'rss' => array('weight' => 0, 'visible' => true),
          'search_index' => array('weight' => 0, 'visible' => true),
          'search_result' => array('weight' => 0, 'visible' => true),
          'notifications' => array('weight' => 0, 'visible' => true),
          'token' => array('weight' => 0, 'visible' => true)))));

  // Store in persistent cache.
  if (lock_acquire("field_info:bundle_extra:node:page")) {
    cache_set("field_info:bundle_extra:node:page", $info, 'cache_field');
    lock_release("field_info:bundle_extra:node:page");
  }
  if (lock_acquire("field_info:bundle_extra:node:faq")) {
    cache_set("field_info:bundle_extra:node:faq", $info, 'cache_field');
    lock_release("field_info:bundle_extra:node:faq");
  }

  // set the default number of nodes per page for paging
  variable_set('default_nodes_main', "10");

  // Enable our theme and set as default
  $themes = array('ibm_apim_theme');
  theme_enable($themes);
  variable_set('theme_default', 'ibm_apim_theme');

  // Disable bartik as we have installed our own default theme
  // Also disable the seven admin theme as it causes warnings during install
  // and you can still do all the admin stuff even without it enabled.
  theme_disable(array('bartik', 'seven'));

  // Create content author role
  $role = new stdClass();
  $role->name = 'content author';
  user_role_save($role);

  // Create forum moderator role
  $modrole = new stdClass();
  $modrole->name = 'forum moderator';
  user_role_save($modrole);

  // configure tinymce
  db_insert('wysiwyg')->fields(array(
    'format' => 'filtered_html',
    'editor' => 'tinymce',
    'settings' => 'a:20:{s:7:"default";i:1;s:11:"user_choose";i:0;s:11:"show_toggle";i:0;s:5:"theme";s:8:"advanced";s:8:"language";s:2:"en";s:7:"buttons";a:1:{s:7:"default";a:26:{s:4:"bold";i:1;s:6:"italic";i:1;s:9:"underline";i:1;s:13:"strikethrough";i:1;s:11:"justifyleft";i:1;s:13:"justifycenter";i:1;s:12:"justifyright";i:1;s:11:"justifyfull";i:1;s:7:"bullist";i:1;s:7:"numlist";i:1;s:7:"outdent";i:1;s:6:"indent";i:1;s:4:"undo";i:1;s:4:"redo";i:1;s:4:"link";i:1;s:6:"unlink";i:1;s:6:"anchor";i:1;s:12:"formatselect";i:1;s:3:"sup";i:1;s:3:"sub";i:1;s:4:"code";i:1;s:2:"hr";i:1;s:3:"cut";i:1;s:4:"copy";i:1;s:5:"paste";i:1;s:7:"charmap";i:1;}}s:11:"toolbar_loc";s:3:"top";s:13:"toolbar_align";s:4:"left";s:8:"path_loc";s:6:"bottom";s:8:"resizing";i:1;s:11:"verify_html";i:1;s:12:"preformatted";i:0;s:22:"convert_fonts_to_spans";i:0;s:17:"remove_linebreaks";i:0;s:23:"apply_source_formatting";i:0;s:27:"paste_auto_cleanup_on_paste";i:1;s:13:"block_formats";s:32:"p,address,pre,h2,h3,h4,h5,h6,div";s:11:"css_setting";s:5:"theme";s:8:"css_path";s:0:"";s:11:"css_classes";s:0:"";}'))->execute();
  db_insert('wysiwyg')->fields(array(
    'format' => 'full_html',
    'editor' => 'tinymce',
    'settings' => 'a:20:{s:7:"default";i:1;s:11:"user_choose";i:0;s:11:"show_toggle";i:1;s:5:"theme";s:8:"advanced";s:8:"language";s:2:"en";s:7:"buttons";a:20:{s:7:"default";a:36:{s:4:"bold";i:1;s:6:"italic";i:1;s:9:"underline";i:1;s:13:"strikethrough";i:1;s:11:"justifyleft";i:1;s:13:"justifycenter";i:1;s:12:"justifyright";i:1;s:11:"justifyfull";i:1;s:7:"bullist";i:1;s:7:"numlist";i:1;s:7:"outdent";i:1;s:6:"indent";i:1;s:4:"undo";i:1;s:4:"redo";i:1;s:4:"link";i:1;s:6:"unlink";i:1;s:6:"anchor";i:1;s:5:"image";i:1;s:7:"cleanup";i:1;s:12:"formatselect";i:1;s:11:"styleselect";i:1;s:10:"fontselect";i:1;s:14:"fontsizeselect";i:1;s:9:"forecolor";i:1;s:9:"backcolor";i:1;s:3:"sup";i:1;s:3:"sub";i:1;s:10:"blockquote";i:1;s:4:"code";i:1;s:2:"hr";i:1;s:3:"cut";i:1;s:4:"copy";i:1;s:5:"paste";i:1;s:9:"visualaid";i:1;s:12:"removeformat";i:1;s:7:"charmap";i:1;}s:5:"advhr";a:1:{s:5:"advhr";i:1;}s:8:"advimage";a:1:{s:8:"advimage";i:1;}s:7:"advlink";a:1:{s:7:"advlink";i:1;}s:11:"contextmenu";a:1:{s:11:"contextmenu";i:1;}s:14:"directionality";a:2:{s:3:"ltr";i:1;s:3:"rtl";i:1;}s:8:"emotions";a:1:{s:8:"emotions";i:1;}s:10:"fullscreen";a:1:{s:10:"fullscreen";i:1;}s:12:"inlinepopups";a:1:{s:12:"inlinepopups";i:1;}s:14:"insertdatetime";a:2:{s:10:"insertdate";i:1;s:10:"inserttime";i:1;}s:5:"layer";a:4:{s:11:"insertlayer";i:1;s:11:"moveforward";i:1;s:12:"movebackward";i:1;s:8:"absolute";i:1;}s:5:"paste";a:2:{s:9:"pastetext";i:1;s:9:"pasteword";i:1;}s:5:"style";a:1:{s:10:"styleprops";i:1;}s:5:"table";a:1:{s:13:"tablecontrols";i:1;}s:5:"media";a:1:{s:5:"media";i:1;}s:10:"xhtmlxtras";a:1:{s:7:"attribs";i:1;}s:9:"wordcount";a:1:{s:9:"wordcount";i:1;}s:4:"imce";a:1:{s:4:"imce";i:1;}s:6:"linkit";a:1:{s:6:"linkit";i:1;}s:6:"drupal";a:1:{s:5:"break";i:1;}}s:11:"toolbar_loc";s:3:"top";s:13:"toolbar_align";s:4:"left";s:8:"path_loc";s:6:"bottom";s:8:"resizing";i:1;s:11:"verify_html";i:1;s:12:"preformatted";i:0;s:22:"convert_fonts_to_spans";i:0;s:17:"remove_linebreaks";i:0;s:23:"apply_source_formatting";i:0;s:27:"paste_auto_cleanup_on_paste";i:1;s:13:"block_formats";s:32:"p,address,pre,h2,h3,h4,h5,h6,div";s:11:"css_setting";s:5:"theme";s:8:"css_path";s:0:"";s:11:"css_classes";s:0:"";}'))->execute();
  db_insert('wysiwyg')->fields(array(
    'format' => 'php_code',
    'editor' => 'tinymce',
    'settings' => NULL))->execute();
  db_insert('wysiwyg')->fields(array(
    'format' => 'plain_text',
    'editor' => 'tinymce',
    'settings' => NULL))->execute();

  db_update('filter')->fields(array(
    'settings' => 'a:3:{s:12:"allowed_html";s:126:"<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <h2> <h3> <h4> <h5> <h6> <p> <div> <address> <span>";s:16:"filter_html_help";i:1;s:20:"filter_html_nofollow";i:0;}',
    'status' => 1))->condition('format', 'filtered_html')->condition('module', 'filter')->condition('name', 'filter_html')->execute();
  // Make full_html the default for those who can use it
  db_update('filter_format')->fields(array('weight' => -10))->condition('format', 'full_html')->execute();
  db_update('filter_format')->fields(array('weight' => -9))->condition('format', 'filtered_html')->execute();
  db_update('filter_format')->fields(array('weight' => -8))->condition('format', 'plain_text')->execute();

  // configure IMCE
  db_update('variable')->fields(array(
    'value' => 'a:1:{i:1;a:10:{s:4:"name";s:15:"Default profile";s:7:"usertab";i:1;s:8:"filesize";s:1:"2";s:5:"quota";s:1:"2";s:7:"tuquota";s:1:"0";s:10:"extensions";s:16:"gif png jpg jpeg";s:10:"dimensions";s:8:"1140x800";s:7:"filenum";s:1:"1";s:11:"directories";a:1:{i:0;a:7:{s:4:"name";s:5:"u%uid";s:6:"subnav";i:0;s:6:"browse";i:1;s:6:"upload";i:1;s:5:"thumb";i:1;s:6:"delete";i:0;s:6:"resize";i:0;}}s:10:"thumbnails";a:1:{i:0;a:4:{s:4:"name";s:5:"Thumb";s:10:"dimensions";s:5:"90x90";s:6:"prefix";s:6:"thumb_";s:6:"suffix";s:0:"";}}}}'))->condition('name', 'imce_profiles')->execute();
  variable_set('imce_roles_profiles', array(
    1 => array("weight" => 0, "public_pid" => 0),
    2 => array("weight" => 0, "public_pid" => 0),
    3 => array("weight" => 0, "public_pid" => 1),
    4 => array("weight" => 0, "public_pid" => 1)));
  variable_set('imce_settings_absurls', '');
  variable_set('imce_settings_disable_private', '1');
  variable_set('imce_settings_replace', '0');
  variable_set('imce_settings_textarea', '');
  variable_set('imce_settings_thumb_method', 'scale_and_crop');

  // configure linkit
  db_insert('linkit_profiles')->fields(array(
    'pid' => 1,
    'name' => 'node_profile',
    'admin_title' => 'Node profile',
    'admin_description' => 'Search existing nodes',
    'profile_type' => 1,
    'data' => 'a:13:{s:12:"text_formats";a:3:{s:9:"full_html";s:9:"full_html";s:13:"filtered_html";i:0;s:10:"plain_text";i:0;}s:14:"search_plugins";a:7:{s:11:"entity:bean";a:2:{s:7:"enabled";i:0;s:6:"weight";s:3:"-10";}s:14:"entity:comment";a:2:{s:7:"enabled";i:0;s:6:"weight";s:3:"-10";}s:11:"entity:user";a:2:{s:7:"enabled";i:0;s:6:"weight";s:3:"-10";}s:11:"entity:node";a:2:{s:7:"enabled";i:1;s:6:"weight";s:3:"-10";}s:20:"entity:taxonomy_term";a:2:{s:7:"enabled";i:0;s:6:"weight";s:3:"-10";}s:11:"entity:file";a:2:{s:7:"enabled";i:0;s:6:"weight";s:3:"-10";}s:21:"entity:support_client";a:2:{s:7:"enabled";i:0;s:6:"weight";s:3:"-10";}}s:11:"entity:bean";a:1:{s:18:"result_description";s:0:"";}s:14:"entity:comment";a:3:{s:18:"result_description";s:0:"";s:7:"bundles";a:10:{s:16:"comment_node_api";i:0;s:24:"comment_node_application";i:0;s:20:"comment_node_article";i:0;s:17:"comment_node_page";i:0;s:17:"comment_node_blog";i:0;s:16:"comment_node_faq";i:0;s:18:"comment_node_forum";i:0;s:17:"comment_node_plan";i:0;s:17:"comment_node_poll";i:0;s:27:"comment_node_support_ticket";i:0;}s:15:"group_by_bundle";i:0;}s:11:"entity:node";a:4:{s:18:"result_description";s:0:"";s:7:"bundles";a:10:{s:3:"api";i:0;s:11:"application";i:0;s:7:"article";i:0;s:4:"page";i:0;s:4:"blog";i:0;s:3:"faq";i:0;s:5:"forum";i:0;s:4:"plan";i:0;s:4:"poll";i:0;s:14:"support_ticket";i:0;}s:15:"group_by_bundle";i:0;s:19:"include_unpublished";i:0;}s:11:"entity:file";a:4:{s:18:"result_description";s:0:"";s:11:"show_scheme";i:0;s:15:"group_by_scheme";i:0;s:16:"image_extra_info";a:2:{s:9:"thumbnail";s:9:"thumbnail";s:10:"dimensions";s:10:"dimensions";}}s:20:"entity:taxonomy_term";a:3:{s:18:"result_description";s:0:"";s:7:"bundles";a:2:{s:6:"forums";i:0;s:4:"tags";i:0;}s:15:"group_by_bundle";i:0;}s:11:"entity:user";a:1:{s:18:"result_description";s:0:"";}s:21:"entity:support_client";a:1:{s:18:"result_description";s:0:"";}s:13:"insert_plugin";a:1:{s:10:"url_method";s:1:"2";}s:17:"attribute_plugins";a:6:{s:6:"target";a:2:{s:7:"enabled";i:0;s:6:"weight";s:3:"-10";}s:2:"id";a:2:{s:7:"enabled";i:0;s:6:"weight";s:3:"-10";}s:5:"title";a:2:{s:7:"enabled";i:0;s:6:"weight";s:3:"-10";}s:5:"class";a:2:{s:7:"enabled";i:0;s:6:"weight";s:3:"-10";}s:9:"accesskey";a:2:{s:7:"enabled";i:0;s:6:"weight";s:3:"-10";}s:3:"rel";a:2:{s:7:"enabled";i:0;s:6:"weight";s:3:"-10";}}s:4:"imce";i:0;s:12:"autocomplete";a:3:{s:9:"charLimit";s:1:"3";s:4:"wait";s:3:"350";s:13:"remoteTimeout";s:5:"10000";}}'))->execute();
  db_insert('variable')->fields(array(
    'name' => 'linkit_picker_views',
    'value' => 'a:1:{s:12:"node_profile";a:1:{s:5:"views";a:3:{s:18:"linkit_picker_node";s:18:"linkit_picker_node";s:18:"linkit_picker_term";i:0;s:18:"linkit_picker_user";i:0;}}}'))->execute();

  // disable user email verification as the apim module doesn't currently work with it enabled
  variable_set('user_email_verification', FALSE);

  // Setup the block class styles
  module_load_include('inc', 'block_class_styles', 'block_class_styles.admin');
  $form_state = form_state_defaults();
  $styles = 'menu-bar-float-right|Inline Float Right menu-bar-float-left|Inline Float Left ';
  $form_state['values'] = array('block_class_styles_presets' => $styles);
  drupal_form_submit('block_class_styles_admin_settings', $form_state);
  variable_set('block_class_styles_presets', array(
    "menu-bar-float-right" => "Inline Float Right",
    "menu-bar-float-left" => "Inline Float Left"));

  // Move Main Menu block to the Menu Bar region
  db_insert('block')->fields(array(
    'region' => 'menu_bar',
    'module' => 'system',
    'delta' => 'main-menu',
    'status' => 1,
    'cache' => -1,
    'pages' => "",
    'title' => "",
    'weight' => -12,
    'css_class' => "menu-bar-float-left",
    'theme' => 'ibm_apim_theme'))->execute();

  // Move User Menu block to the Header region
  db_insert('block')->fields(array(
    'region' => 'header',
    'module' => 'system',
    'delta' => 'user-menu',
    'status' => 1,
    'cache' => -1,
    'pages' => "",
    'title' => "<none>",
    'css_class' => "",
    'weight' => 10,
    'theme' => 'ibm_apim_theme'))->execute();
  db_insert('block')->fields(array(
    'region' => 'header',
    'module' => 'ibm_apim',
    'delta' => 'developer_org_select',
    'status' => 1,
    'cache' => -1,
    'pages' => "",
    'title' => "<none>",
    'css_class' => "",
    'weight' => 5,
    'theme' => 'ibm_apim_theme'))->execute();
  db_insert('block')->fields(array(
    'region' => 'header',
    'module' => 'ibm_apim',
    'delta' => 'apim_notification_count',
    'status' => 1,
    'cache' => -1,
    'pages' => "",
    'title' => "<none>",
    'css_class' => "",
    'weight' => 15,
    'theme' => 'ibm_apim_theme'))->execute();

  // Add url aliases for our custom nodes
  $add_alias = function ($node, $alias) {
    $alias_array = array('source' => 'node/' . $node, 'alias' => $alias);
    path_save($alias_array);
  };

  $add_alias('1', 'start');
  $add_alias('2', 'help');
  $add_alias('3', 'terms');
  $add_alias('4', 'privacy');

  // Move Search block to the Menu Bar region
  db_update('block')->fields(array(
    'weight' => -11,
    'css_class' => 'menu-bar-float-right',
    'region' => 'menu_bar'))->condition('module', 'search')->condition('delta', 'form')->condition('theme', 'ibm_apim_theme')->execute();

  // Hide login block in left nav as we have a header login link
  db_update('block')->fields(array('region' => -1))->condition('module', 'user')->condition('delta', 'login')->condition('theme', 'ibm_apim_theme')->execute();

  // set navigation menu to only display on certain pages but hidden by default
  db_update('block')->fields(array(
    'region' => '-1',
    'pages' => '<front>
api
api/*
application
application/*
forum
forum/*
plan
plan/*'))->condition('module', 'system')->condition('delta', 'navigation')->execute();

  // create welcome banner bean
  apim_profile_create_bannerblock();

  // Create a page for the welcome block
  db_insert('page_manager_pages')->fields(array(
    'name' => 'welcome',
    'task' => 'page',
    'admin_title' => 'Welcome',
    'path' => 'home',
    'access' => 'a:0:{}',
    'menu' => 'a:0:{}',
    'arguments' => 'a:0:{}',
    'conf' => 'a:1:{s:11:"admin_paths";b:0;}'))->execute();

  db_insert('page_manager_handlers')->fields(array(
    'name' => 'page_welcome_panel_context',
    'task' => 'page',
    'subtask' => 'welcome',
    'conf' => 'a:10:{s:5:"title";s:5:"Panel";s:9:"no_blocks";i:0;s:8:"pipeline";s:8:"standard";s:22:"body_classes_to_remove";s:0:"";s:19:"body_classes_to_add";s:0:"";s:6:"css_id";s:0:"";s:3:"css";s:0:"";s:8:"contexts";a:0:{}s:13:"relationships";a:0:{}s:3:"did";s:1:"1";}',
    'handler' => 'panel_context'))->execute();

  db_insert('panels_display')->fields(array(
    'layout' => 'two_50',
    'layout_settings' => 'a:0:{}',
    'panel_settings' => 'a:1:{s:14:"style_settings";a:5:{s:7:"default";N;s:10:"two_50_top";N;s:12:"two_50_first";N;s:13:"two_50_second";N;s:13:"two_50_bottom";N;}}',
    'cache' => 'a:0:{}',
    'title_pane' => 1,
    'uuid' => '819b1444-8d18-4938-bc4f-7bfce529e881'))->execute();

  $insert_welcome_block = function ($panel, $subtype, $uuid, $override_title) {
    db_insert('panels_pane')->fields(array(
      'did' => 1,
      'panel' => $panel,
      'type' => 'block',
      'subtype' => $subtype,
      'shown' => 1,
      'access' => 'a:0:{}',
      'configuration' => 'a:2:{s:14:"override_title";i:' . $override_title . ';s:19:"override_title_text";s:0:"";}',
      'cache' => 'a:0:{}',
      'style' => 'a:1:{s:8:"settings";N;}',
      'css' => 'a:0:{}',
      'extras' => 'a:0:{}',
      'locks' => 'a:0:{}',
      'uuid' => $uuid))->execute();
  };

  $insert_welcome_block('two_50_top', 'bean-banner_block', 'dd91f3ab-c8f5-47c5-b2ec-fadb7a19a4b0', 1);
  $insert_welcome_block('two_50_first', 'forum-new', 'dd91f3ab-c8f5-47c5-b2ec-fadb7a19a4b1', 0);
  $insert_welcome_block('two_50_first', 'forum-active', 'dd91f3ab-c8f5-47c5-b2ec-fadb7a19a4b2', 0);
  $insert_welcome_block('two_50_second', 'comment-recent', 'dd91f3ab-c8f5-47c5-b2ec-fadb7a19a4b3', 0);

  // Set the page as the site home
  variable_set('site_frontpage', 'home');

  // Create a custom footer block
  db_insert('block_custom')->fields(array(
    'body' => '<div class="footer"><span class="centered_link"><a href="terms">Terms of use</a></span><span class="centered_link"><a href="privacy">Privacy policy</a></span></p>',
    'info' => 'Developer portal footer',
    'format' => 'full_html'))->execute();

  // And remove the powered by drupal one
  db_delete('block')->condition('region', 'footer')->condition('theme', 'ibm_apim_theme')->execute();

  // Place it in the footer region
  db_insert('block')->fields(array(
    'region' => 'footer',
    'module' => 'block',
    'delta' => '1',
    'status' => 1,
    'cache' => -1,
    'pages' => "",
    'title' => "<none>",
    'css_class' => "",
    'theme' => 'ibm_apim_theme'))->execute();

  // set theme settings for logos
  // Must do this before we ensure the layout is correct
  // or we still end up with a single column
  $theme_name = 'ibm_apim_theme';
  $var_name = 'theme_' . $theme_name . '_settings';
  $settings = variable_get($var_name, array());
  $settings['default_logo'] = 1;
  $settings['default_favicon'] = 1;
  $settings['toggle_name'] = 0;
  $settings['toggle_logo'] = 1;
  $settings['toggle_favicon'] = 1;
  $settings['toggle_slogan'] = 0;
  $settings['disable_responsive_styles'] = 0;
  $settings['enable_extensions'] = 1;
  $settings['enable_font_settings'] = 1;
  $settings['enable_heading_settings'] = 1;
  $settings['enable_image_settings'] = 1;
  $settings['enable_markup_overides'] = 1;

  // These are the things that change once you submit the settings form
  // for the theme in the UI
  $settings['base_font_size'] = '';
  $settings['base_font'] = 'bf-a';
  $settings['site_name_font'] = 'bf-a';
  $settings['site_slogan_font'] = 'bf-a';
  $settings['page_title_font'] = 'bf-a';
  $settings['node_title_font'] = 'bf-a';
  $settings['comment_title_font'] = 'bf-a';
  $settings['block_title_font'] = 'bf-a';
  $settings['content_headings_h1h4_font'] = 'bf-a';
  $settings['content_headings_h5h6_font'] = 'bf-a';
  $settings['main_menu_font'] = 'bf-a';
  $settings['secondary_menu_font'] = 'bf-a';
  $settings['block_menu_font'] = 'bf-a';
  $settings['selectors_font'] = 'bf-a';
  $settings['site_name_case'] = 'snc-n';
  $settings['site_name_weight'] = 'snw-n';
  $settings['site_name_alignment'] = 'sna-l';
  $settings['site_name_shadow'] = 'sns-n';
  $settings['site_slogan_case'] = 'ssc-n';
  $settings['site_slogan_weight'] = 'ssw-n';
  $settings['site_slogan_alignment'] = 'ssa-l';
  $settings['site_slogan_shadow'] = 'sss-n';

  $settings['content_corner_radius'] = 'rc-0';
  $settings['tabs_corner_radius'] = 'rct-0';

  // This isn't in the file but we need to set it here so that the max width
  // setting that is there gets honoured.
  $settings['bigscreen_set_max_width'] = 1;

  variable_set($var_name, $settings);

  // Ensure that the layout is correct for the theme
  module_load_include('inc', 'system', 'system.admin');
  $form_state = form_state_defaults();
  $form_state['build_info']['args'][] = 'ibm_apim_theme';
  $form_state['values'] = array(
    'global_files_path' => 'public_files',
    'enable_custom_media_queries' => 1,
    'enable_extensions' => 1,
    'enable_font_settings' => 1,
    'enable_heading_settings' => 1,
    'enable_image_settings' => 1,
    'enable_markup_overides' => 1,
    'global_default_layout' => 'smalltouch-portrait',
    'at-color' => 1);
  drupal_form_submit('system_theme_settings', $form_state);

  // Do not use the administration theme when editing or creating content.
  variable_set('node_admin_theme', '0');

  // set favicon for admin theme (seven) too
  $var_name = 'theme_seven_settings';
  $settings = variable_get($var_name, array());
  $settings['favicon_path'] = drupal_get_path('theme', 'ibm_apim_theme') . '/favicon.ico';
  $settings['default_favicon'] = 0;
  $settings['favicon_mimetype'] = "image/vnd.microsoft.icon";
  variable_set($var_name, $settings);

  // create sample content
  $path = dirname(__FILE__);
  require_once $path . '/content/nodes.import.inc';
  apim_profile_create_nodes();

  // hide Plans menu link by default
  $mlid = db_query("SELECT mlid FROM {menu_links} WHERE link_title=:link_title AND  link_path=:link_path AND menu_name=:menu_name", array(
    ':link_title' => 'Plans',
    ':link_path' => 'plan',
    ':menu_name' => 'main-menu'))->fetchField();
  $link = menu_link_load($mlid);
  // Alter "hidden" value.
  $link['hidden'] = 1;
  $link['customized'] = 1;
  menu_link_save($link);

  // hide Add Content link from navigation menu
  $mlid = db_query("SELECT mlid FROM {menu_links} WHERE link_title=:link_title AND  link_path=:link_path AND menu_name=:menu_name", array(
    ':link_title' => 'Add content',
    ':link_path' => 'node/add',
    ':menu_name' => 'navigation'))->fetchField();
  $link = menu_link_load($mlid);
  // Alter "hidden" value.
  $link['hidden'] = 1;
  $link['customized'] = 1;
  menu_link_save($link);

  // Add menu entries for forums and blogs
  $blogitem = array(
    'menu_name' => 'main-menu',
    'link_path' => 'blog',
    'router_path' => 'blog',
    'link_title' => 'Blogs',
    'description' => 'Read what we\'re up to',
    'weight' => 20,
    'customized' => 1);
  $bmlid = menu_link_save($blogitem);

  $forumitem = array(
    'menu_name' => 'main-menu',
    'link_path' => 'forum',
    'router_path' => 'forum',
    'link_title' => 'Forums',
    'weight' => 25,
    'description' => 'Ask our community',
    'customized' => 1);
  $fmlid = menu_link_save($forumitem);

  // Create Support menu
  $supportmenu = array(
    'menu_name' => 'support-menu',
    'title' => 'Support',
    'description' => 'Support menu');
  menu_save($supportmenu);

  $forumitem = array(
    'link_path' => 'forum',
    'link_title' => 'Forum',
    'menu_name' => 'support-menu',
    'weight' => 0,
    'plid' => 0,
    'module' => 'menu');
  menu_link_save($forumitem);
  $faqitem = array(
    'link_path' => 'faq-page',
    'link_title' => 'Frequently Asked Questions',
    'menu_name' => 'support-menu',
    'weight' => 5,
    'plid' => 0,
    'module' => 'menu');
  menu_link_save($faqitem);
  $issueitem = array(
    'link_path' => 'support',
    'link_title' => 'Raise a support ticket',
    'menu_name' => 'support-menu',
    'weight' => 7,
    'plid' => 0,
    'module' => 'menu');
  menu_link_save($issueitem);
  $contactitem = array(
    'link_path' => 'contact',
    'link_title' => 'Contact Us',
    'menu_name' => 'support-menu',
    'weight' => 10,
    'plid' => 0,
    'module' => 'menu');
  menu_link_save($contactitem);

  // set support menu to only show on support page
  db_insert('block')->fields(array(
    'pages' => 'help',
    'visibility' => 1,
    'status' => 1,
    'cache' => 8,
    'region' => 'sidebar_first',
    'module' => 'menu',
    'delta' => 'support-menu',
    'theme' => 'ibm_apim_theme'))->execute();

  // Create Login menu
  $supportmenu = array(
    'menu_name' => 'login-menu',
    'title' => 'Login',
    'description' => 'Login menu');
  menu_save($supportmenu);

  $loginitem = array(
    'link_path' => 'user/login',
    'link_title' => 'Login',
    'menu_name' => 'login-menu',
    'weight' => 1,
    'plid' => 0,
    'module' => 'menu');
  menu_link_save($loginitem);
  $registeritem = array(
    'link_path' => 'user/register',
    'link_title' => 'Create an account',
    'menu_name' => 'login-menu',
    'weight' => 0,
    'plid' => 0,
    'module' => 'menu');
  menu_link_save($registeritem);

  // Create taxonomy menu
  $taxonomy_menu = array();
  $taxonomy_menu['menu_name'] = 'tags';
  $taxonomy_menu['title'] = 'Tags';
  $taxonomy_menu['description'] = 'Browse content by category.';
  menu_save($taxonomy_menu);
  variable_set('taxonomy_menu_display_descendants_tags', 0);
  variable_set('taxonomy_menu_display_num_tags', 1);
  variable_set('taxonomy_menu_end_all_tags', false);
  variable_set('taxonomy_menu_expanded_tags', 1);
  variable_set('taxonomy_menu_flat_tags', 0);
  variable_set('taxonomy_menu_hide_empty_terms_tags', 0);
  variable_set('taxonomy_menu_path_tags', 'taxonomy_menu_path_default');
  variable_set('taxonomy_menu_rebuild_tags', 0);
  variable_set('taxonomy_menu_sync_tags', 1);
  variable_set('taxonomy_menu_term_item_description_tags', 0);
  variable_set('taxonomy_menu_vocab_menu_tags', 'tags');
  variable_set('taxonomy_menu_vocab_parent_tags', '0');
  variable_set('taxonomy_menu_voc_item_description_tags', 0);
  variable_set('taxonomy_menu_voc_item_tags', false);
  variable_set('taxonomy_menu_voc_name_tags', false);

  // workaround a jquery update bug in hierarchical_select
  variable_set('jquery_update_compression_type', 'min');
  variable_set('jquery_update_jquery_admin_version', '1.10');
  variable_set('jquery_update_jquery_cdn', 'none');
  variable_set('jquery_update_jquery_version', '1.10');

  // set taxonomy menu to show on sidebar
  db_insert('block')->fields(array(
    'status' => 1,
    'region' => 'sidebar_first',
    'title' => '',
    'pages' => "",
    'module' => 'menu',
    'delta' => 'tags',
    'visibility' => 1,
    'pages' => 'api
api/*',
    'theme' => 'ibm_apim_theme'))->execute();

  // set login menu to show on header
  db_insert('block')->fields(array(
    'status' => 1,
    'region' => 'header',
    'title' => '<none>',
    'pages' => "",
    'module' => 'menu',
    'delta' => 'login-menu',
    'theme' => 'ibm_apim_theme'))->execute();

  // Enable pathologic to make sure all links are correct. If we don't
  // do this then the footer links do not work on all pages.
  $enable_pathologic = function ($text_format) {
    db_update('filter')->fields(array(
      'weight' => 50,
      'status' => 1,
      'settings' => 'a:2:{s:11:"local_paths";s:0:"";s:14:"protocol_style";s:4:"path";}'))->condition('format', $text_format)->condition('module', 'pathologic')->condition('name', 'pathologic')->execute();
  };

  $enable_pathologic('filtered_html');
  $enable_pathologic('full_html');

  // Set session timeout
  module_load_include('inc', 'autologout', 'autologout.admin');
  $form_state = form_state_defaults();
  $form_state['values'] = array('autologout_timeout' => '3600');
  drupal_form_submit('autologout_settings', $form_state);

  // Set default password policy
  $policy = array("complexity" => "3", "length" => "8");
  db_insert('password_policy')->fields(array(
    'pid' => 1,
    'name' => 'password-strength',
    'description' => 'Policy to enforce APIM password strength',
    'enabled' => 1,
    'policy' => serialize($policy)))->execute();

  // enforce password policy for all authenticated users
  db_insert('password_policy_role')->fields(array('pid' => 1, 'rid' => 2))->execute();
  // force change of password if using a one-time password reset link
  variable_set('password_policy_force_change_reset', 1);
  variable_set('password_policy_show_restrictions', 1);

  // disable comments on applications and plans
  variable_set('comment_application', '0');
  variable_set('comment_plan', '0');

  // add Ratings support
  _apim_profile_add_ratings();

  // add Tags support
  _apim_profile_add_tags();

  // turn on add to any for apis
  variable_set('addtoany_nodetypes', array('api', 'article', 'page', 'blog'));
  variable_set('addtoany_display_in_teasers', 0);

  // Create Support settings
  db_insert('support_client')->fields(array(
    'name' => 'APIs',
    'path' => 'apis',
    'status' => 1,
    'parent' => 0,
    'integrate_email' => 0,
    'mailbox' => "INBOX",
    'protocol' => 0,
    'extra' => "/novalidate-cert",
    'port' => 0,
    'domains' => '*',
    'thread_subject' => 0,
    'user_creation' => 0))->execute();

  variable_set('support_autocreate_users', 0);

  // auto create forums
  _apim_profile_configure_forums();
  variable_set('ibm_apim_autocreate_apiforum', 1);

  variable_set('ibm_apim_show_placeholder_images', 1);

  variable_set('ibm_apim_show_register_app', 1);

  variable_set('ibm_apim_enable_api_test', 1);

  variable_set('ibm_apim_autotag_with_phase', 1);

  // set user registration defaults
  variable_set('ibm_apim_username_show', FALSE);
  variable_set('ibm_apim_username_reqd', FALSE);
  variable_set('ibm_apim_email_show', TRUE);
  variable_set('ibm_apim_email_reqd', TRUE);
  variable_set('ibm_apim_email_as_username', TRUE);
  variable_set('ibm_apim_organization_show', TRUE);
  variable_set('ibm_apim_organization_reqd', TRUE);
  variable_set('ibm_apim_firstname_show', TRUE);
  variable_set('ibm_apim_firstname_reqd', TRUE);
  variable_set('ibm_apim_lastname_show', TRUE);
  variable_set('ibm_apim_lastname_reqd', TRUE);
  variable_set('ibm_apim_password_show', TRUE);
  variable_set('ibm_apim_password_reqd', TRUE);
  variable_set('ibm_apim_company_show', FALSE);
  variable_set('ibm_apim_company_reqd', FALSE);
  variable_set('ibm_apim_phone_show', FALSE);
  variable_set('ibm_apim_phone_reqd', FALSE);
  variable_set('ibm_apim_address_show', FALSE);
  variable_set('ibm_apim_address_reqd', FALSE);

  // change forum style
  variable_set('advanced_forum_style', 'cloudless_day');

  // configure captchas
  variable_set('captcha_default_challenge', 'image_captcha/Image');
  variable_set('captcha_persistence', "2");

  // disable captcha on login forms & password change
  db_insert('captcha_points')->fields(array(
    'captcha_type' => null,
    'module' => null,
    'form_id' => 'user_login'))->execute();
  db_insert('captcha_points')->fields(array(
    'captcha_type' => null,
    'module' => null,
    'form_id' => 'user_login_block'))->execute();
  db_insert('captcha_points')->fields(array(
    'captcha_type' => null,
    'module' => null,
    'form_id' => 'user_pass'))->execute();

  // set up permissions
  $admin_role = user_role_load_by_name('administrator');
  $admin_rid = $admin_role->rid;
  $adminpermissions = array('edit any api content', 'edit any plan content');
  user_role_grant_permissions($admin_rid, $adminpermissions);
  $anonpermissions = array(
    'access site-wide contact form',
    'view faq page',
    'view bean page',
    'view any banner_block bean',
    'search content',
    'use advanced search',
    'view any twitter_timeline bean');
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, $anonpermissions);
  $authpermissions = array(
    'access site-wide contact form',
    'view faq page',
    'rate content',
    'create forum content',
    'view bean page',
    'view any banner_block bean',
    'vote on polls',
    'create support_ticket content',
    'edit own support_ticket content',
    'access APIs tickets',
    'search content',
    'use advanced search',
    'maintain own subscriptions',
    'manage own subscriptions',
    'subscribe to content',
    'subscribe to content type',
    'create subscriptions',
    'subscribe to taxonomy terms',
    'subscribe to taxonomy vocabulary',
    'view any twitter_timeline bean');
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, $authpermissions);
  // Find the correct vid for the tags vocab. The vid cannot be determined in a cluster as auto incremented
  // fields have gaps in their sequence when using galera due some some cleverness in its auto increment protocol
  $vid = db_query("SELECT vid FROM taxonomy_vocabulary WHERE machine_name=:machine_name", array(
    ':machine_name' => 'tags'))->fetchField();
  $delete_terms = 'delete terms in ' . $vid;
  $edit_terms = 'edit terms in ' . $vid;
  $editor_role = user_role_load_by_name('content author');
  $editor_rid = $editor_role->rid;
  $editorpermissions = array(
    'access site-wide contact form',
    'access toolbar',
    'create any banner_block bean',
    'edit any banner_block bean',
    'view any banner_block bean',
    'delete any banner_block bean',
    'view faq page',
    'rate content',
    'create forum content',
    'vote on polls',
    'create support_ticket content',
    'edit own support_ticket content',
    'access APIs tickets',
    'search content',
    'use advanced search',
    'use text format full_html',
    'use text format filtered_html',
    'administer faq',
    'administer faq order',
    'access content',
    'access content overview',
    'view own unpublished content',
    'create blog content',
    'create article content',
    'create faq content',
    'create page content',
    'create poll content',
    'delete own blog content',
    'delete own article content',
    'delete own faq content',
    'delete own page content',
    'delete own poll content',
    'edit any blog content',
    'edit any article content',
    'edit any faq content',
    'edit any page content',
    'edit any poll content',
    'edit own blog content',
    'edit own article content',
    'edit own faq content',
    'edit own page content',
    'edit own poll content',
    'edit any api content',
    'edit any plan content',
    $delete_terms,
    $edit_terms,
    'view the administration theme',
    'administer tags vocabulary terms',
    'access administration pages');
  user_role_grant_permissions($editor_rid, $editorpermissions);
  // Find the correct vid for the tags vocab. The vid cannot be determined in a cluster as auto incremented
  // fields have gaps in their sequence when using galera due some some cleverness in its auto increment protocol
  $vid = db_query("SELECT vid FROM taxonomy_vocabulary WHERE machine_name=:machine_name", array(
    ':machine_name' => 'forums'))->fetchField();
  $delete_terms = 'delete terms in ' . $vid;
  $edit_terms = 'edit terms in ' . $vid;

  $mod_role = user_role_load_by_name('forum moderator');
  $mod_rid = $mod_role->rid;
  $modpermissions = array(
    'access toolbar',
    'view faq page',
    'create forum content',
    'create support_ticket content',
    'edit own support_ticket content',
    'access APIs tickets',
    'search content',
    'use advanced search',
    'use text format filtered_html',
    'delete own forum content',
    'delete any forum content',
    'edit any forum content',
    'edit own forum content',
    $delete_terms,
    $edit_terms,
    'view forum statistics',
    'administer advanced forum',
    'administer forums',
    'view the administration theme',
    'administer forums vocabulary terms',
    'access administration pages',
    'make posts sticky',
    'moderate posts');
  user_role_grant_permissions($mod_rid, $modpermissions);
  // have to create the skip content approval permission programmatically
  db_insert('role_permission')->fields(array(
    'module' => 'content_approval',
    'permission' => 'skip forum content approval prior their publication',
    'rid' => $mod_rid))->execute();

  // make the developer_org_select block only show for logged in users
  db_insert('block_role')->fields(array(
    'module' => 'ibm_apim',
    'delta' => 'developer_org_select',
    'rid' => $admin_rid))->execute();
  db_insert('block_role')->fields(array(
    'module' => 'ibm_apim',
    'delta' => 'developer_org_select',
    'rid' => DRUPAL_AUTHENTICATED_RID))->execute();
  db_insert('block_role')->fields(array(
    'module' => 'ibm_apim',
    'delta' => 'developer_org_select',
    'rid' => $editor_rid))->execute();
  db_insert('block_role')->fields(array(
    'module' => 'ibm_apim',
    'delta' => 'developer_org_select',
    'rid' => $mod_rid))->execute();

  // turn on bookmark flag for our content types
  db_insert('flag_types')->fields(array('fid' => 1, 'type' => 'api'))->execute();
  db_insert('flag_types')->fields(array('fid' => 1, 'type' => 'application'))->execute();
  db_insert('flag_types')->fields(array('fid' => 1, 'type' => 'plan'))->execute();
  db_insert('flag_types')->fields(array('fid' => 1, 'type' => 'support_ticket'))->execute();

  // configure FAQs
  variable_set('faq_display', 'hide_answer');
  variable_set('faq_hide_qa_accordion', 1);

  // performance tuning options
  variable_set('block_cache', 1);
  variable_set('cache_lifetime', "0");
  variable_set('page_cache_maximum_age', "900");
  variable_set('page_compression', 1);
  variable_set('preprocess_js', 1);
  variable_set('preprocess_css', 0);

  // disable cloning of our content types
  variable_set('clone_omitted', array(
    'api' => 'api',
    'application' => 'application',
    'plan' => 'plan',
    'article' => 0,
    'page' => 0,
    'blog' => 0,
    'faq' => 0,
    'forum' => 0,
    'poll' => 0,
    'support_ticket' => 0));

  // setup some example security questions
  drupal_load('module', 'security_questions');
  security_questions_add_question('What is the name of the place your wedding reception was held?');
  security_questions_add_question('In what city or town does your nearest sibling live?');
  security_questions_add_question('What was the name of your elementary / primary school?');
  security_questions_add_question('In what town or city did you meet your spouse/partner?');
  security_questions_add_question('What time of the day were you born? (hh:mm)');
  module_disable(array('security_questions'), TRUE);

  // configure cron
  variable_set('ultimate_cron_plugin_logger_default', 'cache');
  variable_set('ultimate_cron_plugin_logger_cache_settings', array(
    'bin' => 'cache_ultimate_cron',
    'timeout' => '-1'));
  variable_set('ultimate_cron_plugin_launcher_serial_settings', array(
    'lock_timeout' => '3600',
    'max_threads' => '1',
    'poorman_keepalive' => 1,
    'thread' => 'any'));

  // Make our cron job run every minute
  db_insert('ultimate_cron_job')->fields(array(
    'name' => 'ibm_apim_cron',
    'title' => 'Default cron handler',
    'settings' => 'a:3:{s:9:"scheduler";a:2:{s:4:"name";s:0:"";s:6:"simple";a:1:{s:5:"rules";a:1:{i:0;s:9:"* * * * *";}}}s:8:"launcher";a:2:{s:4:"name";s:0:"";s:6:"serial";a:0:{}}s:6:"logger";a:2:{s:4:"name";s:0:"";s:5:"cache";a:0:{}}}'))->execute();

  // Update the menu router information.
  menu_rebuild();
}

/**
 * Task callback: returns the form allowing the user to add example store content on install.
 */
function apim_profile_configure_connection_form() {
  drupal_set_title(st('Configure API Management'));
  global $base_url;

  $form['apim_config'] = array('#type' => 'fieldset', '#title' => st('Configure API Mangement'));
  $form['apim_config']['apim_hostname'] = array(
    '#title' => t('API Manager Hostname'),
    '#description' => t('To configure this Developer Portal to work with the API Manager host you must also go to /apimanager on the API Manager host, select the environment for this Developer Portal and ensure that the "Custom Developer Portal URL" is set to: @baseurl', array(
      'baseurl' => $base_url)),
    '#type' => 'textfield');
  $form['apim_config']['apim_insecure'] = array(
    '#title' => t('Accept Self-Signed SSL Certificates (Developer Mode)'),
    '#description' => t('WARNING: This should only be used for testing and development purporses as it leaves you vulnerable to a man-in-the-middle attack. Check this if the API Manager uses a self-signed SSL certificate.'),
    '#type' => 'checkbox',
    '#default_value' => 0);
  $form['apim_config']['apim_autocreate_forums'] = array(
    '#title' => t('Create a Forum per API'),
    '#description' => t('If checked then a new forum will be created for each API that is available to a developer. Note that the forums will only be created when a developer first sees the APIs listed in the Developer Portal.'),
    '#type' => 'checkbox',
    '#default_value' => 1);
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => st('Finish'), '#weight' => 15);

  return $form;
}

/**
 * Submit callback: creates the requested sample content.
 */
function apim_profile_configure_connection_form_submit(&$form, &$form_state) {
  variable_set('ibm_apim_insecure', $form_state['values']['apim_insecure']);
  variable_set('ibm_apim_autocreate_apiforum', $form_state['values']['apim_autocreate_forums']);
  variable_set('ibm_apim_host', $form_state['values']['apim_hostname']);
  // modify notification settings for default installs
  variable_set('update_notification_threshold', 'security');
  variable_del('update_notify_emails');
}

/**
 * Implements hook_install_tasks().
 */
function apim_profile_install_tasks() {
  // Remove any status messages that might have been set. They are unneeded.
  drupal_get_messages('status', TRUE);

  $tasks = array();

  // Add installation step asking for additional languages to install.
  $tasks['apim_profile_configure_translations_form'] = array(
    'display_name' => st('Configure languages'),
    'type' => 'form');

  // Add batch process installing selected additional languages.
  $tasks['apim_profile_import_translations'] = array(
    'display_name' => st('Import translations'),
    'type' => 'batch');

  $tasks['apim_profile_configure_connection_form'] = array(
    'display_name' => st('Configure API Management'),
    'type' => 'form');

  return $tasks;
}

/**
 * Implements hook_nstall_tasks_alter().
 *
 * Skip the profile and locale selection screen as we only have one option for each.
 */
function apim_profile_install_tasks_alter(&$tasks, $install_state) {
  $tasks['install_select_locale']['function'] = 'apim_profile_locale_selection';
  $tasks['install_select_profile']['display'] = FALSE;
  $tasks['install_select_locale']['display'] = FALSE;
}

/**
 * Just set the en locale.
 * It's the only one we have
 */
function apim_profile_locale_selection(&$install_state) {
  $install_state['parameters']['locale'] = 'en';
}

/**
 * Installation task callback: returns the form allowing the user to select
 * additional languages to install.
 */
function apim_profile_configure_translations_form() {
  // Provides predefined country list.
  include_once DRUPAL_ROOT . '/includes/iso.inc';

  $form['translations'] = array(
    '#type' => 'select',
    '#title' => st('Additional languages'),
    '#description' => st('Select additional languages to enable and download contributed interface translations. (English is always installed.)'),
    '#options' => _apim_profile_locale_get_predefined_list(),
    '#multiple' => TRUE,

    // '#default_value' => array_keys(_apim_profile_locale_get_predefined_list()),
    '#size' => 11);

  $form['submit'] = array('#type' => 'submit', '#value' => st('Install selected languages'));

  return $form;
}

function _apim_profile_locale_get_predefined_list() {
  return array(
    'de' => 'Deutsch',
    'es' => 'Español',
    'fr' => 'Français',
    'it' => 'Italiano',
    'ja' => '日本語',
    'ko' => '한국어',
    'pt-br' => 'Português',
    'tr' => 'Türkçe',
    'zh-hans' => '简体中文',
    'zh-hant' => '繁體中文');
}

/**
 * Submit callback: saves selected languages to be processed on the next step.
 */
function apim_profile_configure_translations_form_submit(&$form, &$form_state) {
  variable_set('apim_profile_selected_translations', $form_state['values']['translations']);
}

/**
 * Installation task callback: creates batch process to enable additional
 * languages and download relevant interface translations.
 */
function apim_profile_import_translations() {
  include_once DRUPAL_ROOT . '/includes/locale.inc';
  module_load_include('check.inc', 'l10n_update');
  module_load_include('batch.inc', 'l10n_update');

  if ($translations = variable_get('apim_profile_selected_translations', array())) {
    // No need to keep this variable anymore.
    variable_del('apim_profile_selected_translations');

    // Prepare batch process to enable languages and download translations.
    $operations = array();
    foreach ($translations as $translation) {
      locale_add_language(strtolower($translation));

      // Build batch with l10n_update module.
      $history = l10n_update_get_history();
      $available = l10n_update_available_releases();
      $updates = l10n_update_build_updates($history, $available);

      $operations = array_merge($operations, _l10n_update_prepare_updates($updates, NULL, array()));
    }

    $batch = l10n_update_batch_multiple($operations, LOCALE_IMPORT_KEEP);
    return $batch;
  }
}

/**
 * Show completion message and run a bunch of tasks to run cron and flush caches etc.
 */
function apim_profile_install_finished(&$install_state) {
  drupal_set_title(st('@drupal installation complete', array(
    '@drupal' => drupal_install_profile_distribution_name())), PASS_THROUGH);
  $messages = drupal_set_message();
  $output = '<p>' . st('Congratulations, you installed @drupal!', array(
    '@drupal' => drupal_install_profile_distribution_name())) . '</p>';
  $output .= '<p>' . (isset($messages['error']) ? st('Review the messages above before visiting <a href="@url">your new site</a>.', array(
    '@url' => url(''))) : st('<a href="@url">Visit your new site</a>.', array('@url' => url('')))) . '</p>';

  // Run cron to populate update status tables (if available) so that users
  // will be warned if they've installed an out of date Drupal version.
  // Will also trigger indexing of profile-supplied content or feeds.
  drupal_cron_run();

  // Flush all caches to ensure that any full bootstraps during the installer
  // do not leave stale cached data, and that any content types or other items
  // registered by the install profile are registered correctly.
  drupal_flush_all_caches();

  // Also clear all caches for good measure. What is the difference between
  // flushing and clearing. Who knows.
  cache_clear_all();

  // Rebuild node types
  node_types_rebuild();

  // Rebuild the menu
  menu_rebuild();

  // Refresh registry
  list_themes(TRUE);
  drupal_theme_rebuild();

  // Remember the profile which was used.
  variable_set('install_profile', drupal_get_profile());

  // Installation profiles are always loaded last
  db_update('system')->fields(array('weight' => 1000))->condition('type', 'module')->condition('name', drupal_get_profile())->execute();

  // Cache a fully-built schema.
  drupal_get_schema(NULL, TRUE);

  // run status check to get around the version check that seems to exist the first time
  module_load_include('inc', 'system', 'system.admin');
  system_status(TRUE);

  return $output;
}

/**
 * Add ratings field for APIs, Apps and Plans.
 * Enabled for APIs and disabled for Apps and Plans.
 */
function _apim_profile_add_ratings() {
  // add Ratings to APIs
  db_insert('field_config')->fields(array(
    'id' => 600,
    'field_name' => 'field_apirating',
    'type' => 'fivestar',
    'module' => 'fivestar',
    'active' => 1,
    'storage_type' => 'field_sql_storage',
    'storage_module' => 'field_sql_storage',
    'storage_active' => 1,
    'locked' => 1,
    'data' => 'a:7:{s:12:"translatable";s:1:"0";s:12:"entity_types";a:0:{}s:8:"settings";a:1:{s:4:"axis";s:4:"vote";}s:7:"storage";a:5:{s:4:"type";s:17:"field_sql_storage";s:8:"settings";a:0:{}s:6:"module";s:17:"field_sql_storage";s:6:"active";s:1:"1";s:7:"details";a:1:{s:3:"sql";a:2:{s:18:"FIELD_LOAD_CURRENT";a:1:{s:26:"field_data_field_apirating";a:2:{s:6:"rating";s:22:"field_apirating_rating";s:6:"target";s:22:"field_apirating_target";}}s:19:"FIELD_LOAD_REVISION";a:1:{s:30:"field_revision_field_apirating";a:2:{s:6:"rating";s:22:"field_apirating_rating";s:6:"target";s:22:"field_apirating_target";}}}}}s:12:"foreign keys";a:0:{}s:7:"indexes";a:0:{}s:2:"id";s:3:"600";}',
    'cardinality' => 1,
    'translatable' => 0,
    'deleted' => 0))->execute();

  db_insert('field_config_instance')->fields(array(
    'id' => 601,
    'field_name' => 'field_apirating',
    'field_id' => 600,
    'entity_type' => 'node',
    'bundle' => 'api',
    'data' => 'a:7:{s:5:"label";s:6:"Rating";s:6:"widget";a:5:{s:6:"weight";s:1:"7";s:4:"type";s:7:"exposed";s:6:"module";s:8:"fivestar";s:6:"active";i:1;s:8:"settings";a:0:{}}s:8:"settings";a:6:{s:5:"stars";s:1:"5";s:11:"allow_clear";i:0;s:12:"allow_revote";i:1;s:13:"allow_ownvote";i:1;s:6:"target";s:4:"none";s:18:"user_register_form";b:0;}s:7:"display";a:2:{s:7:"default";a:5:{s:5:"label";s:5:"above";s:4:"type";s:26:"fivestar_formatter_default";s:6:"weight";s:2:"11";s:8:"settings";a:4:{s:6:"widget";a:1:{s:15:"fivestar_widget";s:54:"sites/all/modules/fivestar/widgets/outline/outline.css";}s:6:"expose";i:1;s:5:"style";s:7:"average";s:4:"text";s:7:"average";}s:6:"module";s:8:"fivestar";}s:6:"teaser";a:5:{s:5:"label";s:5:"above";s:4:"type";s:26:"fivestar_formatter_default";s:6:"weight";s:1:"0";s:8:"settings";a:4:{s:6:"widget";a:1:{s:15:"fivestar_widget";s:54:"sites/all/modules/fivestar/widgets/outline/outline.css";}s:6:"expose";i:0;s:5:"style";s:7:"average";s:4:"text";s:7:"average";}s:6:"module";s:8:"fivestar";}}s:8:"required";i:0;s:11:"description";s:0:"";s:13:"default_value";N;}',
    'deleted' => 0))->execute();

  db_create_table('field_data_field_apirating', array(
    'description' => "Data storage for field 600 (field_apirating)",
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to'),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance'),
      'deleted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'A boolean indicating whether this data item has been deleted'),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity id this data is attached to'),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'The entity revision id this data is attached to, or NULL if the entity type is not versioned'),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language for this data item.'),
      'delta' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The sequence number for this data item, used for multi-value fields'),
      'field_apirating_rating' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => ''),
      'field_apirating_target' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => '')),
    'primary key' => array('entity_type', 'entity_id', 'deleted', 'delta', 'language'),
    'indexes' => array(
      'entity_type' => array('entity_type'),
      'bundle' => array('bundle'),
      'deleted' => array('deleted'),
      'entity_id' => array('entity_id'),
      'revision_id' => array('revision_id'),
      'language' => array('language'))));

  db_create_table('field_revision_field_apirating', array(
    'description' => "Revision archive storage for field 600 (field_apirating)",
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to'),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance'),
      'deleted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'A boolean indicating whether this data item has been deleted'),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity id this data is attached to'),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity revision id this data is attached to, or NULL if the entity type is not versioned'),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language for this data item.'),
      'delta' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The sequence number for this data item, used for multi-value fields'),
      'field_apirating_rating' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => ''),
      'field_apirating_target' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => '')),
    'primary key' => array('entity_type', 'entity_id', 'deleted', 'delta', 'language'),
    'indexes' => array(
      'entity_type' => array('entity_type'),
      'bundle' => array('bundle'),
      'deleted' => array('deleted'),
      'entity_id' => array('entity_id'),
      'revision_id' => array('revision_id'),
      'language' => array('language'))));

  // add disabled ratings support for apps
  db_insert('field_config')->fields(array(
    'id' => 610,
    'field_name' => 'field_applicationrating',
    'type' => 'fivestar',
    'module' => 'fivestar',
    'active' => 1,
    'storage_type' => 'field_sql_storage',
    'storage_module' => 'field_sql_storage',
    'storage_active' => 1,
    'locked' => 1,
    'data' => 'a:7:{s:12:"translatable";s:1:"0";s:12:"entity_types";a:0:{}s:8:"settings";a:1:{s:4:"axis";s:4:"vote";}s:7:"storage";a:5:{s:4:"type";s:17:"field_sql_storage";s:8:"settings";a:0:{}s:6:"module";s:17:"field_sql_storage";s:6:"active";s:1:"1";s:7:"details";a:1:{s:3:"sql";a:2:{s:18:"FIELD_LOAD_CURRENT";a:1:{s:34:"field_data_field_applicationrating";a:2:{s:6:"rating";s:30:"field_applicationrating_rating";s:6:"target";s:30:"field_applicationrating_target";}}s:19:"FIELD_LOAD_REVISION";a:1:{s:38:"field_revision_field_applicationrating";a:2:{s:6:"rating";s:30:"field_applicationrating_rating";s:6:"target";s:30:"field_applicationrating_target";}}}}}s:12:"foreign keys";a:0:{}s:7:"indexes";a:0:{}s:2:"id";s:3:"610";}',
    'cardinality' => 1,
    'translatable' => 0,
    'deleted' => 0))->execute();

  db_insert('field_config_instance')->fields(array(
    'id' => 611,
    'field_name' => 'field_applicationrating',
    'field_id' => 610,
    'entity_type' => 'node',
    'bundle' => 'application',
    'data' => 'a:7:{s:5:"label";s:6:"Rating";s:6:"widget";a:5:{s:6:"weight";i:0;s:4:"type";s:7:"exposed";s:6:"module";s:8:"fivestar";s:6:"active";i:1;s:8:"settings";a:0:{}}s:8:"settings";a:6:{s:5:"stars";s:1:"5";s:11:"allow_clear";i:0;s:12:"allow_revote";i:1;s:13:"allow_ownvote";i:1;s:6:"target";s:4:"none";s:18:"user_register_form";b:0;}s:7:"display";a:1:{s:7:"default";a:4:{s:5:"label";s:5:"above";s:4:"type";s:6:"hidden";s:6:"weight";s:2:"11";s:8:"settings";a:0:{}}}s:8:"required";i:0;s:11:"description";s:0:"";s:13:"default_value";N;}',
    'deleted' => 0))->execute();

  db_create_table('field_data_field_applicationrating', array(
    'description' => "Data storage for field 610 (field_applicationrating)",
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to'),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance'),
      'deleted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'A boolean indicating whether this data item has been deleted'),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity id this data is attached to'),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'The entity revision id this data is attached to, or NULL if the entity type is not versioned'),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language for this data item.'),
      'delta' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The sequence number for this data item, used for multi-value fields'),
      'field_applicationrating_rating' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => ''),
      'field_applicationrating_target' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => '')),
    'primary key' => array('entity_type', 'entity_id', 'deleted', 'delta', 'language'),
    'indexes' => array(
      'entity_type' => array('entity_type'),
      'bundle' => array('bundle'),
      'deleted' => array('deleted'),
      'entity_id' => array('entity_id'),
      'revision_id' => array('revision_id'),
      'language' => array('language'))));

  db_create_table('field_revision_field_applicationrating', array(
    'description' => "Revision archive storage for field 610 (field_applicationrating)",
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to'),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance'),
      'deleted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'A boolean indicating whether this data item has been deleted'),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity id this data is attached to'),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity revision id this data is attached to, or NULL if the entity type is not versioned'),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language for this data item.'),
      'delta' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The sequence number for this data item, used for multi-value fields'),
      'field_applicationrating_rating' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => ''),
      'field_applicationrating_target' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => '')),
    'primary key' => array('entity_type', 'entity_id', 'deleted', 'delta', 'language'),
    'indexes' => array(
      'entity_type' => array('entity_type'),
      'bundle' => array('bundle'),
      'deleted' => array('deleted'),
      'entity_id' => array('entity_id'),
      'revision_id' => array('revision_id'),
      'language' => array('language'))));

  // add disabled ratings support for plans
  db_insert('field_config')->fields(array(
    'id' => 620,
    'field_name' => 'field_planrating',
    'type' => 'fivestar',
    'module' => 'fivestar',
    'active' => 1,
    'storage_type' => 'field_sql_storage',
    'storage_module' => 'field_sql_storage',
    'storage_active' => 1,
    'locked' => 1,
    'data' => 'a:7:{s:12:"translatable";s:1:"0";s:12:"entity_types";a:0:{}s:8:"settings";a:1:{s:4:"axis";s:4:"vote";}s:7:"storage";a:5:{s:4:"type";s:17:"field_sql_storage";s:8:"settings";a:0:{}s:6:"module";s:17:"field_sql_storage";s:6:"active";s:1:"1";s:7:"details";a:1:{s:3:"sql";a:2:{s:18:"FIELD_LOAD_CURRENT";a:1:{s:27:"field_data_field_planrating";a:2:{s:6:"rating";s:23:"field_planrating_rating";s:6:"target";s:23:"field_planrating_target";}}s:19:"FIELD_LOAD_REVISION";a:1:{s:31:"field_revision_field_planrating";a:2:{s:6:"rating";s:23:"field_planrating_rating";s:6:"target";s:23:"field_planrating_target";}}}}}s:12:"foreign keys";a:0:{}s:7:"indexes";a:0:{}s:2:"id";s:3:"620";}',
    'cardinality' => 1,
    'translatable' => 0,
    'deleted' => 0))->execute();

  db_insert('field_config_instance')->fields(array(
    'id' => 621,
    'field_name' => 'field_planrating',
    'field_id' => 620,
    'entity_type' => 'node',
    'bundle' => 'plan',
    'data' => 'a:7:{s:5:"label";s:6:"Rating";s:6:"widget";a:5:{s:6:"weight";i:0;s:4:"type";s:7:"exposed";s:6:"module";s:8:"fivestar";s:6:"active";i:1;s:8:"settings";a:0:{}}s:8:"settings";a:6:{s:5:"stars";s:1:"5";s:11:"allow_clear";i:0;s:12:"allow_revote";i:1;s:13:"allow_ownvote";i:1;s:6:"target";s:4:"none";s:18:"user_register_form";b:0;}s:7:"display";a:1:{s:7:"default";a:4:{s:5:"label";s:5:"above";s:4:"type";s:6:"hidden";s:6:"weight";s:2:"11";s:8:"settings";a:0:{}}}s:8:"required";i:0;s:11:"description";s:0:"";s:13:"default_value";N;}',
    'deleted' => 0))->execute();

  db_create_table('field_data_field_planrating', array(
    'description' => "Data storage for field 620 (field_planrating)",
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to'),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance'),
      'deleted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'A boolean indicating whether this data item has been deleted'),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity id this data is attached to'),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'The entity revision id this data is attached to, or NULL if the entity type is not versioned'),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language for this data item.'),
      'delta' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The sequence number for this data item, used for multi-value fields'),
      'field_planrating_rating' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => ''),
      'field_planrating_target' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => '')),
    'primary key' => array('entity_type', 'entity_id', 'deleted', 'delta', 'language'),
    'indexes' => array(
      'entity_type' => array('entity_type'),
      'bundle' => array('bundle'),
      'deleted' => array('deleted'),
      'entity_id' => array('entity_id'),
      'revision_id' => array('revision_id'),
      'language' => array('language'))));

  db_create_table('field_revision_field_planrating', array(
    'description' => "Revision archive storage for field 620 (field_planrating)",
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to'),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance'),
      'deleted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'A boolean indicating whether this data item has been deleted'),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity id this data is attached to'),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity revision id this data is attached to, or NULL if the entity type is not versioned'),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language for this data item.'),
      'delta' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The sequence number for this data item, used for multi-value fields'),
      'field_planrating_rating' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => ''),
      'field_planrating_target' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => '')),
    'primary key' => array('entity_type', 'entity_id', 'deleted', 'delta', 'language'),
    'indexes' => array(
      'entity_type' => array('entity_type'),
      'bundle' => array('bundle'),
      'deleted' => array('deleted'),
      'entity_id' => array('entity_id'),
      'revision_id' => array('revision_id'),
      'language' => array('language'))));
}

/**
 * Add a new forum container that we can auto-create forums for the APIs inside.
 */
function _apim_profile_configure_forums() {
  module_load_include('inc', 'forum', 'forum.admin');
  $form_state = form_state_defaults();
  $forum_container_fields = array();
  $forum_container_fields['values']['name'] = 'APIs';
  $forum_container_fields['values']['description'] = 'Get help and advice on the use of our APIs.';
  $forum_container_fields['values']['parent'][0] = 0;
  $forum_container_fields['values']['weight'] = 0;
  $forum_container_fields['values']['vid'] = variable_get('forum_nav_vocabulary', 1);
  $container = forum_form_container($forum_container_fields, $form_state);
  $container['form_id']['#value'] = 'forum_form_container';
  forum_form_submit($container, $forum_container_fields);
}

/**
 * Add tags field for APIs, Apps and Plans.
 * Enabled for APIs and disabled for Apps and Plans.
 */
function _apim_profile_add_tags() {
  db_insert('variable')->fields(array(
    'name' => 'hs_config_taxonomy-field_apitags',
    'value' => 'a:7:{s:9:"config_id";s:22:"taxonomy-field_apitags";s:12:"save_lineage";s:1:"0";s:15:"enforce_deepest";s:1:"0";s:9:"resizable";s:1:"1";s:12:"level_labels";a:1:{s:6:"status";i:0;}s:7:"dropbox";a:4:{s:6:"status";i:1;s:5:"title";s:14:"All selections";s:5:"limit";s:1:"0";s:8:"reset_hs";s:1:"1";}s:11:"editability";a:3:{s:6:"status";i:1;s:16:"allow_new_levels";i:1;s:10:"max_levels";s:1:"0";}}'))->execute();

  // add tags to APIs
  db_insert('field_config')->fields(array(
    'id' => 700,
    'field_name' => 'field_apitags',
    'type' => 'taxonomy_term_reference',
    'module' => 'taxonomy',
    'active' => 1,
    'storage_type' => 'field_sql_storage',
    'storage_module' => 'field_sql_storage',
    'storage_active' => 1,
    'locked' => 1,
    'data' => 'a:7:{s:12:"translatable";s:1:"0";s:12:"entity_types";a:0:{}s:8:"settings";a:1:{s:14:"allowed_values";a:1:{i:0;a:2:{s:10:"vocabulary";s:4:"tags";s:6:"parent";s:1:"0";}}}s:7:"storage";a:5:{s:4:"type";s:17:"field_sql_storage";s:8:"settings";a:0:{}s:6:"module";s:17:"field_sql_storage";s:6:"active";s:1:"1";s:7:"details";a:1:{s:3:"sql";a:2:{s:18:"FIELD_LOAD_CURRENT";a:1:{s:24:"field_data_field_apitags";a:1:{s:3:"tid";s:17:"field_apitags_tid";}}s:19:"FIELD_LOAD_REVISION";a:1:{s:28:"field_revision_field_apitags";a:1:{s:3:"tid";s:17:"field_apitags_tid";}}}}}s:12:"foreign keys";a:1:{s:3:"tid";a:2:{s:5:"table";s:18:"taxonomy_term_data";s:7:"columns";a:1:{s:3:"tid";s:3:"tid";}}}s:7:"indexes";a:1:{s:3:"tid";a:1:{i:0;s:3:"tid";}}s:2:"id";s:3:"701";}',
    'cardinality' => -1,
    'translatable' => 0,
    'deleted' => 0))->execute();

  db_insert('field_config_instance')->fields(array(
    'id' => 701,
    'field_name' => 'field_apitags',
    'field_id' => 700,
    'entity_type' => 'node',
    'bundle' => 'api',
    'data' => 'a:7:{s:5:"label";s:4:"Tags";s:6:"widget";a:5:{s:6:"weight";s:1:"8";s:4:"type";s:11:"taxonomy_hs";s:6:"module";s:11:"hs_taxonomy";s:6:"active";i:0;s:8:"settings";a:2:{s:4:"size";i:60;s:17:"autocomplete_path";s:21:"taxonomy/autocomplete";}}s:8:"settings";a:1:{s:18:"user_register_form";b:0;}s:7:"display";a:2:{s:7:"default";a:5:{s:5:"label";s:5:"above";s:4:"type";s:54:"hs_taxonomy_term_reference_hierarchical_text_last_link";s:6:"weight";s:2:"12";s:8:"settings";a:0:{}s:6:"module";s:11:"hs_taxonomy";}s:6:"teaser";a:4:{s:5:"label";s:5:"above";s:4:"type";s:6:"hidden";s:6:"weight";s:1:"0";s:8:"settings";a:0:{}}}s:8:"required";i:0;s:11:"description";s:0:"";s:13:"default_value";N;}',
    'deleted' => 0))->execute();

  db_create_table('field_data_field_apitags', array(
    'description' => "Data storage for field 700 (field_apitags)",
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to'),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance'),
      'deleted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'A boolean indicating whether this data item has been deleted'),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity id this data is attached to'),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'The entity revision id this data is attached to, or NULL if the entity type is not versioned'),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language for this data item.'),
      'delta' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The sequence number for this data item, used for multi-value fields'),
      'field_apitags_tid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => '')),
    'primary key' => array('entity_type', 'entity_id', 'deleted', 'delta', 'language'),
    'indexes' => array(
      'entity_type' => array('entity_type'),
      'bundle' => array('bundle'),
      'deleted' => array('deleted'),
      'entity_id' => array('entity_id'),
      'revision_id' => array('revision_id'),
      'language' => array('language'))));

  db_create_table('field_revision_field_apitags', array(
    'description' => "Revision archive storage for field 700 (field_apitags)",
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to'),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance'),
      'deleted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'A boolean indicating whether this data item has been deleted'),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity id this data is attached to'),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity revision id this data is attached to, or NULL if the entity type is not versioned'),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language for this data item.'),
      'delta' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The sequence number for this data item, used for multi-value fields'),
      'field_apitags_tid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => '')),
    'primary key' => array('entity_type', 'entity_id', 'deleted', 'delta', 'language'),
    'indexes' => array(
      'entity_type' => array('entity_type'),
      'bundle' => array('bundle'),
      'deleted' => array('deleted'),
      'entity_id' => array('entity_id'),
      'revision_id' => array('revision_id'),
      'language' => array('language'))));

  // add tags to Applications
  db_insert('variable')->fields(array(
    'name' => 'hs_config_taxonomy-field_applicationtags',
    'value' => 'a:7:{s:9:"config_id";s:30:"taxonomy-field_applicationtags";s:12:"save_lineage";s:1:"0";s:15:"enforce_deepest";s:1:"0";s:9:"resizable";s:1:"1";s:12:"level_labels";a:1:{s:6:"status";i:0;}s:7:"dropbox";a:4:{s:6:"status";i:1;s:5:"title";s:14:"All selections";s:5:"limit";s:1:"0";s:8:"reset_hs";s:1:"1";}s:11:"editability";a:3:{s:6:"status";i:1;s:16:"allow_new_levels";i:1;s:10:"max_levels";s:1:"0";}}'))->execute();

  db_insert('field_config')->fields(array(
    'id' => 710,
    'field_name' => 'field_applicationtags',
    'type' => 'taxonomy_term_reference',
    'module' => 'taxonomy',
    'active' => 1,
    'storage_type' => 'field_sql_storage',
    'storage_module' => 'field_sql_storage',
    'storage_active' => 1,
    'locked' => 1,
    'data' => 'a:7:{s:12:"translatable";s:1:"0";s:12:"entity_types";a:0:{}s:8:"settings";a:1:{s:14:"allowed_values";a:1:{i:0;a:2:{s:10:"vocabulary";s:4:"tags";s:6:"parent";s:1:"0";}}}s:7:"storage";a:5:{s:4:"type";s:17:"field_sql_storage";s:8:"settings";a:0:{}s:6:"module";s:17:"field_sql_storage";s:6:"active";s:1:"1";s:7:"details";a:1:{s:3:"sql";a:2:{s:18:"FIELD_LOAD_CURRENT";a:1:{s:32:"field_data_field_applicationtags";a:1:{s:3:"tid";s:25:"field_applicationtags_tid";}}s:19:"FIELD_LOAD_REVISION";a:1:{s:36:"field_revision_field_applicationtags";a:1:{s:3:"tid";s:25:"field_applicationtags_tid";}}}}}s:12:"foreign keys";a:1:{s:3:"tid";a:2:{s:5:"table";s:18:"taxonomy_term_data";s:7:"columns";a:1:{s:3:"tid";s:3:"tid";}}}s:7:"indexes";a:1:{s:3:"tid";a:1:{i:0;s:3:"tid";}}s:2:"id";s:3:"711";}',
    'cardinality' => -1,
    'translatable' => 0,
    'deleted' => 0))->execute();

  db_insert('field_config_instance')->fields(array(
    'id' => 711,
    'field_name' => 'field_applicationtags',
    'field_id' => 710,
    'entity_type' => 'node',
    'bundle' => 'application',
    'data' => 'a:7:{s:5:"label";s:4:"Tags";s:6:"widget";a:5:{s:6:"weight";s:1:"8";s:4:"type";s:11:"taxonomy_hs";s:6:"module";s:11:"hs_taxonomy";s:6:"active";i:0;s:8:"settings";a:2:{s:4:"size";i:60;s:17:"autocomplete_path";s:21:"taxonomy/autocomplete";}}s:8:"settings";a:1:{s:18:"user_register_form";b:0;}s:7:"display";a:2:{s:7:"default";a:5:{s:5:"label";s:5:"above";s:4:"type";s:54:"hs_taxonomy_term_reference_hierarchical_text_last_link";s:6:"weight";s:2:"12";s:8:"settings";a:0:{}s:6:"module";s:11:"hs_taxonomy";}s:6:"teaser";a:4:{s:5:"label";s:5:"above";s:4:"type";s:6:"hidden";s:6:"weight";s:1:"0";s:8:"settings";a:0:{}}}s:8:"required";i:0;s:11:"description";s:0:"";s:13:"default_value";N;}',
    'deleted' => 0))->execute();

  db_create_table('field_data_field_applicationtags', array(
    'description' => "Data storage for field 710 (field_applicationtags)",
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to'),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance'),
      'deleted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'A boolean indicating whether this data item has been deleted'),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity id this data is attached to'),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'The entity revision id this data is attached to, or NULL if the entity type is not versioned'),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language for this data item.'),
      'delta' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The sequence number for this data item, used for multi-value fields'),
      'field_applicationtags_tid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => '')),
    'primary key' => array('entity_type', 'entity_id', 'deleted', 'delta', 'language'),
    'indexes' => array(
      'entity_type' => array('entity_type'),
      'bundle' => array('bundle'),
      'deleted' => array('deleted'),
      'entity_id' => array('entity_id'),
      'revision_id' => array('revision_id'),
      'language' => array('language'))));

  db_create_table('field_revision_field_applicationtags', array(
    'description' => "Revision archive storage for field 710 (field_applicationtags)",
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to'),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance'),
      'deleted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'A boolean indicating whether this data item has been deleted'),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity id this data is attached to'),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity revision id this data is attached to, or NULL if the entity type is not versioned'),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language for this data item.'),
      'delta' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The sequence number for this data item, used for multi-value fields'),
      'field_applicationtags_tid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => '')),
    'primary key' => array('entity_type', 'entity_id', 'deleted', 'delta', 'language'),
    'indexes' => array(
      'entity_type' => array('entity_type'),
      'bundle' => array('bundle'),
      'deleted' => array('deleted'),
      'entity_id' => array('entity_id'),
      'revision_id' => array('revision_id'),
      'language' => array('language'))));

  // add tags to Plans
  db_insert('variable')->fields(array(
    'name' => 'hs_config_taxonomy-field_plantags',
    'value' => 'a:7:{s:9:"config_id";s:23:"taxonomy-field_plantags";s:12:"save_lineage";s:1:"0";s:15:"enforce_deepest";s:1:"0";s:9:"resizable";s:1:"1";s:12:"level_labels";a:1:{s:6:"status";i:0;}s:7:"dropbox";a:4:{s:6:"status";i:1;s:5:"title";s:14:"All selections";s:5:"limit";s:1:"0";s:8:"reset_hs";s:1:"1";}s:11:"editability";a:3:{s:6:"status";i:1;s:16:"allow_new_levels";i:1;s:10:"max_levels";s:1:"0";}}'))->execute();

  db_insert('field_config')->fields(array(
    'id' => 720,
    'field_name' => 'field_plantags',
    'type' => 'taxonomy_term_reference',
    'module' => 'taxonomy',
    'active' => 1,
    'storage_type' => 'field_sql_storage',
    'storage_module' => 'field_sql_storage',
    'storage_active' => 1,
    'locked' => 1,
    'data' => 'a:7:{s:12:"translatable";s:1:"0";s:12:"entity_types";a:0:{}s:8:"settings";a:1:{s:14:"allowed_values";a:1:{i:0;a:2:{s:10:"vocabulary";s:4:"tags";s:6:"parent";s:1:"0";}}}s:7:"storage";a:5:{s:4:"type";s:17:"field_sql_storage";s:8:"settings";a:0:{}s:6:"module";s:17:"field_sql_storage";s:6:"active";s:1:"1";s:7:"details";a:1:{s:3:"sql";a:2:{s:18:"FIELD_LOAD_CURRENT";a:1:{s:25:"field_data_field_plantags";a:1:{s:3:"tid";s:18:"field_plantags_tid";}}s:19:"FIELD_LOAD_REVISION";a:1:{s:29:"field_revision_field_plantags";a:1:{s:3:"tid";s:18:"field_plantags_tid";}}}}}s:12:"foreign keys";a:1:{s:3:"tid";a:2:{s:5:"table";s:18:"taxonomy_term_data";s:7:"columns";a:1:{s:3:"tid";s:3:"tid";}}}s:7:"indexes";a:1:{s:3:"tid";a:1:{i:0;s:3:"tid";}}s:2:"id";s:3:"721";}',
    'cardinality' => -1,
    'translatable' => 0,
    'deleted' => 0))->execute();

  db_insert('field_config_instance')->fields(array(
    'id' => 721,
    'field_name' => 'field_plantags',
    'field_id' => 720,
    'entity_type' => 'node',
    'bundle' => 'plan',
    'data' => 'a:7:{s:5:"label";s:4:"Tags";s:6:"widget";a:5:{s:6:"weight";s:1:"8";s:4:"type";s:11:"taxonomy_hs";s:6:"module";s:11:"hs_taxonomy";s:6:"active";i:0;s:8:"settings";a:2:{s:4:"size";i:60;s:17:"autocomplete_path";s:21:"taxonomy/autocomplete";}}s:8:"settings";a:1:{s:18:"user_register_form";b:0;}s:7:"display";a:2:{s:7:"default";a:5:{s:5:"label";s:5:"above";s:4:"type";s:54:"hs_taxonomy_term_reference_hierarchical_text_last_link";s:6:"weight";s:2:"12";s:8:"settings";a:0:{}s:6:"module";s:11:"hs_taxonomy";}s:6:"teaser";a:4:{s:5:"label";s:5:"above";s:4:"type";s:6:"hidden";s:6:"weight";s:1:"0";s:8:"settings";a:0:{}}}s:8:"required";i:0;s:11:"description";s:0:"";s:13:"default_value";N;}',
    'deleted' => 0))->execute();

  db_create_table('field_data_field_plantags', array(
    'description' => "Data storage for field 720 (field_plantags)",
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to'),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance'),
      'deleted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'A boolean indicating whether this data item has been deleted'),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity id this data is attached to'),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'The entity revision id this data is attached to, or NULL if the entity type is not versioned'),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language for this data item.'),
      'delta' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The sequence number for this data item, used for multi-value fields'),
      'field_plantags_tid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => '')),
    'primary key' => array('entity_type', 'entity_id', 'deleted', 'delta', 'language'),
    'indexes' => array(
      'entity_type' => array('entity_type'),
      'bundle' => array('bundle'),
      'deleted' => array('deleted'),
      'entity_id' => array('entity_id'),
      'revision_id' => array('revision_id'),
      'language' => array('language'))));

  db_create_table('field_revision_field_plantags', array(
    'description' => "Revision archive storage for field 720 (field_plantags)",
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to'),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The field instance bundle to which this row belongs, used when deleting a field instance'),
      'deleted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'A boolean indicating whether this data item has been deleted'),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity id this data is attached to'),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The entity revision id this data is attached to, or NULL if the entity type is not versioned'),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language for this data item.'),
      'delta' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The sequence number for this data item, used for multi-value fields'),
      'field_plantags_tid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => '')),
    'primary key' => array('entity_type', 'entity_id', 'deleted', 'delta', 'language'),
    'indexes' => array(
      'entity_type' => array('entity_type'),
      'bundle' => array('bundle'),
      'deleted' => array('deleted'),
      'entity_id' => array('entity_id'),
      'revision_id' => array('revision_id'),
      'language' => array('language'))));
}

function apim_profile_create_bannerblock() {
  $bannerdir = 'public://banner';
  file_prepare_directory($bannerdir, FILE_CREATE_DIRECTORY);

  $file_temp = file_get_contents(drupal_get_path('module', 'bannerblock') . '/images/default_bg.png');
  // Saves a file to the specified destination and creates a database entry.
  $file_temp = file_save_data($file_temp, $bannerdir . '/default_bg.png', FILE_EXISTS_RENAME);

  $bean = bean_create(array('type' => 'banner_block'));
  $bean->label = 'Welcome Banner';
  $bean->title = '';
  $bean->delta = 'banner_block';
  $bean->bannercontent = array(
    'und' => array(
      array(
        'value' => '<h1 style="text-align: center;"><span style="font-size: 1.5em; color: #ffffff;">Develop, Manage, Socialize</span></h1><p style="text-align: center;"><span style="color: #ffffff;">IBM\'s Cloud based API Management solution enables you to</span><br><span style="color: #ffffff;">Design, Manage, Analyze and Scale your API in minutes</span></p><p style="text-align: center;" class="banner_button"><a href="api" title="Browse our APIs"><span style="color: #ffffff;">See what our APIs can do for you</span></a></p><p style="text-align: center;">&nbsp;</p>',
        'format' => 'full_html')));
  $bean->bannerbgimage = array(
    'und' => array(
      0 => array(
        'fid' => $file_temp->fid,
        'filename' => $file_temp->filename,
        'filemime' => $file_temp->filemime,
        'uid' => 1,
        'uri' => $file_temp->uri,
        'status' => 1,
        'display' => 1)));
  $bean->save();
}

/*
 * Update code to handle upgrade from earlier version
 */
function apim_profile_update_7400() {
  // enable cron
  $modules = array('d3', 'clone', 'angularjs', 'menu_item_visibility', 'site_uploader', 'ultimate_cron');
  module_enable($modules, TRUE);

  // configure cron
  if (variable_get('ultimate_cron_plugin_logger_default', NULL) == NULL) {
    variable_set('ultimate_cron_plugin_logger_default', 'cache');
  }

  if (variable_get('ultimate_cron_plugin_logger_cache_settings', NULL) == NULL) {
    variable_set('ultimate_cron_plugin_logger_cache_settings', array(
      'bin' => 'cache_ultimate_cron',
      'timeout' => '-1'));
  }

  if (variable_get('ultimate_cron_plugin_launcher_serial_settings', NULL) == NULL) {
    variable_set('ultimate_cron_plugin_launcher_serial_settings', array(
      'lock_timeout' => '3600',
      'max_threads' => '1',
      'poorman_keepalive' => 1,
      'thread' => 'any'));
  }

  // Make our cron job run every minute
  $name = db_query("SELECT name FROM {ultimate_cron_job} WHERE name='ibm_apim_cron'")->fetchField();

  if ($name != 'ibm_apim_cron') {
    db_insert('ultimate_cron_job')->fields(array(
      'name' => 'ibm_apim_cron',
      'title' => 'Default cron handler',
      'settings' => 'a:3:{s:9:"scheduler";a:2:{s:4:"name";s:0:"";s:6:"simple";a:1:{s:5:"rules";a:1:{i:0;s:9:"* * * * *";}}}s:8:"launcher";a:2:{s:4:"name";s:0:"";s:6:"serial";a:0:{}}s:6:"logger";a:2:{s:4:"name";s:0:"";s:5:"cache";a:0:{}}}'))->execute();
  }

  if (variable_get('ibm_apim_enable_api_test', NULL) == NULL) {
    variable_set('ibm_apim_enable_api_test', 1);
  }
  if (variable_get('ibm_apim_autotag_with_phase', NULL) == NULL) {
    variable_set('ibm_apim_autotag_with_phase', 1);
  }

  // disable cloning of our content types
  variable_set('clone_omitted', array(
    'api' => 'api',
    'application' => 'application',
    'plan' => 'plan',
    'article' => 0,
    'page' => 0,
    'blog' => 0,
    'faq' => 0,
    'forum' => 0,
    'poll' => 0,
    'support_ticket' => 0));

  // setup some example security questions
  $modules = array('security_questions');
  module_enable($modules, TRUE);
  drupal_load('module', 'security_questions');
  $questions = security_questions_question_load_multiple();
  if (!isset($questions) || empty($questions) || count($questions) == 0) {
    security_questions_add_question('What is the name of the place your wedding reception was held?');
    security_questions_add_question('In what city or town does your nearest sibling live?');
    security_questions_add_question('What was the name of your elementary / primary school?');
    security_questions_add_question('In what town or city did you meet your spouse/partner?');
    security_questions_add_question('What time of the day were you born? (hh:mm)');
  }
  module_disable(array('security_questions'), TRUE);

  variable_set('preprocess_css', 0);
}
