<?php

/**
 * IBM API Management Integration
 *
 * Adds the Application node content type to Drupal for representing Applications from IBM APIM
 */

/**
 * Implements hook_node_info().
 */
function application_node_info() {
  return array(
    'application' => array(
      'name' => t('Application'),
      'base' => 'application',
      'description' => t('An application in IBM API Management')));
}

/**
 * Implements hook_help().
 */
function application_help($path, $arg) {
  switch ($path) {
    case 'admin/help#application' :
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The application module provides a new custom node type for use with IBM API Management.") . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('List applications') . '</dt>';
      $output .= '<dd>' . t("Nodes of this type are used to show the applications registered to the current user.") . '</dd>';
      $output .= '<dt>' . t('Register a new application') . '</dt>';
      $output .= '<dd>' . t("This module will allow the user to register a new application in IBM API Management") . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_form().
 */
function application_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 */
function application_view($node, $view_mode) {
  return $node;
}

/**
 * Implements hook_node_view().
 */
function application_node_view($node, $view_mode) {
}

/**
 * Implements hook_menu().
 */
function application_menu() {
  $items = array();
  $items['application'] = array(
    'title' => 'Apps',
    'page callback' => 'application_collection_callback',
    'menu_name' => 'main-menu',
    'weight' => 10,
    'description' => 'Your registered apps',
    'access callback' => 'user_is_logged_in');
  $items['application/new'] = array(
    'title' => 'Register an application',
    'description' => 'Form to register a new application.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_application_add_application_form'),
    'menu_name' => 'ibm_apim',
    'access callback' => 'user_is_logged_in');
  $items['application/%/edit'] = array(
    'title' => 'Edit an application',
    'description' => 'Form to edit an application.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_application_edit_application_form', 1),
    'menu_name' => 'ibm_apim',
    'access callback' => 'user_is_logged_in');
  $items['application/%/delete'] = array(
    'title' => 'Delete an application',
    'description' => 'Form to delete an application.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_application_delete_application', 1),
    'menu_name' => 'ibm_apim',
    'access callback' => 'user_is_logged_in');
  $items['application/%/verify/%'] = array(
    'title' => 'Verify an application secret',
    'description' => 'Form to verify an application secret.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_application_verify_application_secret_form', 1, 3),
    'menu_name' => 'ibm_apim',
    'access callback' => 'user_is_logged_in');
  $items['application/%/reset-clientid/%'] = array(
    'title' => 'Reset an application Client ID',
    'description' => 'Reset an application Client ID.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('application_reset_application_clientid', 1, 3),
    'menu_name' => 'ibm_apim',
    'access callback' => 'user_is_logged_in');
  $items['application/%/reset-secret/%'] = array(
    'title' => 'Reset an application secret',
    'description' => 'Reset an application secret.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('application_reset_application_secret', 1, 3),
    'menu_name' => 'ibm_apim',
    'access callback' => 'user_is_logged_in');
  $items['application/%/add-clientcreds'] = array(
    'title' => 'Add new application client credentials',
    'description' => 'Add new application client credentials.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('application_new_application_clientcreds', 1),
    'menu_name' => 'ibm_apim',
    'access callback' => 'user_is_logged_in');
  $items['application/%/update-clientcreds/%'] = array(
    'title' => 'Update application client credentials',
    'description' => 'Update application client credentials.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('application_update_application_clientcreds', 1, 3),
    'menu_name' => 'ibm_apim',
    'access callback' => 'user_is_logged_in');
  $items['application/%/delete-clientcreds/%'] = array(
    'title' => 'Delete application client credentials',
    'description' => 'Delete application client credentials.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('application_delete_application_clientcreds', 1, 3),
    'menu_name' => 'ibm_apim',
    'access callback' => 'user_is_logged_in');
  $items['application/%/upload'] = array(
    'title' => 'Upload an application image',
    'description' => 'Form to upload an application image.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_application_upload_application_image_form', 1),
    'menu_name' => 'ibm_apim',
    'access callback' => 'user_is_logged_in');
  $items['application/%/removeimage'] = array(
    'title' => 'Remove an application image',
    'description' => 'Form to remove an application\'s image.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_application_delete_image', 1),
    'menu_name' => 'ibm_apim',
    'access callback' => 'user_is_logged_in');
  $items['application/%/unsubscribe/%'] = array(
    'title' => 'Unsubscribe',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('application_unsubscribeapp', 1, 3),
    'access callback' => 'user_is_logged_in');
  $items['application/%/migrate/%/%'] = array(
    'title' => 'Migrate',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('application_migrateapp', 1, 3, 4),
    'access callback' => 'user_is_logged_in');
  $items['application/%/notifysettings'] = array(
    'title' => 'Edit application notification settings',
    'description' => 'Form to edit application notification settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_application_update_notification_settings_form', 1),
    'menu_name' => 'ibm_apim',
    'access callback' => 'user_is_logged_in');
  $items['application/%_application_path_param_to_arg'] = array(
    'title' => 'View',
    'page callback' => 'application_collection_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK);
  return $items;
}

/**
 * Implements hook_node_access().
 * This is checking if the specified application is returned from apim, if not it blocks access.
 */
function application_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  $appfound = FALSE;
  if ($type == 'application' && $op == 'view') {
    $apps = application_list_contents();
    if ($apps) {
      foreach ($apps as $app) {
        if (isset($node->application_apiid) && $app['id'] == $node->application_apiid[$node->language][0]['value']) {
          $appfound = TRUE;
        }
      }
      if ($appfound == TRUE) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
    }
    else {
      return NODE_ACCESS_DENY;
    }
  }
  else {
    return NODE_ACCESS_IGNORE;
  }
}

/**
 * Implements hook_theme().
 */
function application_theme($existing, $type, $theme, $path) {
  return array(
    'application_node_form' => array(
      'render element' => 'form',
      'template' => 'application-node-form',

      // this will set to module/theme path by default:
      'path' => drupal_get_path('module', 'ibm_apim') . '/templates'));
}

/**
 * Preprocessor for theme('application_node_form').
 */
function template_preprocess_application_node_form(&$variables) {
  // Extract the form buttons, and put them in independent variable.
  $variables['buttons'] = $variables['form']['actions'];
  hide($variables['form']['actions']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function application_form_application_node_form_alter(&$form, &$form_state) {
  // this function hides all our custom fields from the edit node form as they are all set explicitly
  $form['application_apimhostname']['#access'] = 0;
  $form['application_providerid']['#access'] = 0;
  $form['application_environmentid']['#access'] = 0;
  $form['application_description']['#access'] = 0;
  $form['title']['#access'] = 0;
  $form['application_apiid']['#access'] = 0;
  $form['application_enabled']['#access'] = 0;
  // old field name, carry on hiding it, even though new installs wont have it
  // TODO add migration code to remove it at some point
  $form['application_credentialsurl']['#access'] = 0;
  $form['application_imageurl']['#access'] = 0;
  $form['application_oauthredirecturi']['#access'] = 0;
  $form['application_orgid']['#access'] = 0;
  $form['application_public']['#access'] = 0;
  $form['application_url']['#access'] = 0;
  $form['application_updated']['#access'] = 0;
  $form['application_state']['#access'] = 0;
}

/**
 * Implements hook_preprocess_node().
 */
function application_preprocess_node(&$variables) {
  if ($variables['node']->type == 'application' && $variables['view_mode'] == 'teaser') {
    $variables['theme_hook_suggestions'][] = 'node__application__teaser';
  }
  if ($variables['node']->type == 'application' && $variables['view_mode'] == 'search_result') {
    $variables['theme_hook_suggestions'][] = 'node__application__search_result';
  }
  if ($variables['node']->type == 'application') {
    $isdev = ibm_apim_check_is_developer();
    $variables['isdev'] = $isdev;
    $variables['titlelink'] = '<span class="apimTitle"> <a href="' . url("application/" . $variables['application_apiid'][0]['safe_value']) . '">' . $variables['title'] . '</a> </span>';
    $variables['notificationsettingslink'] = ' <a href="' . url("application/" . $variables['application_apiid'][0]['value'] . "/notifysettings") . '">' . t('Notifications') . '</a> ';
    $variables['analyticslink'] = ' <a href="' . url("ibm_apim/analytics/app/" . $variables['application_apiid'][0]['value']) . '">' . t('Analytics') . '</a> ';
    if (isset($isdev) && $isdev == TRUE) {
      $variables['editlink'] = ' <a href="' . url("application/" . $variables['application_apiid'][0]['value'] . "/edit") . '">' . t('Edit') . '</a> ';
      $variables['deletelink'] = ' <a href="' . url("application/" . $variables['application_apiid'][0]['value'] . "/delete") . '">' . t('Delete') . '</a> ';
      $variables['addcredentialslink'] = ' <a href="' . url("application/" . $variables['application_apiid'][0]['value'] . "/add-clientcreds") . '">' . t('Add') . '</a> ';
      $variables['uploadimagelink'] = '<span class="uploadlink"><a href="' . url("application/" . $variables['application_apiid'][0]['value'] . "/upload") . '">' . t('Update') . '</a></span>';
      $variables['removeimagelink'] = '<span class="removelink"><a href="' . url("application/" . $variables['application_apiid'][0]['value'] . "/removeimage") . '">' . t('Remove') . '</a></span>';
    }
    else {
      $variables['editlink'] = '';
      $variables['deletelink'] = '';
      $variables['uploadimagelink'] = '';
      $variables['removeimagelink'] = '';
    }
    if ($variables['application_imageurl'][0]['value'] != NULL) {
      $org = ibm_apim_get_current_developer_org();
      $image_data = ibm_apim_raw_data('/v1/portal/orgs/' . $org['id'] . '/apps/' . $variables['application_apiid'][0]['value'] . '/image');
      if ($image_data == NULL || $image_data->code == '204') {
        $variables['appimagedata'] = '';
      }
      else {
        $mime_type = $image_data->headers['Content-Type'];
        $image = 'data:' . $mime_type . ';base64,' . base64_encode($image_data->data);
        $variables['appimagedata'] = $image;
      }
    }
    else {
      $variables['appimagedata'] = '';
    }
    if ($variables['view_mode'] == 'full') {
      $details = application_details_contents($variables['application_apiid'][0]['value']);
      if (isset($details['subscriptions'])) {
        $variables['subscriptions'] = $details['subscriptions'];
      }
      else {
        $variables['subscriptions'] = array();
      }
      if (isset($details['credentials'])) {
        $variables['credentials'] = $details['credentials'];
      }
      else {
        $variables['credentials'] = array();
      }
      $variables['notificationsettings'] = ibm_apim_get_app_notification_settings($variables['application_apiid'][0]['safe_value']);
    }
  }
}

/**
 * Implements hook_preprocess_search_result
 *
 * @param type $variables
 */
function application_preprocess_search_result(&$variables) {
  $node = $variables['result']['node'];
  if ($node->nid && $node->type == 'application') { // if the result is an application node we can load the teaser
    $variables['teaser'] = node_view($node, 'teaser');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Adds our custom submit handler
 */
function application_form_comment_form_alter(&$form, &$form_state) {
  // Add a custom submit handler to act when the form submits.
  $form['#submit'][] = 'application_custom_comment_submit_handler';
}

/**
 * Custom submit handler for the comment form.
 * This is to redirect users back to our custom path after posting a comment
 * e.g. to application/xxx instead of node/nid
 */
function application_custom_comment_submit_handler($form, &$form_state) {
  // Redirect the user after submission
  $nid = arg(2);
  if (isset($nid)) {
    $nodes = node_load_multiple(array($nid));
    if (is_array($nodes)) {
      reset($nodes);
      $first_key = key($nodes);
      if ($first_key) {
        $node = $nodes[$first_key];
        if (isset($node) && $node->type == 'application') {
          $form_state['redirect'] = 'application/' . $node->application_apiid[$node->language][0]['value'];
        }
      }
    }
  }
}

/**
 * Menu callback;
 * if a specific app has been requested will display that as full viewmode,
 * else it will show teaser viewmode for all available applications
 */
function application_collection_callback($appId = NULL) {
  global $user;
  $build = array();
  $host_pieces = _ibm_apim_parse_apim_host();
  if (empty($host_pieces)) {
    drupal_set_message(t('IBM APIM Module is not correctly configured. Specify a valid hostname and try again.'), 'error');
    return;
  }
  $limit = variable_get('default_nodes_main', 10);

  // not after a specific app
  if ($appId == NULL) {
    $nodes = array();

    $query = db_select('node', 'n');
    $nids = $query->fields('n', array('nid'))->condition('type', 'application')->condition('status', 1)->addTag('node_access')->execute()->fetchCol();
    if (!empty($nids)) {
      $nodes = node_load_multiple($nids);
    }

    $apps = application_list_contents();
    if (!empty($apps)) {
      foreach ($apps as $app) {
        $appfound = FALSE;
        if ($nodes) {
          foreach ($nodes as $node) {
            if (isset($node->application_apiid) && $app['id'] == $node->application_apiid[$node->language][0]['value']) {
              $appfound = TRUE;
              _application_updateExistingApplicationNode($node, $app);
            }
          }
        }
        if ($appfound == FALSE) {
          _application_createNewApplicationNode($app);
        }
      }
    }
    // rerun query now we've created entries for any new Applications we found
    $nids = $query->fields('n', array('nid'))->condition('type', 'application')->condition('status', 1)->addTag('node_access')->execute()->fetchCol();

    if (!empty($nids)) {
      $nodes = node_load_multiple($nids);
      $finalnids = array();
      // now remove the nodes that weren't in our list of Apps
      if ($apps) {
        $nodes = node_load_multiple($nids);
        if ($nodes) {
          foreach ($nodes as $node) {
            foreach ($apps as $app) {
              if (isset($node->application_apiid) && $app['id'] == $node->application_apiid[$node->language][0]['value']) {
                array_push($finalnids, $node->nid);
              }
            }
          }
        }
      }

      // handle paging
      $page = pager_find_page();
      $total = count($finalnids);
      $offset = $limit * $page;
      $chunk = array_slice($finalnids, $offset, $limit);
      pager_default_initialize($total, $limit);

      $finalnodes = node_load_multiple($chunk);
      if ($finalnodes) {
        $build = array(
          'content' => node_view_multiple($finalnodes),
          'pager' => array('#markup' => theme('pager'), '#weight' => $limit));
      }
      else {
        drupal_set_message(t('No applications have been found.'), 'warning');
      }
    }
    else {
      drupal_set_message(t('No applications have been found.'), 'warning');
    }
  }
  else {
    // specific app
    $app = application_details_contents($appId);
    if (isset($app)) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'application')->fieldCondition('application_apiid', 'value', $appId);

      $results = $query->execute();

      if (isset($results['node'])) {
        $keys = array_keys($results['node']);
        $node = node_load($keys[0]);
        _application_updateExistingApplicationNode($node, $app);
        drupal_goto('node/' . $node->nid);
      }
      else {
        // no existing node for this Application so create one
        $nid = _application_createNewApplicationNode($app);
        drupal_goto('node/' . $nid);
      }
    }
    else {
      drupal_set_message(t('The specified application could not be found.'), 'error');
    }
  }

  return $build;
}

/**
 * Create a new Application node
 * Used to create the new placeholder nodes for any new Applications returned by APIm
 */
function _application_createNewApplicationNode($app) {
  $hostvariable = variable_get('ibm_apim_host');
  $apim_session = &_ibm_apim_get_apim_session();
  global $user;
  $node = new stdClass();
  $node->title = $app['name'];
  $node->type = "application";
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 2;

  $node->application_apimhostname[$node->language][] = array(
    'value' => $hostvariable,
    'format' => 'plain_text');
  $node->application_providerid[$node->language][] = array(
    'value' => $apim_session['org'],
    'format' => 'plain_text');
  $node->application_environmentid[$node->language][] = array(
    'value' => $apim_session['env'],
    'format' => 'plain_text');
  $node->application_apiid[$node->language][] = array(
    'value' => $app['id'],
    'format' => 'plain_text');
  // ensure description is at least set to empty string
  if (!isset($app['description']) || empty($app['description'])) {
    $app['description'] = '';
  }
  $node->application_description[$node->language][] = array(
    'value' => $app['description'],
    'format' => 'plain_text');
  $node->application_orgid[$node->language][] = array(
    'value' => $app['orgID'],
    'format' => 'plain_text');
  $node->application_public[$node->language][] = array(
    'value' => $app['public'],
    'format' => 'plain_text');
  $node->application_enabled[$node->language][] = array(
    'value' => $app['enabled'],
    'format' => 'plain_text');
  $node->application_imageurl[$node->language][] = array(
    'value' => $app['imageURL'],
    'format' => 'plain_text');
  $file_temp = application_save_image($app['id'], $app['name']);
  if (isset($file_temp)) {
    $node->application_image = array(
      $node->language => array(
        0 => array(
          'fid' => $file_temp->fid,
          'filename' => $file_temp->filename,
          'filemime' => $file_temp->filemime,
          'uid' => 1,
          'uri' => $file_temp->uri,
          'status' => 1,
          'display' => 1)));
  }
  $node->application_oauthredirecturi[$node->language][] = array(
    'value' => $app['oauthRedirectURI'],
    'format' => 'plain_text');
  $node->application_url[$node->language][] = array(
    'value' => $app['url'],
    'format' => 'plain_text');
  $node->application_state[$node->language][] = array(
    'value' => $app['state'],
    'format' => 'plain_text');
  $node->application_updated[$node->language][] = array(
    'value' => $app['updatedAt'],
    'format' => 'plain_text');
  $node = node_submit($node); // Prepare node for saving
  node_save($node);
  return $node->nid;
}

/**
 * Update an existing Application node
 * Used to update the placeholder node for any new Application details returned by APIm
 */
function _application_updateExistingApplicationNode($node, $app) {
  $hostvariable = variable_get('ibm_apim_host');
  $apim_session = &_ibm_apim_get_apim_session();
  if (isset($app['updatedAt']) && $app['updatedAt'] != $node->application_updated[$node->language][0]['value']) {
    $node->title = $app['name'];
    $node->application_apimhostname[$node->language][0]['value'] = $hostvariable;
    $node->application_providerid[$node->language][0]['value'] = $apim_session['org'];
    $node->application_environmentid[$node->language][0]['value'] = $apim_session['env'];
    $node->application_apiid[$node->language][0]['value'] = $app['id'];
    // ensure description is at least set to empty string
    if (!isset($app['description']) || empty($app['description'])) {
      $app['description'] = '';
    }
    $node->application_description[$node->language][0]['value'] = $app['description'];
    $node->application_orgid[$node->language][0]['value'] = $app['orgID'];
    $node->application_public[$node->language][0]['value'] = $app['public'];
    $node->application_enabled[$node->language][0]['value'] = $app['enabled'];
    $node->application_imageurl[$node->language][0]['value'] = $app['imageURL'];
    $node->application_oauthredirecturi[$node->language][0]['value'] = $app['oauthRedirectURI'];
    $node->application_url[$node->language][0]['value'] = $app['url'];
    $node->application_state[$node->language][0]['value'] = $app['state'];
    $node->application_updated[$node->language][0]['value'] = $app['updatedAt'];
    node_save($node);
  }
}

/**
 * Save the image from APIM to the local FS and then we can serve it up from there
 *
 * @param string $appID
 * @param string $appName
 */
function application_save_image($appID, $appName) {
  $org = ibm_apim_get_current_developer_org();
  $developerOrg = $org['id'];
  if (!isset($developerOrg)) {
    drupal_set_message("Error: Developer organization not set.");
    return NULL;
  }
  $appimgdir = 'public://application';
  file_prepare_directory($appimgdir, FILE_CREATE_DIRECTORY);

  $image_data = ibm_apim_raw_data('/v1/portal/orgs/' . $developerOrg . '/apps/' . $appID . '/image');
  if ($image_data == NULL || $image_data->code == '204') {
    $file_temp = null;
  }
  else {
    $mime_type = $image_data->headers['Content-Type'];

    $extensions = array(
      'image/jpeg' => 'jpg',
      'image/pjpeg' => 'jpg',
      'image/png' => 'png',
      'image/x-png' => 'png',
      'image/gif' => 'gif',
      'image/bmp' => 'bmp',
      'image/x-bmp' => 'bmp',
      'image/x-bitmap' => 'bmp',
      'image/x-xbitmap' => 'bmp',
      'image/x-win-bitmap' => 'bmp',
      'image/x-windows-bmp' => 'bmp',
      'image/ms-bmp' => 'bmp',
      'image/x-ms-bmp' => 'bmp',
      'application/bmp' => 'bmp',
      'application/x-bmp' => 'bmp',
      'application/x-win-bitmap' => 'bmp');

    if (isset($extensions[$mime_type])) {
      $ext = '.' . $extensions[$mime_type];
    }
    else {
      $ext = '.bin';
    }

    // Saves a file to the specified destination and creates a database entry.
    $file_temp = file_save_data($image_data->data, $appimgdir . '/' . $appName . $ext, FILE_EXISTS_RENAME);
  }

  return $file_temp;
}

/**
 * A function to retrieve the list of applications to which a user has access.
 *
 * @return array NULL if an error occurs otherwise an array with data for each application.
 */
function application_list_contents() {
  $returnValue = array();
  $org = ibm_apim_get_current_developer_org();
  if (isset($org)) {
    $result = ibm_apim_call($org['url'] . '/apps');
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $returnValue = $result->data;
    }
  }
  return $returnValue;
}

/**
 * A function to retrieve the details for a specified application and all
 * plans registered with the application
 *
 * @param
 *          string appId
 *          The application id
 *
 * @return array NULL if an error occurs otherwise an array with data for the application
 *         and registered plans.
 */
function application_details_contents($appId) {
  $returnValue = NULL;
  if ($appId == 'new') {
    $returnValue = '';
    return $returnValue;
  }
  $apim_session = &_ibm_apim_get_apim_session();
  // check if this app is already cached in the session, if so return that
  $found = false;
  $index = 0;
  if (isset($apim_session['apps'])) {
    foreach ($apim_session['apps'] as $app) {
      $index++;
      if (isset($app) && isset($app->id)) {
        if ($app->id == $appId) {
          if (isset($app->data)) {
            $found = true;
            return $app->data;
          }
          else {
            // if exists but no data then remove it from the cache
            unset($apim_session['apps'][$index]);
          }
        }
      }
    }
  }
  if ($found == false) {
    $org = ibm_apim_get_current_developer_org();
    $developerOrg = $org['id'];
    if (!isset($developerOrg)) {
      drupal_set_message("Error: Developer organization not set.");
      return NULL;
    }
    $url = '/v1/portal/orgs/' . $developerOrg . '/apps';
    $result = ibm_apim_call($url);
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $app_result = $result->data;
    }
    $app_data = NULL;
    if (isset($app_result)) {
      foreach ($app_result as $app) {
        if (isset($app['id']) && $app['id'] == $appId) {
          $app_data = $app;
          break;
        }
      }
      if (!isset($app_data)) {
        return NULL;
      }
      $returnValue = array();
      $returnValue['orgID'] = $app_data['orgID'];
      $returnValue['id'] = $app_data['id'];
      $returnValue['name'] = $app_data['name'];
      $returnValue['description'] = $app_data['description'];
      $returnValue['credentials'] = $app_data['appCredentials'];
      $returnValue['imageURL'] = $app_data['imageURL'];
      $returnValue['public'] = $app_data['public'];
      $returnValue['enabled'] = $app_data['enabled'];
      $returnValue['updatedAt'] = $app_data['updatedAt'];
      $returnValue['state'] = $app_data['state'];
      $returnValue['oauthRedirectURI'] = $app_data['oauthRedirectURI'];
      $returnValue['url'] = $app_data['url'];
      $returnValue['secret_verify_url'] = '/v1/portal/orgs/' . $developerOrg . '/apps/' . $appId . '/credentials/verify-secret';
      $returnValue['secret_reset_url'] = '/v1/portal/orgs/' . $developerOrg . '/apps/' . $appId . '/credentials/reset-secret';

      $url = '/v1/portal/orgs/' . $developerOrg . '/apps/' . $appId . '/subscriptions';
      $result = ibm_apim_call($url);
      if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
        $sub_data = $result->data;
      }
      if (module_exists('plan')) {
        $returnValue['subscriptions'] = array();
        if ($sub_data) {
          foreach ($sub_data as $sub_details) {
            $parts = _application_get_id_and_ver_from_planurl($sub_details['planURL']);
            $temp_array = plan_details_contents($parts['id'], $parts['version']);
            if (isset($temp_array)) {
              $temp_array['approved'] = $sub_details['approved'];
              $temp_array['subId'] = $sub_details['id'];
              $returnValue['subscriptions'][] = $temp_array;
            }
          }
        }
      }
    }
    if (isset($returnValue)) {
      // cache it in the session
      $apim_session['apps'][] = array('id' => $appId, 'data' => $returnValue);
    }
    return $returnValue;
  }
}

/*
 * Returns a confirmation page for requesting new client credentials.
 *
 * @return array
 */
function application_new_application_clientcreds($form, &$form_state, $appid) {
  $isdev = ibm_apim_check_is_developer();
  if (isset($isdev) && $isdev == TRUE) {
    $form = array();
    $form['title'] = array(
      '#markup' => '<h1>' . t('Request additional client credentials') . '</h1>');
    $form['description'] = array(
      '#type' => 'textfield',
      '#title' => t('Description'),
      '#required' => FALSE);
    $form['appid'] = array('#type' => 'hidden', '#value' => $appid);

    $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
    $form['#submit'] = array('application_new_application_clientcreds_submit');
    $form['#attributes']['class'] = 'reg-form';
    return $form;
  }
  else {
    drupal_set_message(t('Developer access required.'));
    return array();
  }
}

/**
 * Submit handler to requesting new application client credentials
 *
 * @param
 *          string appId
 *          The application ID
 */
function application_new_application_clientcreds_submit($form, &$form_state) {
  $appId = $form_state['values']['appid'];
  $descr = $form_state['values']['description'];
  $org = ibm_apim_get_current_developer_org();
  $url = '/v1/portal/orgs/' . $org['id'] . '/apps/' . $appId . '/credentials';
  $data = array("description" => $descr);
  $result = ibm_apim_post($url, json_encode($data));
  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    drupal_set_message(t('Application Client ID: !html_start@label!html_end', array(
      '!html_start' => '<div id="app_id" class="appClientReset"><input class="toggle-password" id="clientID" type="password" readonly value="' . $result->data['clientID'] . '"><div class="passwordToggleContainer"><input type="checkbox" id="show-clientID"> <label for="show-clientID">',
      '@label' => t('Show Client ID'),
      '!html_end' => '</label></div></div>')));
    drupal_set_message(t('Application Client Secret: !html_start@label!html_end', array(
      '!html_start' => '<div id="app_secret" class="appClientReset"><input class="toggle-password" id="clientSecret" type="password" readonly value="' . $result->data['clientSecret'] . '"><div class="passwordToggleContainer"><input type="checkbox" id="show-clientSecret"> <label for="show-clientSecret">',
      '@label' => t('Show Client Secret'),
      '!html_end' => '</label></div></div>')));
  }
  $form_state['redirect'] = 'application/' . $appId;
}

/*
 * Returns a confirmation page for updating client credentials.
 *
 * @return array
 */
function application_update_application_clientcreds($form, &$form_state, $appid, $credid) {
  $isdev = ibm_apim_check_is_developer();
  if (isset($isdev) && $isdev == TRUE) {
    $app_data['description'] = '';
    $org = ibm_apim_get_current_developer_org();
    $developerOrg = $org['id'];
    $result = ibm_apim_call('/v1/portal/orgs/' . $developerOrg . '/apps/' . $appid . '/credentials/' . $credid);
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $app_data = $result->data;
    }
    $form = array();
    $form['title'] = array('#markup' => '<h1>' . t('Update client credentials') . '</h1>');
    $form['description'] = array(
      '#type' => 'textfield',
      '#title' => t('Description'),
      '#required' => FALSE,
      '#default_value' => $app_data['description']);
    $form['appid'] = array('#type' => 'hidden', '#value' => $appid);
    $form['credid'] = array('#type' => 'hidden', '#value' => $credid);

    $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
    $form['#submit'] = array('application_update_application_clientcreds_submit');
    $form['#attributes']['class'] = 'reg-form';
    return $form;
  }
  else {
    drupal_set_message(t('Developer access required.'));
    return array();
  }
}

/**
 * Submit handler to requesting new application client credentials
 *
 * @param
 *          string appId
 *          The application ID
 */
function application_update_application_clientcreds_submit($form, &$form_state) {
  $appId = $form_state['values']['appid'];
  $credId = $form_state['values']['credid'];
  $descr = $form_state['values']['description'];
  $org = ibm_apim_get_current_developer_org();
  $url = '/v1/portal/orgs/' . $org['id'] . '/apps/' . $appId . '/credentials/' . $credId;
  $data = array("description" => $descr);
  $result = ibm_apim_put($url, json_encode($data));
  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    drupal_set_message(t('Application credentials updated.'));
  }
  $form_state['redirect'] = 'application/' . $appId;
}

/*
 * Returns a confirmation page for deleting client credentials.
 *
 * @return array
 */
function application_delete_application_clientcreds($form, &$form_state, $appid, $credid) {
  $isdev = ibm_apim_check_is_developer();
  if (isset($isdev) && $isdev == TRUE) {
    $confirm_form['appid'] = array('#type' => 'value', '#value' => $appid);
    $confirm_form['credid'] = array('#type' => 'value', '#value' => $credid);

    return confirm_form($confirm_form, t('Are you sure you want to delete these client credentials?'), 'application/' . $appid, t('Are you sure you want to delete these client credentials?'), t('Delete'), t('Cancel'));
  }
  else {
    drupal_set_message(t('Developer access required.'));
    return array();
  }
}

/**
 * Submit handler to deleting application client credentials
 *
 * @param
 *          string appId
 *          The application ID
 */
function application_delete_application_clientcreds_submit($form, &$form_state) {
  $appId = $form_state['values']['appid'];
  $credId = $form_state['values']['credid'];
  $org = ibm_apim_get_current_developer_org();
  $url = '/v1/portal/orgs/' . $org['id'] . '/apps/' . $appId . '/credentials/' . $credId;
  $result = ibm_apim_delete($url);
  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    drupal_set_message(t('Application credentials deleted.'));
  }
  $form_state['redirect'] = 'application/' . $appId;
}

/*
 * Returns a confirmation page for resetting client ID.
 *
 * @return array
 */
function application_reset_application_clientid($form, &$form_state, $appid, $credid) {
  $isdev = ibm_apim_check_is_developer();
  if (isset($isdev) && $isdev == TRUE) {
    $confirm_form['appid'] = array('#type' => 'value', '#value' => $appid);
    $confirm_form['credid'] = array('#type' => 'value', '#value' => $credid);

    return confirm_form($confirm_form, t('Are you sure you want to reset your client ID?'), 'application/' . $appid, t('Are you sure you want to reset your client ID? This action cannot be undone.'), t('Reset'), t('Cancel'));
  }
  else {
    drupal_set_message(t('Developer access required.'));
    return array();
  }
}

/**
 * Submit handler to reset an application client ID
 *
 * @param
 *          string appId
 *          The application ID
 */
function application_reset_application_clientid_submit($form, &$form_state) {
  $appId = $form_state['values']['appid'];
  $credId = $form_state['values']['credid'];
  $org = ibm_apim_get_current_developer_org();
  $url = '/v1/portal/orgs/' . $org['id'] . '/apps/' . $appId . '/credentials/' . $credId . '/reset';
  $data = array("clientSecret" => false, "clientID" => true);
  $result = ibm_apim_put($url, json_encode($data));
  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    drupal_set_message(t('Application Client ID reset: !html_start@label!html_end', array(
      '!html_start' => '<div id="app_secret" class="appClientReset"><input class="toggle-password" id="clientSecret" type="password" readonly value="' . $result->data['clientID'] . '"><div class="passwordToggleContainer"><input type="checkbox" id="show-clientSecret"> <label for="show-clientSecret">',
      '@label' => t('Show Client ID'),
      '!html_end' => '</label></div></div>')));
  }
  $form_state['redirect'] = 'application/' . $appId;
}

/*
 * Returns a confirmation page for resetting client secret.
 *
 * @return array
 */
function application_reset_application_secret($form, &$form_state, $appid, $credid) {
  $isdev = ibm_apim_check_is_developer();
  if (isset($isdev) && $isdev == TRUE) {
    $confirm_form['appid'] = array('#type' => 'value', '#value' => $appid);
    $confirm_form['credid'] = array('#type' => 'value', '#value' => $credid);

    return confirm_form($confirm_form, t('Are you sure you want to reset your client secret?'), 'application/' . $appid, t('Are you sure you want to reset your client secret? This action cannot be undone.'), t('Reset'), t('Cancel'));
  }
  else {
    drupal_set_message(t('Developer access required.'));
    return array();
  }
}

/**
 * Submit handler to reset an application client secret
 *
 * @param
 *          string appId
 *          The application ID
 */
function application_reset_application_secret_submit($form, &$form_state) {
  $appId = $form_state['values']['appid'];
  $credId = $form_state['values']['credid'];
  $org = ibm_apim_get_current_developer_org();
  $url = '/v1/portal/orgs/' . $org['id'] . '/apps/' . $appId . '/credentials/' . $credId . '/reset';
  $data = array("clientSecret" => true, "clientID" => false);
  $result = ibm_apim_put($url, json_encode($data));
  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    drupal_set_message(t('Application secret reset: !html_start@label!html_end', array(
      '!html_start' => '<div id="app_secret" class="appSecretReset"><input class="toggle-password" id="clientSecret" type="password" readonly value="' . $result->data['clientSecret'] . '"><div class="passwordToggleContainer"><input type="checkbox" id="show-clientSecret"> <label for="show-clientSecret">',
      '@label' => t('Show Client Secret'),
      '!html_end' => '</label></div></div>')));
  }
  $form_state['redirect'] = 'application/' . $appId;
}

/**
 * Form to upload an image to assign to an application
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 *
 * @param
 *          string app_id
 *          The application ID
 */
function _application_upload_application_image_form($form, &$form_state, $app_id) {
  $isdev = ibm_apim_check_is_developer();
  if (isset($isdev) && $isdev == TRUE) {
    $form['app_id'] = array('#type' => 'hidden', '#value' => $app_id);
    $form['title'] = array('#markup' => '<h1>' . t('Upload application image') . '</h1>');
    $form['image'] = array(
      '#type' => 'file',
      '#title' => t('Select an image'),
      '#description' => t('Upload a file, allowed extensions: jpg, jpeg, png, gif'));
    $form['submit'] = array(
      '#value' => t('Submit'),
      '#type' => 'submit',
      '#name' => 'submit_image',
      '#submit' => array('_application_upload_application_image_form_submit_handler'));
    return $form;
  }
  else {
    drupal_set_message(t('Developer access required.'));
    return array();
  }
}

/**
 * Submit handler to upload an application image
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 */
function _application_upload_application_image_form_submit_handler($form, &$form_state) {
  // Get name of my file that was left by form validate function.
  $appimgdir = 'public://application';
  file_prepare_directory($appimgdir, FILE_CREATE_DIRECTORY);
  $file_temp = file_save_upload('image', array(
    'file_validate_is_image' => array(),  // Validates file is really an image.
    'file_validate_size' => array(2 * 1024 * 1024),  // file size less than 2mb
    'file_validate_extensions' => array('png gif jpg jpeg')), $appimgdir, FILE_EXISTS_RENAME); // Validate extensions.

  if (empty($file_temp)) {
    drupal_set_message(t('Failed to retrieve uploaded file.'), 'error');
  }
  else {
    // Make it a permanent file so it doesn't get deleted by cron.
    $file_temp->status = 1;
    $file_temp = file_save($file_temp);
    // Make sure we have the session variables set
    _ibm_apim_check_and_get_config();
    $host_pieces = _ibm_apim_parse_apim_host();

    // update local db
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'application')->fieldCondition('application_apiid', 'value', $form_state['values']['app_id']);
    $results = $query->execute();

    if (isset($results['node'])) {
      $keys = array_keys($results['node']);
      $node = node_load($keys[0]);
      $node->application_image = array(
        $node->language => array(
          0 => array(
            'fid' => $file_temp->fid,
            'filename' => $file_temp->filename,
            'filemime' => $file_temp->filemime,
            'uid' => 1,
            'uri' => $file_temp->uri,
            'status' => 1,
            'display' => 1)));
      node_save($node);
    }

    $org = ibm_apim_get_current_developer_org();
    $url = '/v1/portal/orgs/' . $org['id'] . '/apps/' . $form_state['values']['app_id'] . '/image';

    $url = $host_pieces['url'] . $url;
    $realpath = drupal_realpath($file_temp->uri);

    // curl_file_create only exists in php>=5.5
    if (function_exists('curl_file_create')) {
      $cf = curl_file_create($realpath, $file_temp->filemime, $file_temp->filename);
      $data = array('file_contents' => $cf);
    }
    else {
      $filestring = '@' . $realpath . ";filename=" . $file_temp->filename;
      if ($file_temp->filemime) {
        $filestring .= ';type=' . $file_temp->filemime;
      }
      $data = array('file_contents' => $filestring);
    }
    $apim_session = &_ibm_apim_get_apim_session();
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_VERBOSE, TRUE);
    curl_setopt($ch, CURLOPT_POST, TRUE);
    curl_setopt($ch, CURLOPT_HEADER, TRUE);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);

    // Enable auto-accept of self-signed certificates if this
    // has been set in the module config by an admin.
    _ibm_apim_curl_set_accept_ssl($ch);

    curl_setopt($ch, CURLOPT_FAILONERROR, TRUE);
    $ibmid = variable_get('ibm_apim_saml_idp', 0);
    if (isset($apim_session['auth'])) {
      curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        "X-IBM-APIManagement-Context: " . $apim_session['org'] . '.' . $apim_session['env'],
        "Expect: ",
        "Authorization: Basic " . $apim_session['auth']));
    }
    elseif ($ibmid == 1) {
      curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        "X-IBM-APIManagement-Context: " . $apim_session['org'] . '.' . $apim_session['env'],
        "Expect: ",
        'X-IBM-APIManagement-IBMIDToken: ' . $apim_session['samltoken']));
    }
    curl_setopt($ch, CURLOPT_URL, $url);
    $response = curl_exec($ch);

    if (curl_error($ch)) {
      drupal_set_message(curl_error($ch), 'error');
    }
    else {
      drupal_set_message(t('Application image updated.'));
    }

    curl_close($ch);
    drupal_goto('application/' . $form_state['values']['app_id']);
  }
}

/**
 * Form to allow user to input their application secret for verification.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 *
 * @param
 *          string appId
 *          The application ID that cooresponds to the secret
 *
 * @return array The form
 */
function _application_verify_application_secret_form($form, &$form_state, $appId, $credId) {
  $form = array();
  $form['title'] = array('#markup' => '<h1>' . t('Verify application secret') . '</h1>');
  $form['secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret'),
    '#size' => 50,
    '#maxlength' => 50,
    '#required' => TRUE);
  $form['appid'] = array('#type' => 'hidden', '#value' => $appId);
  $form['credid'] = array('#type' => 'hidden', '#value' => $credId);
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  $form['#submit'] = array('_application_verify_application_secret_form_submit_handler');
  return $form;
}

/**
 * Form to allow user to edit their application details.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 *
 * @param
 *          string appId
 *          The application ID to edit
 *
 * @return array The form
 */
function _application_edit_application_form($form, &$form_state, $appId) {
  $isdev = ibm_apim_check_is_developer();
  if (isset($isdev) && $isdev == TRUE) {
    $app_data = array();
    $app_data['name'] = '';
    $app_data['description'] = '';
    $app_data['oauthRedirectURI'] = '';
    $org = ibm_apim_get_current_developer_org();
    $developerOrg = $org['id'];
    $result = ibm_apim_call('/v1/portal/orgs/' . $developerOrg . '/apps/' . $appId);
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $app_data = $result->data;
    }
    $form = array();
    $form['title'] = array('#markup' => '<h1>' . t('Edit application') . '</h1>');
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Application name'),
      '#size' => 25,
      '#maxlength' => 50,
      '#required' => TRUE,
      '#default_value' => $app_data['name']);
    $form['description'] = array(
      '#type' => 'textarea',
      '#title' => t('Description'),
      '#required' => FALSE,
      '#default_value' => $app_data['description']);
    $form['oauthurl'] = array(
      '#type' => 'textfield',
      '#title' => t('OAuth redirection URL (Optional)'),
      '#size' => 50,
      '#description' => t("If you plan to use this application with any OAuth secured APIs, you will need to provide a redirection URL."),
      '#maxlength' => 100,
      '#required' => FALSE,
      '#default_value' => $app_data['oauthRedirectURI']);
    $form['developerorg'] = array('#type' => 'hidden', '#value' => $developerOrg);
    $form['appid'] = array('#type' => 'hidden', '#value' => $appId);

    $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
    $form['#submit'] = array('_application_edit_application_form_submit_handler');
    $form['#attributes']['class'] = 'reg-form';
    return $form;
  }
  else {
    drupal_set_message(t('Developer access required.'));
    return array();
  }
}

/**
 * Submit handler for the application edit form.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 */
function _application_edit_application_form_submit_handler($form, &$form_state) {
  $name = $form_state['values']['name'];
  $description = $form_state['values']['description'];
  $oauthurl = $form_state['values']['oauthurl'];
  $developer_org = $form_state['values']['developerorg'];
  $app_id = $form_state['values']['appid'];

  if (empty($description)) {
    $description = '';
  }
  if (empty($oauthurl)) {
    $oauthurl = '';
  }
  // update local db
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'application')->fieldCondition('application_apiid', 'value', $app_id);

  $results = $query->execute();

  if (isset($results['node'])) {
    $keys = array_keys($results['node']);
    $node = node_load($keys[0]);
    $node->title = $name;
    $node->application_description[$node->language][0]['value'] = $description;
    $node->application_description[$node->language][0]['safe_version'] = $description;
    $node->application_oauthredirecturi[$node->language][0]['value'] = $oauthurl;
    $node->application_oauthredirecturi[$node->language][0]['safe_version'] = $oauthurl;
    node_save($node);
  }

  // update APIm
  $url = '/v1/portal/orgs/' . $developer_org . '/apps/' . $app_id;
  $data = array("name" => $name, "description" => $description, "oauthRedirectURI" => $oauthurl);
  $result = ibm_apim_put($url, json_encode($data));
  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    drupal_set_message(t('Application updated successfully.'));
    $form_state['redirect'] = 'application/' . $app_id;
  }
  else {
    $form_state['redirect'] = 'application';
  }
}

/**
 * Application secret verification form submit handler.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 */
function _application_verify_application_secret_form_submit_handler($form, &$form_state) {
  $secret = $form_state['values']['secret'];
  $appid = $form_state['values']['appid'];
  $credid = $form_state['values']['credid'];
  $org = ibm_apim_get_current_developer_org();
  $url = '/v1/portal/orgs/' . $org['id'] . '/apps/' . $appid . '/credentials/' . $credid . '/verify-secret';
  $data = array("clientSecret" => $secret);
  $result = ibm_apim_put($url, json_encode($data));
  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    drupal_set_message(t('Application secret verified successfully.'));
  }
  $form_state['redirect'] = 'application/' . $appid;
}

/**
 * Form to allow to register a new application
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 *
 * @return array The form
 */
function _application_add_application_form($form, &$form_state) {
  $org = ibm_apim_get_current_developer_org();
  if (!isset($org)) {
    drupal_set_message(t('You must belong to a developer organization to register an application.'), 'error');
    return array();
  }
  $isdev = ibm_apim_check_is_developer();
  if (isset($isdev) && $isdev == TRUE) {
    $form = array();
    $form['title'] = array('#markup' => '<h1>' . t('Register application') . '</h1>');
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Application name'),
      '#size' => 25,
      '#maxlength' => 50,
      '#required' => TRUE);
    $form['description'] = array(
      '#type' => 'textarea',
      '#title' => t('Description'),
      '#required' => FALSE);
    $form['developerorg'] = array('#type' => 'hidden', '#value' => $org['id']);

    $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
    $form['#submit'] = array('_application_add_application_form_submit_handler');
    $form['#attributes']['class'] = 'reg-form';

    return $form;
  }
  else {
    drupal_set_message(t('Developer access required.'));
    return array();
  }
}

/**
 * Submit handler for the add application form.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 */
function _application_add_application_form_submit_handler($form, &$form_state) {
  $name = $form_state['values']['name'];
  $description = $form_state['values']['description'];
  $developer_org = $form_state['values']['developerorg'];

  $url = '/v1/portal/orgs/' . $developer_org . '/apps';
  $data = array("name" => $name, "description" => $description);
  $result = ibm_apim_post($url, json_encode($data));
  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    drupal_set_message(t('Application created successfully.'));
    drupal_set_message(t('Your client secret is: !html_start@label!html_end', array(
      '!html_start' => '<div id="app_secret" class="appSecret"><input class="toggle-password" id="clientSecret" type="password" readonly value="' . $result->data['credentials']['clientSecret'] . '"><div class="passwordToggleContainer"><input type="checkbox" id="show-clientSecret"> <label for="show-clientSecret">',
      '@label' => t('Show Client Secret'),
      '!html_end' => '</label></div></div>')));
    $form_state['redirect'] = 'application/' . $result->data['id'];
  }
  else {
    $form_state['redirect'] = 'application/new';
  }
}

/*
 * Returns a confirmation page for deleting an application.
 *
 * @return array
 */
function _application_delete_application($form, &$form_state, $appid) {
  $isdev = ibm_apim_check_is_developer();
  if (isset($isdev) && $isdev == TRUE) {
    $confirm_form['appid'] = array('#type' => 'value', '#value' => $appid);

    return confirm_form($confirm_form, t('Are you sure you want to delete this application?'), 'application/' . $appid, t('Are you sure you want to delete this application? This action cannot be undone.'), t('Delete'), t('Cancel'));
  }
  else {
    drupal_set_message(t('Developer access required.'));
    return array();
  }
}

/**
 * Submit handler to allow user to delete an application.
 */
function _application_delete_application_submit($form, &$form_state) {
  $apim_session = &_ibm_apim_get_apim_session();
  $org = ibm_apim_get_current_developer_org();
  $developerOrg = $org['id'];
  $appId = $form_state['values']['appid'];
  $url = '/v1/portal/orgs/' . $developerOrg . '/apps/' . $appId;
  $result = ibm_apim_delete($url);
  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    // also delete the node from the drupal DB too
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'application')->fieldCondition('application_apiid', 'value', $appId);
    $dbresults = $query->execute();
    if (isset($dbresults['node'])) {
      $keys = array_keys($dbresults['node']);
      node_delete($keys[0]);
    }
    // clear session app cache
    unset($apim_session['apps']);
    $apim_session['apps'] = array();
    drupal_set_message(t('Application deleted successfully.'));
  }
  $form_state['redirect'] = 'application';
}

/*
 * Returns a confirmation page for deleting an application image.
 *
 * @return array
 */
function _application_delete_image($form, &$form_state, $appid) {
  $isdev = ibm_apim_check_is_developer();
  if (isset($isdev) && $isdev == TRUE) {
    $confirm_form['appid'] = array('#type' => 'value', '#value' => $appid);

    return confirm_form($confirm_form, t('Are you sure you want to delete the application image?'), 'application/' . $appid, t('Are you sure you want to delete the application image? This action cannot be undone.'), t('Delete'), t('Cancel'));
  }
  else {
    drupal_set_message(t('Developer access required.'));
    return array();
  }
}

/**
 * Submit handler to allow user to delete an image.
 */
function _application_delete_image_submit($form, &$form_state) {
  $appId = $form_state['values']['appid'];
  $org = ibm_apim_get_current_developer_org();
  $developerOrg = $org['id'];

  // delete the file from drupal fs and db
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'application')->fieldCondition('application_apiid', 'value', $appId);
  $results = $query->execute();

  if (isset($results['node'])) {
    $keys = array_keys($results['node']);
    $node = node_load($keys[0]);
    $node_file = $node->application_image[$node->language][0]['fid'];
    $file = file_load($node_file);
    if (isset($file)) {
      file_delete($file, TRUE);
    }
  }

  // tell apim to remove it too
  $url = '/v1/portal/orgs/' . $developerOrg . '/apps/' . $appId . '/image';
  $result = ibm_apim_delete($url);
  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    drupal_set_message(t('Application image removed.'));
  }
  $form_state['redirect'] = 'application/' . $appId;
}

/*
 * Returns a confirmation page for unsubscribing from a plan.
 *
 * @return array
 */
function application_unsubscribeapp($form, &$form_state, $appid = NULL, $subid = null) {
  $isdev = ibm_apim_check_is_developer();
  if (isset($isdev) && $isdev == TRUE) {
    $confirm_form['appid'] = array('#type' => 'value', '#value' => $appid);
    $confirm_form['subid'] = array('#type' => 'value', '#value' => $subid);

    return confirm_form($confirm_form, t('Are you sure you want to unsubscribe from this plan?'), 'application/' . $appid, 'Are you sure you want to unsubscribe from this plan?', t('Unsubscribe'), t('Cancel'));
  }
  else {
    drupal_set_message(t('Developer access required.'));
    return array();
  }
}

/**
 * Handler for unsubscribing an app from a plan.
 */
function application_unsubscribeapp_submit($form, &$form_state) {
  $appId = $form_state['values']['appid'];
  $subId = $form_state['values']['subid'];
  $org = ibm_apim_get_current_developer_org();
  $developerOrg = $org['id'];
  $url = '/v1/portal/orgs/' . $developerOrg . '/apps/' . $appId . '/subscriptions/' . $subId;
  $result = ibm_apim_delete($url);
  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    drupal_set_message(t('Application unsubscribed successfully.'));
  }
  $form_state['redirect'] = 'application/' . $appId;
}

/*
 * Returns a confirmation page for migrate an app subscription.
 *
 * @return array
 */
function application_migrateapp($form, &$form_state, $appid = NULL, $subid = NULL, $planurl = null) {
  $isdev = ibm_apim_check_is_developer();
  if (isset($isdev) && $isdev == TRUE) {
    $confirm_form['appid'] = array('#type' => 'value', '#value' => $appid);
    $confirm_form['subid'] = array('#type' => 'value', '#value' => $subid);
    $confirm_form['planurl'] = array('#type' => 'value', '#value' => $planurl);

    return confirm_form($confirm_form, t('Are you sure you want to migrate to the new version of this plan?'), 'application/' . $appid, 'Are you sure you want to migrate to the new version of this plan?', t('Migrate'), t('Cancel'));
  }
  else {
    drupal_set_message(t('Developer access required.'));
    return array();
  }
}

/**
 * Handler for migrating an app subscription.
 */
function application_migrateapp_submit($form, &$form_state) {
  $apim_session = &_ibm_apim_get_apim_session();
  $appId = $form_state['values']['appid'];
  $subId = $form_state['values']['subid'];
  $origplanurl = $form_state['values']['planurl'];
  $planurl = base64_decode($origplanurl);
  $org = ibm_apim_get_current_developer_org();
  $developerOrg = $org['id'];
  $host_pieces = _ibm_apim_parse_apim_host();
  $url = '/v1/portal/orgs/' . $developerOrg . '/apps/' . $appId . '/subscriptions/' . $subId;
  $data = array("planURL" => $planurl);
  $result = ibm_apim_put($url, json_encode($data));
  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    drupal_set_message(t('Application subscription migrated successfully.'));
  }
  $form_state['redirect'] = 'application/' . $appId;
}

/**
 * Form to select an application to register to a plan.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 *
 * @param
 *          string planId
 *          The plan ID
 *
 * @param
 *          int @planVersion
 *          The version of the plan
 *
 * @return array The form
 */
function _application_add_application_registration_form($form, &$form_state, $planId, $planVersion) {
  $org = ibm_apim_get_current_developer_org();
  if (!isset($org)) {
    drupal_set_message(t('You must belong to a developer organization to use a plan.'), 'error');
    return array();
  }
  $isdev = ibm_apim_check_is_developer();
  if (isset($isdev) && $isdev == TRUE) {

    $app_link_info = array();
    $applist = application_list_contents();
    if ($applist) {
      foreach ($applist as $apparray) {
        $app_link_info[$apparray['orgID'] . ':' . $apparray['id']] = $apparray['name'];
      }
    }

    if (count($app_link_info) == 0) {
      drupal_set_message(t('You must register an application before selecting a plan.'), 'error');
      return array();
    }

    $form = array();
    $form['planId'] = array('#type' => 'hidden', '#value' => $planId);
    $form['planVersion'] = array('#type' => 'hidden', '#value' => $planVersion);

    $form['appId'] = array(
      '#type' => 'select',
      '#title' => 'Application',
      '#required' => TRUE,
      '#options' => $app_link_info);

    $form['submit'] = array('#type' => 'submit', '#value' => t('Use this plan'));
    $form['#submit'] = array('_application_add_application_registration_form_submit_handler');
    return $form;
  }
  else {
    drupal_set_message(t('Developer access required.'));
    return array();
  }
}

/**
 * Submit handler for the application/plan registration form.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 */
function _application_add_application_registration_form_submit_handler($form, &$form_state) {
  list($orgId, $appId) = explode(':', $form_state['values']['appId']);
  $planId = $form_state['values']['planId'];
  $planVersion = $form_state['values']['planVersion'];

  $apim_session = &_ibm_apim_get_apim_session();
  $url = '/v1/portal/orgs/' . $apim_session['org'] . '/apps/' . $appId . '/subscriptions';
  $host_pieces = _ibm_apim_parse_apim_host();
  $planurl = $host_pieces['url'] . '/v1/portal/plans/' . $planId . '/v' . $planVersion;
  $data = array("planURL" => $planurl);
  $result = ibm_apim_post($url, json_encode($data));
  if (module_exists('plan')) {
    $form_state['redirect'] = 'plan/' . $planId . '/' . $planVersion;
  }
  else {
    $form_state['redirect'] = 'application/' . $appId;
  }
}

/**
 * Form to allow user to edit their application notification settings.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 *
 * @param
 *          string appId
 *          The application ID to edit
 *
 * @return array The form
 */
function _application_update_notification_settings_form($form, &$form_state, $appID) {
  $app_data = array();
  $app_data['enabled'] = false;
  $app_data['interval'] = 'minute';
  $app_data['emailEnabled'] = false;
  $limitdefault = 1;
  $appURL = null;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'application')->fieldCondition('application_apiid', 'value', $appID);
  $results = $query->execute();

  if (isset($results['node'])) {
    $keys = array_keys($results['node']);
    $node = node_load($keys[0]);
    $appURL = $node->application_url[$node->language][0]['safe_value'];
    $result = ibm_apim_get_app_notification_settings($node->application_apiid[$node->language][0]['safe_value']);
  }

  if (isset($result)) {
    $app_data = $result;
    if ($app_data['events']) {
      $limitdefault = strval(count($app_data['events']));
    }
  }
  drupal_add_js('jQuery(document).ready(function(){
      var initialcb1 = jQuery("#edit-enabled").is(":checked");
      jQuery("#edit-limit-1, #edit-limit-2, #edit-limit-3, #edit-limit-4").prop("disabled", !initialcb1);
      jQuery("#edit-interval-minute, #edit-interval-hour, #edit-interval-day").prop("disabled", !initialcb1);
      jQuery("#edit-emailenabled").prop("disabled", !initialcb1);
     jQuery("#edit-enabled").click(function() {
        var cb1 = jQuery("#edit-enabled").is(":checked");
        jQuery("#edit-limit-1, #edit-limit-2, #edit-limit-3, #edit-limit-4").prop("disabled", !cb1);
        jQuery("#edit-interval-minute, #edit-interval-hour, #edit-interval-day").prop("disabled", !cb1);
        jQuery("#edit-emailenabled").prop("disabled", !cb1);
    });
        });', 'inline');

  $default = !$app_data['enabled'];
  $form = array();
  $form['title'] = array('#markup' => '<h1>' . t('Notification settings') . '</h1>');
  $form['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable notifications for this application'),
    '#default_value' => $app_data['enabled'],
    '#weight' => 0);
  $form['notify_fieldset'] = array(
    '#type' => 'fieldset',
    '#weight' => 2,
    '#title' => t('Send a notification when'));
  // the options to display in our form radio buttons
  $options = array(
    '1' => t('Rate limit is exceeded'),
    '2' => t('90% of the Rate limit is reached'),
    '3' => t('75% of the Rate limit is reached'),
    '4' => t('50% of the Rate limit is reached'));
  $form['notify_fieldset']['limit'] = array(
    '#type' => 'radios',
    '#weight' => 6,
    '#options' => $options,
    '#required' => true,
    '#default_value' => $limitdefault);

  $values = array('minute' => t('Every minute'), 'hour' => t('Every hour'), 'day' => t('Every day'));
  $form['notify_fieldset']['interval'] = array(
    '#type' => 'radios',
    '#weight' => 7,
    '#title' => t('Select how often to send notifications'),
    '#options' => $values,
    '#default_value' => $app_data['interval']);

  $form['activityFeed'] = array(
    '#type' => 'checkbox',
    '#disabled' => TRUE,
    '#title' => t('Built-in activity feed'),
    '#default_value' => true,
    '#weight' => 8);
  if ($app_data['emailEnabled'] == true) {
    $email_default = 1;
  }
  else {
    $email_default = 0;
  }
  $form['emailEnabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Email'),
    '#default_value' => $email_default,
    '#weight' => 9);

  $form['appurl'] = array('#type' => 'hidden', '#value' => $appURL);

  $form['submit'] = array('#type' => 'submit', '#weight' => 10, '#value' => t('Submit'));
  $form['#submit'] = array('_application_update_notification_settings_form_submit_handler');
  $form['#attributes']['class'] = 'reg-form appNotificationSettings';
  return $form;
}

/* This seems to be the only way to have a checkbox field that's disabled */
function _application_update_notification_settings_form_alter(&$form, &$form_state, $form_id) {
  $form['activityFeed']['#disabled'] = TRUE; // disables activityFeed checkbox
}

/**
 * Submit handler for the application notification settings form.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 */
function _application_update_notification_settings_form_submit_handler($form, &$form_state) {
  $enabled = $form_state['values']['enabled'];
  $emailEnabled = $form_state['values']['emailEnabled'];
  $interval = $form_state['values']['interval'];
  $limit = $form_state['values']['limit'];
  $appURL = $form_state['values']['appurl'];

  $settings = array();
  $settings['appURL'] = $appURL;
  $settings['enabled'] = $enabled;
  $settings['emailEnabled'] = $emailEnabled;
  $settings['interval'] = $interval;
  $settings['events'] = array();
  switch ($limit) {
    case '1' :
      $settings['events'][] = "rateLimitPercent100";
      break;
    case '2' :
      $settings['events'][] = "rateLimitPercent90";
      $settings['events'][] = "rateLimitPercent100";
      break;
    case '3' :
      $settings['events'][] = "rateLimitPercent75";
      $settings['events'][] = "rateLimitPercent90";
      $settings['events'][] = "rateLimitPercent100";
      break;
    case '4' :
      $settings['events'][] = "rateLimitPercent50";
      $settings['events'][] = "rateLimitPercent75";
      $settings['events'][] = "rateLimitPercent90";
      $settings['events'][] = "rateLimitPercent100";
      break;
  }

  // update APIm
  $result = ibm_apim_update_user_settings($appURL, $settings);
  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    drupal_set_message(t('Notification settings updated successfully.'));
    $form_state['redirect'] = 'application/' . $app_id;
  }
  else {
    $form_state['redirect'] = 'application';
  }
}

/**
 * Form to list the current user's applications in a select box.
 *
 * @return array An array of applications, with the ID as the key and name as value.
 */
function _application_app_select_options() {
  $app_details = application_list_contents();
  if (!isset($app_details)) {
    return NULL;
  }
  $app_array = array();
  $app_array[''] = t('Select an application');
  foreach ($app_details as $app_detail) {
    $app_array[$app_detail['id']] = $app_detail['name'];
  }
  return $app_array;
}

/**
 * Function to introspect the plan URL and return the ID and version
 *
 * @return array An array with id and version.
 */
function _application_get_id_and_ver_from_planurl($planurl) {
  $parts = parse_url($planurl);
  if ($parts) {
    $planpath = $parts['path'];
    $dirs = explode('/', $planpath);
    $version = array_pop($dirs);
    $version = ltrim($version, 'v');
    $id = array_pop($dirs);
    $ret = array('id' => $id, 'version' => $version);
  }
  return $ret;
}

function _application_path_param_to_arg($arg) {
  return $arg;
}