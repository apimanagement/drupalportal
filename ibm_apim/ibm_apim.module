<?php

/**
 * IBM API Management Integration
 *
 * Makes the API developer functions from a IBM API Management node
 * available in Drupal.
 */

/**
 * Implements hook_language_negotiation_info_alter().
 *
 * Remove the 'cache' setting from LOCALE_LANGUAGE_NEGOTIATION_BROWSER since
 * the code that utilizes this setting will in fact prevent browser negotiation.
 */
function ibm_apim_language_negotiation_info_alter(&$negotiation_info) {
  unset($negotiation_info[LOCALE_LANGUAGE_NEGOTIATION_BROWSER]['cache']);
}

/**
 * Implementation of hook_help().
 */
function ibm_apim_help($path, $arg) {
  switch ($path) {
    case 'admin/help#api' :
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("This module provides tight integration with IBM API Management.") . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Authentication') . '</dt>';
      $output .= '<dd>' . t("This module changes the login procedure so users are authenticated against IBM API Management.") . '</dd>';
      $output .= '<dt>' . t('User Management') . '</dt>';
      $output .= '<dd>' . t("Developers already members of the provider organization in IBM API Management will have IDs in this portal created for them automatically when they login.") . '</dd>';
      $output .= '<dt>' . t('Self sign up') . '</dt>';
      $output .= '<dd>' . t("It is possible for developers to sign up for an account in Drupal which will create an account and a developer organization in IBM API Management.") . '</dd>';
      $output .= '<dt>' . t('Developer organization Management') . '</dt>';
      $output .= '<dd>' . t("It is possible to invite other users to your developer organization or remove existing ones.") . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implementation of hook_preprocess_html().
 *
 * Set some css classes which we can use to format the html based on whether we are
 * showing a collection of nodes or a single node
 */
function ibm_apim_preprocess_html(&$vars) {
  // Add class for whether we are a teaser of full detail view
  // $vars['classes_array'][] = 'node-view-' . $vars['view_mode'];
  $path = drupal_get_path_alias();
  if (isset($path)) {
    $aliases = explode('/', $path);
    if ($aliases[0] == "application" || $aliases[0] == "api" || $aliases[0] == "plan") {
      if (isset($aliases[1])) {
        $vars['classes_array'][] = drupal_clean_css_identifier('full-mode');
      }
      else {
        $vars['classes_array'][] = drupal_clean_css_identifier('teaser-mode');
      }
    }
  }
}

/**
 * Implements hook_page_build().
 */
function ibm_apim_page_build(&$page) {
  // needed to try and fix some jquery issues
  drupal_add_library('system', 'ui');
  drupal_add_js('misc/jquery.ba-bbq.js');
}

/**
 * Implementation of hook_theme().
 *
 * Tell Drupal that we have template files for the content types that we define in the module.
 * A theme can override these template files if it wishes to do so, but we include them
 * in our module so that the nodes render correctly when used with a theme that doesn't know
 * about them.
 */
function ibm_apim_theme($existing, $type, $theme, $path) {
  $theme = array();
  $templates_path = drupal_get_path('module', 'ibm_apim') . '/templates';
  $theme['node__api'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--api',
    'path' => $templates_path);
  $theme['node__api__teaser'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--api--teaser',
    'path' => $templates_path);
  $theme['node__application'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--application',
    'path' => $templates_path);
  $theme['node__application__teaser'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--application--teaser',
    'path' => $templates_path);
  $theme['node__plan'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--plan',
    'path' => $templates_path);
  $theme['node__plan__teaser'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--plan--teaser',
    'path' => $templates_path);
  return $theme;
}

/**
 * Implementation of hook_form_user_login_block_alter().
 */
function ibm_apim_form_user_login_block_alter(&$form, &$form_state) {
  _ibm_apim_user_login_form_alter($form, $form_state);
  if (module_exists('security_questions')) {
    // Redirect login block submissions to the main login form.
    // @todo Is there a better way to hand off from the login block to /user?
    $form['form_id']['#value'] = 'user_login';
    // Preserve the login block's destination.
    $url = drupal_parse_url($form['#action']);
    if (isset($url['query']['destination'])) {
      $options = array(
        'query' => array('destination' => $url['query']['destination']));
    }
    else {
      $options = array();
    }
    $form['#action'] = url('user', $options);
  }
}

/**
 * Implementation of hook_form_user_login_alter().
 */
function ibm_apim_form_user_login_alter(&$form, &$form_state) {
  _ibm_apim_user_login_form_alter($form, $form_state);
}

/**
 * Alter the login form to use a custom validator that authenticates against
 * the IBM API Management API
 *
 * @param $form The
 *          form
 *
 * @param $form_state The
 *          state of the form
 */
function _ibm_apim_user_login_form_alter(&$form, &$form_state) {
  $saveForm = $form;
  $form = array();

  if ($saveForm) {
    foreach ($saveForm as $key => $value) {
      if ($key == '#validate') {
        $form[$key] = array();
        if ($value) {
          foreach ($value as $validator) {
            if ($validator == 'user_login_authenticate_validate') {
              $validator = 'ibm_apim_authenticate_validate';
            }
            $form[$key][] = $validator;
          }
        }
      }
      else {
        $form[$key] = $value;
      }
    }
  }

  $form['#submit'][] = 'ibm_apim_authenticate_submit';
  if (module_exists('security_questions')) {
    // Abort if the login forms are not protected.
    $login_forms_protected = variable_get('security_questions_user_login', FALSE);
    $protection_mode = variable_get('security_questions_protection_mode', 'after');

    if ($login_forms_protected != FALSE) {
      // Phase 1: Initial login prompt.
      if (empty($form_state['security_questions']['name'])) {
        // If the questions come before the password, hide the password field.
        if ($protection_mode == 'before') {
          unset($form['pass']);
          // Without a password, some of core's validators won't work.
          $form['#validate'] = array(

            // We can keep the core validator for a blocked username.
            'user_login_name_validate',

            // But we need to provide our own to test that the user exists.
            'security_questions_user_login_name_validate',

            // And we need our own flood event handler, to avoid clearing the flood
            // event before the password is entered.
            'security_questions_user_login_flood_validate');
        }
        // Otherwise, it's possible that the user may be able to skip phase 2, so
        // we need to keep core's validators and add our answer validator.
        else {
          $form['#validate'][] = 'security_questions_user_login_answer_validate';
        }
      }
      // Phase 2: Security questions.
      else {
        $name = $form_state['security_questions']['name'];
        $form['name'] = array('#type' => 'value', '#value' => $name);
        $account = user_load_by_name($name);

        // If the user has already chosen "remember this computer" on a challenge,
        // remember that choice.
        if (!empty($form_state['security_questions']['remember'])) {
          $form['remember'] = array('#type' => 'value', '#value' => TRUE);
        }

        // What we do next depends on whether we have the user's password yet.
        if (empty($form_state['security_questions']['pass'])) {
          // If the user is allowed to bypass question challenges or has already
          // successfully answered one, then we just need to collect the password
          // and add our answer validator.
          if (!empty($form_state['security_questions']['passed_challenge']) || security_questions_bypass_challenge($account)) {
            $form['#validate'][] = 'security_questions_user_login_answer_validate';
          }
          // Otherwise, it's time for a challenge.
          else {
            $form += security_questions_challenge($account);
            // Show the "remember this computer" option, if enabled.
            if (variable_get('security_questions_cookie', FALSE)) {
              $form['remember'] = array(
                '#title' => t('Remember this computer'),
                '#type' => 'checkbox');
            }
            // We also don't want to get the password until after the challenge,
            // so we need to unset it and use the alternate validators.
            unset($form['pass']);
            $form['#validate'] = array(
              'user_login_name_validate',
              'security_questions_user_login_name_validate',
              'security_questions_user_login_flood_validate',
              'security_questions_user_login_answer_validate');
          }
        }
        else {
          $form['pass'] = array(
            '#type' => 'value',
            '#value' => $form_state['security_questions']['pass']);
          $form['#validate'][] = 'security_questions_user_login_answer_validate';

          // If we're here, it means that both the user name and password have been
          // validated, but the user has not been logged in yet because either a
          // challenge is needed or the required number of answers is not on file.
          if (empty($form_state['security_questions']['passed_challenge'])) {
            $form += security_questions_challenge($account);
            // Show the "remember this computer" option, if enabled.
            if (variable_get('security_questions_cookie', FALSE)) {
              $form['remember'] = array(
                '#title' => t('Remember this computer'),
                '#type' => 'checkbox');
            }
          }
          else {
            module_load_include('inc', 'security_questions', 'security_questions.pages');
            $form += security_questions_user_form($form, $form_state, $account);
            $form['#validate'][] = 'security_questions_user_login_user_form_validate';
          }
        }
      }
    }

    // use our submission handler not theirs to avoid conflicts
    $form['#submit'] = array_diff($form['#submit'], array(
      "security_questions_user_login_submit"));
  }
}

/**
 * Implementation of hook_form_alter().
 */
function ibm_apim_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_block' :
    case 'user_login' :
      $ibm_apim_saml_idp = variable_get('ibm_apim_saml_idp', 0);
      if ($ibm_apim_saml_idp == 1) {
        // Add link to forgotten password form for IBMID since the main one will have been removed
        // but we still need one for admins
        $form['passwdreset'] = array(
          '#markup' => '<p>' . l(t("Forgotten your password?"), 'user/password') . '</p>');
      }
      break;
    // when using readonly IDP, for both register user forms disable the confirm password field and
    // switch it to be a normal password field
    case 'user_register_form' :
    case 'ibm_apim_activate_create_account_form' :
      $ibm_apim_readonly_idp = variable_get('ibm_apim_readonly_idp', FALSE);
      $ibm_apim_saml_idp = variable_get('ibm_apim_saml_idp', 0);
      $emailasuser = variable_get('ibm_apim_email_as_username', 1);
      if ($ibm_apim_readonly_idp == TRUE) {
        if ($emailasuser == 1 || $ibm_apim_saml_idp == 1) {
          $form['account']['mail']['#required'] = FALSE;
          unset($form['account']['mail']);
        }
        if (isset($form['account']['name'])) {
          unset($form['account']['name']['#description']);
        }
        $weight = $form['account']['#weight'] + 1;
        unset($form['account']['pass']);
        // no password field for IBMID
        if ($ibm_apim_saml_idp != 1) {
          $form['account']['pass'] = array(
            '#type' => 'password',
            '#title' => t('Password'),
            '#size' => 60,
            '#maxlength' => 64,
            '#required' => TRUE,
            '#weight' => $weight);
        }
        for ($i = 0; $i < sizeof($form['#validate']); $i++) {
          if ($form['#validate'][$i] == 'user_account_form_validate') {
            $form['#validate'][$i] = 'ibm_apim_user_register_validate';
            break;
          }
        }
      }
      break;
    case 'user_profile_form' :
      global $user;
      $ibm_apim_username_show = variable_get('ibm_apim_username_show', FALSE);
      $ibm_apim_email_show = variable_get('ibm_apim_email_show', TRUE);
      $ibm_apim_username_reqd = variable_get('ibm_apim_username_reqd', FALSE);
      $ibm_apim_email_reqd = variable_get('ibm_apim_email_reqd', TRUE);
      $ibm_apim_readonly_idp = variable_get('ibm_apim_readonly_idp', FALSE);
      $ibm_apim_email_as_username = variable_get('ibm_apim_email_as_username', TRUE);

      if ($form['#user']->uid == $user->uid) {
        // editing own profile

        // Developer Org field is always readonly on edit profile
        if ($form['field_developer_organization']) {
          $form['field_developer_organization']['#disabled'] = TRUE;
          $form['field_developer_organization']['#required'] = FALSE;
          $form['field_developer_organization']['und']['#required'] = 0;
          $form['field_developer_organization']['und'][0]['#required'] = FALSE;
          $form['field_developer_organization']['und'][0]['value']['#required'] = FALSE;
        }

        if ($ibm_apim_username_show != TRUE) {
          if (isset($form['account']['name'])) {
            unset($form['account']['name']);
          }
          if (isset($form['account']['mail'])) {
            $form['account']['mail']['#disabled'] = TRUE;
            $form['account']['mail']['#required'] = FALSE;
          }
        }
        else {
          if ($ibm_apim_username_reqd == TRUE) {
            $form['account']['name']['#required'] = TRUE;
          }
          else {
            $form['account']['name']['#required'] = FALSE;
          }
        }
        if ($ibm_apim_email_show != TRUE) {
          if (isset($form['account']['mail'])) {
            unset($form['account']['mail']);
          }
          if (isset($form['account']['name'])) {
            $form['account']['name']['#disabled'] = TRUE;
            $form['account']['name']['#required'] = FALSE;
          }
        }
        else {
          if ($ibm_apim_email_reqd == TRUE) {
            $form['account']['mail']['#required'] = TRUE;
          }
          else {
            $form['account']['mail']['#required'] = FALSE;
          }
        }
        if ($ibm_apim_email_as_username == TRUE && isset($form['account']['mail'])) {
          $form['account']['mail']['#disabled'] = TRUE;
          $form['account']['mail']['#required'] = FALSE;
        }
        // if using a readonly registry then do not allow editing of profile fields
        if ($ibm_apim_readonly_idp == TRUE) {
          if (isset($form['account']['name'])) {
            $form['account']['name']['#disabled'] = TRUE;
            $form['account']['name']['#required'] = FALSE;
          }
          if (isset($form['account']['mail'])) {
            $form['account']['mail']['#disabled'] = TRUE;
            $form['account']['mail']['#required'] = FALSE;
          }
          if (isset($form['field_first_name'])) {
            $form['field_first_name']['#disabled'] = TRUE;
            $form['field_first_name']['#required'] = FALSE;
            $form['field_first_name']['und']['#required'] = 0;
            $form['field_first_name']['und'][0]['#required'] = FALSE;
            $form['field_first_name']['und'][0]['value']['#required'] = FALSE;
          }
          if (isset($form['field_last_name'])) {
            $form['field_last_name']['#disabled'] = TRUE;
            $form['field_last_name']['#required'] = FALSE;
            $form['field_last_name']['und']['#required'] = 0;
            $form['field_last_name']['und'][0]['#required'] = FALSE;
            $form['field_last_name']['und'][0]['value']['#required'] = FALSE;
          }
          if (isset($form['field_phone'])) {
            $form['field_phone']['#disabled'] = TRUE;
            $form['field_phone']['#required'] = FALSE;
            $form['field_phone']['und']['#required'] = 0;
            $form['field_phone']['und'][0]['#required'] = FALSE;
            $form['field_phone']['und'][0]['value']['#required'] = FALSE;
          }
          if (isset($form['field_company'])) {
            $form['field_company']['#disabled'] = TRUE;
            $form['field_company']['#required'] = FALSE;
            $form['field_company']['und']['#required'] = 0;
            $form['field_company']['und'][0]['#required'] = FALSE;
            $form['field_company']['und'][0]['value']['#required'] = FALSE;
          }
          if (isset($form['field_address'])) {
            $form['field_address']['#disabled'] = TRUE;
            $form['field_address']['und']['#required'] = 0;
            $form['field_address']['und'][0]['#required'] = FALSE;
          }
          if (isset($user->uid) && $user->uid != 1) {
            if ($form['account']['pass']) {
              unset($form['account']['current_pass']);
              unset($form['account']['pass']);
            }
          }
        }
        $remoteid = "";
        if (isset($form['#user']->data['remote_id'])) {
          $remoteid = $form['#user']->data['remote_id'];
        }
        $form['account']['remote_id'] = array(
          '#type' => 'hidden',
          '#value' => $remoteid);
        // allow admin to edit their own email address
        if ($user->uid == 1) {
          $form['account']['mail']['#disabled'] = FALSE;
          $form['account']['mail']['#required'] = TRUE;
          if (isset($form['field_first_name'])) {
            $form['field_first_name']['#required'] = FALSE;
            $form['field_first_name']['und']['#required'] = 0;
            $form['field_first_name']['und'][0]['#required'] = FALSE;
            $form['field_first_name']['und'][0]['value']['#required'] = FALSE;
          }
          if (isset($form['field_last_name'])) {
            $form['field_last_name']['#required'] = FALSE;
            $form['field_last_name']['und']['#required'] = 0;
            $form['field_last_name']['und'][0]['#required'] = FALSE;
            $form['field_last_name']['und'][0]['value']['#required'] = FALSE;
          }
        }
      }
      else {
        // admin editing user account
        // disable all the fields to stop admins making changes that then would fail to sync to apim
        if (isset($form['account']['roles'])) {
          $form['account']['roles']['#disabled'] = TRUE;
          $form['account']['roles']['#required'] = FALSE;
        }
        if (isset($form['account']['name'])) {
          $form['account']['name']['#disabled'] = TRUE;
          $form['account']['name']['#required'] = FALSE;
        }
        if (isset($form['account']['pass'])) {
          $form['account']['pass']['#disabled'] = TRUE;
          $form['account']['pass']['#required'] = FALSE;
        }
        if (isset($form['account']['mail'])) {
          $form['account']['mail']['#disabled'] = TRUE;
          $form['account']['mail']['#required'] = FALSE;
        }
        if (isset($form['field_first_name'])) {
          $form['field_first_name']['#disabled'] = TRUE;
          $form['field_first_name']['#required'] = FALSE;
          $form['field_first_name']['und']['#required'] = 0;
          $form['field_first_name']['und'][0]['#required'] = FALSE;
          $form['field_first_name']['und'][0]['value']['#required'] = FALSE;
        }
        if (isset($form['field_last_name'])) {
          $form['field_last_name']['#disabled'] = TRUE;
          $form['field_last_name']['#required'] = FALSE;
          $form['field_last_name']['und']['#required'] = 0;
          $form['field_last_name']['und'][0]['#required'] = FALSE;
          $form['field_last_name']['und'][0]['value']['#required'] = FALSE;
        }
        if (isset($form['field_phone'])) {
          $form['field_phone']['#disabled'] = TRUE;
          $form['field_phone']['#required'] = FALSE;
          $form['field_phone']['und']['#required'] = 0;
          $form['field_phone']['und'][0]['#required'] = FALSE;
          $form['field_phone']['und'][0]['value']['#required'] = FALSE;
        }
        if (isset($form['field_company'])) {
          $form['field_company']['#disabled'] = TRUE;
          $form['field_company']['#required'] = FALSE;
          $form['field_company']['und']['#required'] = 0;
          $form['field_company']['und'][0]['#required'] = FALSE;
          $form['field_company']['und'][0]['value']['#required'] = FALSE;
        }
        if (isset($form['field_address'])) {
          $form['field_address']['#disabled'] = TRUE;
          $form['field_address']['und']['#required'] = 0;
          $form['field_address']['und'][0]['#required'] = FALSE;
        }
        if (isset($form['field_developer_organization'])) {
          $form['field_developer_organization']['#disabled'] = TRUE;
          $form['field_developer_organization']['#required'] = FALSE;
          $form['field_developer_organization']['und']['#required'] = 0;
          $form['field_developer_organization']['und'][0]['#required'] = FALSE;
          $form['field_developer_organization']['und'][0]['value']['#required'] = FALSE;
        }
      }

      $form['account']['#weight'] = -10;
      $currentmax = field_info_max_weight('user', 'user', 'form');
      if (isset($form['overlay-control'])) {
        $form['overlay-control']['#weight'] = -3;
      }
      if (isset($form['picture'])) {
        $form['picture']['#weight'] = -2;
      }
      if (isset($form['contact'])) {
        $form['contact']['#weight'] = -1;
      }
      if (isset($form['signature_settings'])) {
        $form['signature_settings']['#weight'] = $currentmax + 10;
      }

      $form['#validate'] = array_diff($form['#validate'], array(
        'user_account_form_validate',
        'user_validate_current_pass'));
      // if readonly registry then need to disable the email validator
      if ($ibm_apim_readonly_idp == TRUE) {
        for ($i = 0; $i < sizeof($form['#validate']); $i++) {
          if ($form['#validate'][$i] == 'user_account_form_validate') {
            $form['#validate'][$i] = 'ibm_apim_user_register_validate';
            break;
          }
        }
      }
      $form['#submit'] = array('_ibm_apim_user_profile_form_submit_handler');
      break;
  }
}

/**
 * Use a custom submit handler for the user profile form,
 * so we can update APIM too.
 *
 * @param $form The
 *          form
 *
 * @param $form_state The
 *          state of the form
 */
function _ibm_apim_user_profile_form_submit_handler($form, &$form_state) {
  $account = $form_state['user'];
  $category = $form['#user_category'];

  // Remove unneeded values.
  form_state_values_clean($form_state);

  // Before updating the account entity, keep an unchanged copy for use with
  // user_save() later. This is necessary for modules implementing the user
  // hooks to be able to react on changes by comparing the values of $account
  // and $edit.
  $account_unchanged = clone $account;

  entity_form_submit_build_entity('user', $account, $form, $form_state);

  // Populate $edit with the properties of $account, which have been edited on
  // this form by taking over all values, which appear in the form values too.
  $edit = array_intersect_key((array) $account, $form_state['values']);

  if (is_array($edit['signature'])) {
    $edit['signature_format'] = $edit['signature']['format'];
    $edit['signature'] = $edit['signature']['value'];
  }

  if (!isset($edit['data'])) {
    $edit['data'] = array();
  }

  user_save($account_unchanged, $edit, $category);
  $form_state['values']['uid'] = $account->uid;

  // update APIM with profile changes unless admin
  global $user;
  if ($user->uid != 1) {
    _ibm_apim_update_apim_profile($form_state['values']);
  }

  if ($category == 'account' && !empty($edit['pass'])) {
    // Remove the password reset tag since a new password was saved.
    unset($_SESSION['pass_reset_' . $account->uid]);
  }
  // Clear the page cache because pages can contain usernames and/or profile information:
  cache_clear_all();

  if (isset($form_state['values']['current_pass']) && ($form_state['values']['pass'] != $form_state['values']['current_pass'])) {
    _ibm_apim_change_user_password($form_state['values']['pass'], $account->name, $account->name, $form_state['values']['current_pass']);
  }

  drupal_set_message(t('The changes have been saved.'));
}

/*
 * Update APIM with profile changes
 */
function _ibm_apim_update_apim_profile($values) {
  // Make sure we have the session variables set
  _ibm_apim_check_and_get_config();
  $apim_session = &_ibm_apim_get_apim_session();
  // dont update if user registry is readonly
  $readonly = variable_get('ibm_apim_readonly_idp', 0);
  if (isset($values) && $readonly != 1) {
    $data = _ibm_apim_convert_to_apim_address($values);
    unset($data['username']);
    unset($data['organization']);
    unset($data['password']);
    $url = '/v1/portal/me';
    $result = ibm_apim_put($url, json_encode($data));
    if (!(isset($result) && $result->code >= 200 && $result->code < 300)) {
      drupal_set_message(t('Update of profile in IBM APIM failed.'));
    }
  }
}

/**
 * Implements hook_user_logout()
 * Save a cookie we can use to display the user registration activation message when user is logged out.
 */
function ibm_apim_user_logout($account) {
  user_cookie_save(array('logoff' => 1));
}

/**
 * Implementation of hook_user_presave().
 * This method checks for the global variables that indicate we're here as a result of a forgotten
 * password link. It then updates the backend APIm system with the new password using the temp
 * auth credentials from the incoming URL.
 */
function ibm_apim_user_presave(&$edit, $account, $category) {
  global $user;
  if (!isset($user->uid) || $user->uid != 1) {
    if (isset($tempUser) && isset($tempPwd)) {
      _ibm_apim_change_user_password($_REQUEST['pass']['pass1'], $tempUser, $account->name, $tempPwd);
      // clear the temp global vars
      unset($GLOBALS['tempUser']);
      unset($GLOBALS['tempPwd']);
    }
  }
}

/**
 * Validate the user authenticated with the IBM API Management environment
 * correctly and load a user with the data.
 * from the IBM API Management account.
 *
 * @param $form The
 *          form
 *
 * @param $form_state The
 *          state of the form
 */
function ibm_apim_authenticate_validate($form, &$form_state) {
  $name = $form_state['values']['name'];
  $pass = trim($form_state['values']['pass']);

  // use Drupal authentication for this user
  $admin_user_fields = user_load(1);
  $admin_name = $admin_user_fields->name;
  if ($name == $admin_name) {
    return user_login_authenticate_validate($form, $form_state);
  }

  // Flood protection code from user.module copied here as wouldn't be run otherwise
  if (!empty($name) && !empty($pass)) {
    // Do not allow any login from the current user's IP if the limit has been
    // reached. Default is 50 failed attempts allowed in one hour. This is
    // independent of the per-user limit to catch attempts from one IP to log
    // in to many different user accounts. We have a reasonably high limit
    // since there may be only one apparent IP for all users at an institution.
    if (!flood_is_allowed('failed_login_attempt_ip', variable_get('user_failed_login_ip_limit', 50), variable_get('user_failed_login_ip_window', 3600))) {
      $form_state['flood_control_triggered'] = 'ip';
      return;
    }
    $account = db_query("SELECT * FROM {users} WHERE name = :name AND status = 1", array(
      ':name' => $name))->fetchObject();
    if ($account) {
      if (variable_get('user_failed_login_identifier_uid_only', FALSE)) {
        // Register flood events based on the uid only, so they apply for any
        // IP address. This is the most secure option.
        $identifier = $account->uid;
      }
      else {
        // The default identifier is a combination of uid and IP address. This
        // is less secure but more resistant to denial-of-service attacks that
        // could lock out all users with public user names.
        $identifier = $account->uid . '-' . ip_address();
      }
      $form_state['flood_control_user_identifier'] = $identifier;

      // Don't allow login if the limit for this user has been reached.
      // Default is to allow 5 failed attempts every 6 hours.
      if (!flood_is_allowed('failed_login_attempt_user', variable_get('user_failed_login_user_limit', 5), variable_get('user_failed_login_user_window', 21600), $identifier)) {
        $form_state['flood_control_triggered'] = 'user';
        return;
      }
    }

    // We are not limited by flood control, so try to authenticate (but dont login yet).
    if (module_exists('security_questions')) {
      $authenticated = ibm_apim_authenticate($name, $pass);
      if ($authenticated) {
        $result = _ibm_apim_authenticated_login($name, $pass, $authenticated, false);
        $account = $result['account'];
        $orgs = $result['orgs'];
        // Set $form_state['uid'] as a flag for user_login_final_validate().
        $form_state['uid'] = $account->uid;
        if (isset($account->uid)) {
          form_set_value(array('#parents' => array('account')), $account, $form_state);
        }
      }
    }
    else {
      // We are not limited by flood control, so try to authenticate (but dont login yet).
      $authenticated = ibm_apim_authenticate($name, $pass);
      if ($authenticated) {
        $result = _ibm_apim_authenticated_login($name, $pass, $authenticated, false);
        $account = $result['account'];
        $orgs = $result['orgs'];
        // Set $form_state['uid'] as a flag for user_login_final_validate().
        $form_state['uid'] = $account->uid;
        if (isset($account->uid)) {
          form_set_value(array('#parents' => array('account')), $account, $form_state);
        }
        // if not a member of any orgs then redirect to the org creation form
        if (!isset($orgs) || count($orgs) < 1) {
          $form_state['noorgs'] = true;
        }
      }
    }
  }
}

// internal function to create an account if needed for new login
function _ibm_apim_authenticated_login($name, $pass, $authenticated, $login = true) {
  $orgs = array();

  // this sets up the external user with Drupal by creating a local entry. If they don't exist they are added
  _ibm_apim_external_login_register($name, array(
    'status' => 1,
    'pass' => $pass), $login);

  // we must set the 'uid' to pass back. this looks up the logged in user and sets the Drupal UID
  $account = user_external_load($name);
  $json_user_info = $authenticated;
  $devorg = '';
  if ($login == true) {
    $result = ibm_apim_call('/v1/portal/orgs');
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $orgs = $result->data;
    }
    $org_ids = array();

    if (isset($orgs)) {
      foreach ($orgs as $org) {
        if ($devorg != '') {
          $devorg .= ', ';
        }
        $devorg .= $org['name'];
        $org_ids[$org['id']] = array();
        $org_ids[$org['id']] = ($org['owner'] ? 'owner' : 'member');
      }
    }
  }

  $edit = array(
    'field_first_name' => array(
      'und' => array(
        0 => array(
          'value' => isset($json_user_info['firstName']) ? $json_user_info['firstName'] : ''))),
    'field_last_name' => array(
      'und' => array(
        0 => array(
          'value' => isset($json_user_info['lastName']) ? $json_user_info['lastName'] : ''))),
    'field_company' => array(
      'und' => array(
        0 => array(
          'value' => isset($json_user_info['additionalFields']['company_name']) ? $json_user_info['additionalFields']['company_name'] : ''))),
    'field_phone' => array(
      'und' => array(
        0 => array(
          'value' => isset($json_user_info['additionalFields']['phone_number'][0]['value']) ? $json_user_info['additionalFields']['phone_number'][0]['value'] : ''))),
    'field_developer_organization' => array(
      'und' => array(0 => array('value' => $devorg))),
    'mail' => $json_user_info['email'],
    'data' => array(
      'remote_id' => $json_user_info['id'],
      'email' => $json_user_info['email'],
      'last_login' => $json_user_info['lastLoginTime'],
      'status' => $json_user_info['status']));

  if (isset($json_user_info['additionalFields']) && isset($json_user_info['additionalFields']['addresses'][0])) {
    $edit['field_address'] = array(
      'und' => array(0 => $json_user_info['additionalFields']['addresses'][0]));
  }

  user_save($account, $edit);

  return array('account' => $account, 'orgs' => $orgs);
}

/**
 * Submission handler for the login form.
 */
function ibm_apim_authenticate_submit($form, &$form_state) {
  if (module_exists('security_questions')) {
    // if login is not protected then nothing else to do
    if (!variable_get('security_questions_user_login', FALSE)) {
      ibm_apim_authenticate_submit_redirect($form, $form_state);
      return;
    }
    // Were the user name and password valid?
    $is_authenticated = !empty($form_state['uid']);

    // Was the security question challenge answered correctly or not required?
    $passed_challenge = !empty($form_state['security_questions']['passed_challenge']);

    // Is the required number of security question answers on file?
    if ($is_authenticated) {
      $account = user_load($form_state['uid']);
      // Users with bypass permission aren't required to have answers on file.
      if (user_access('bypass security questions', $account)) {
        $has_required_number = TRUE;
      }
      else {
        $required = variable_get('security_questions_number_required', 3);
        $answers = count(security_questions_get_answer_list($account->uid));
        $has_required_number = ($answers >= $required);
      }
    }
    else {
      $has_required_number = FALSE;
    }

    // If all of the above tests passed, log in as normal.
    if ($is_authenticated && $passed_challenge && $has_required_number) {
      if (!empty($form_state['values']['remember'])) {
        $form_state['security_questions']['remember'] = TRUE;
      }
      ibm_apim_authenticate_submit_redirect($form, $form_state);
    }
    // Otherwise, save what information we have and rebuild for the next phase.
    else {
      $form_state['security_questions'] = array(
        'name' => $form_state['values']['name'],
        'pass' => empty($form_state['values']['pass']) ? FALSE : $form_state['values']['pass'],
        'passed_challenge' => $passed_challenge,
        'remember' => !empty($form_state['values']['remember']));
      $form_state['rebuild'] = TRUE;
      // Also, wipe the uid from the form state to ensure that the user name and
      // password are retested on the next run.
      if (isset($form_state['uid'])) {
        unset($form_state['uid']);
      }
    }
  }
  else {
    ibm_apim_authenticate_submit_redirect($form, $form_state);
  }
}

/**
 * Submission handler for the login form.
 */
function ibm_apim_authenticate_submit_redirect($form, &$form_state) {
  $orgs = array();
  $devorg = '';
  // passed validation so login
  if (isset($form_state['uid'])) {
    user_login_submit(array(), $form_state);
  }

  if ($form_state['uid'] != 1) {
    $result = ibm_apim_call('/v1/portal/orgs');
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $orgs = $result->data;
      foreach ($orgs as $org) {
        if ($devorg != '') {
          $devorg .= ', ';
        }
        $devorg .= $org['name'];
      }
      if (!isset($orgs) || count($orgs) < 1) {
        drupal_set_message(t('You need to create a developer organization to continue.'));
        drupal_goto('ibm_apim/org/create');
      }
      else {
        $account = user_load($form_state['uid']);
        $edit = array(
          'field_developer_organization' => array(
            'und' => array(0 => array('value' => $devorg))));
        user_save($account, $edit);
        drupal_goto('<front>');
      }
    }
    else {
      drupal_goto('<front>');
    }
  }
  else {
    drupal_goto('<front>');
  }
}

/**
 * Authenticate with the IBM API Management environment.
 *
 * @param $form The
 *          form
 *
 * @param $form_state The
 *          state of the form
 */
function ibm_apim_authenticate($name, $pass) {

  // Make sure we have the session variables set
  _ibm_apim_check_and_get_config();
  $apim_session = &_ibm_apim_get_apim_session();

  // Clear out our internal caches
  $apim_session = &_ibm_apim_get_apim_session();
  unset($apim_session['apis_documents']);
  unset($apim_session['apis']);
  unset($apim_session['api_list']);
  unset($apim_session['plans']);
  unset($apim_session['plan_list']);

  // app cacheing not implemented yet
  // unset($apim_session['apps'])
  // unset($apim_session['app_list']);

  watchdog('ibm_apim_authenticate', 'cleared local session caches', NULL, WATCHDOG_NOTICE);

  $host_pieces = _ibm_apim_parse_apim_host();
  $url = $host_pieces['url'] . '/v1/portal/me';
  $headers = array(
    'Content-Type: application/json',
    'Accept: application/json',
    "X-IBM-APIManagement-Context: " . $apim_session['org'] . '.' . $apim_session['env'],
    'Authorization: Basic ' . base64_encode($name . ':' . $pass));

  $result = _ibm_apim_json_http_request($url, 'GET', $headers);

  // Must get the session again now as it may have changed when we logged in
  $apim_session = &_ibm_apim_get_apim_session();
  watchdog('ibm_apim_authenticate', '%user login return code %data', array(
    '%data' => $result->code,
    '%user' => $name), WATCHDOG_NOTICE);
  if (isset($result) && ($result->code == 200) && $result->data != '') {
    $apim_session['auth'] = base64_encode($name . ':' . $pass);
    if (isset($result->data['id'])) {
      $apim_session['memberid'] = $result->data['id'];
    }
    return $result->data;
  }
  return null;
}

/**
 * Implementation of hook_form().
 * Create a new developer org.
 */
function ibm_apim_create_developer_org_form($form, &$form_state) {
  $form = array();
  $form['orgname'] = array(
    '#type' => 'textfield',
    '#title' => 'Organization name',
    '#size' => 25,
    '#maxlength' => 50,
    '#required' => TRUE);
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  $form['#submit'] = array('ibm_apim_create_developer_org_form_submit_handler');
  $form['#attributes']['class'] = 'reg-form';
  return $form;
}

/**
 * Submit handler for the create developer org form.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 */
function ibm_apim_create_developer_org_form_submit_handler($form, &$form_state) {
  $orgname = $form_state['values']['orgname'];

  // update APIm
  $url = '/v1/portal/orgs';
  $data = array("name" => $orgname);
  $result = ibm_apim_post($url, json_encode($data));
  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    drupal_set_message(t('Developer organization created successfully.'));
    $apim_session = &_ibm_apim_get_apim_session();
    unset($apim_session['developer_organizations']);
    // clear block cache
    cache_clear_all(NULL, 'cache_block');
    _ibm_apim_load_developer_orgs();
    $form_state['redirect'] = '<front>';
  }
  else {
    drupal_set_message(t('Failed to create developer organization.'), 'error');
    watchdog('ibm_apim_create_developer_org_form_submit_handler', 'Failed to create developer organization. response: %response', array(
      '%response' => serialize($result)), WATCHDOG_NOTICE);
    user_logout();
    $form_state['redirect'] = '<front>';
  }
}

/**
 * Implementation of hook_form().
 * The module devel admin configuration settings.
 */
function ibm_apim_devel_config_form($form, &$form_state) {
  $form = array();

  $form['ibm_apim_insecure'] = array(
    '#type' => 'checkbox',
    '#title' => t('Accept Self-Signed SSL Certificates (Developer Mode)'),
    '#default_value' => variable_get('ibm_apim_insecure', FALSE),
    '#weight' => -4,
    '#description' => t('WARNING: This should only be used for testing and development purposes as it leaves you vulnerable to a man-in-the-middle attack. Check this if the API Manager uses a self-signed SSL certificate.'));

  // Make it a settings form.
  $form = system_settings_form($form);

  return $form;
}

/**
 * Implementation of hook_form().
 * The module admin configuration settings.
 */
function ibm_apim_config_form($form, &$form_state) {
  $readonly = variable_get('ibm_apim_readonly_idp', 0);
  global $base_url;
  $form = array();
  $form['ibm_apim_host'] = array(
    '#type' => 'textfield',
    '#title' => t('IBM API Management Hostname'),
    '#description' => t('To configure this Developer Portal to work with the API Manager host you must also go to /apimanager on the API Manager host, select the environment for this Developer Portal and ensure that the "Custom Developer Portal URL" is set to: @baseurl', array(
      '@baseurl' => $base_url)),
    '#required' => TRUE,
    '#weight' => -20,
    '#default_value' => variable_get('ibm_apim_host'));

  $form['ibm_apim_autocreate_apiforum'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically create a forum per API'),
    '#default_value' => variable_get('ibm_apim_autocreate_apiforum', TRUE),
    '#weight' => -15,
    '#description' => t('If checked then a new forum will be created for each API that is available to a developer. Note that the forums will only be created when a developer first sees the APIs listed in the Developer Portal.'));

  $form['ibm_apim_show_placeholder_images'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show placeholder images for Apps and APIs'),
    '#default_value' => variable_get('ibm_apim_show_placeholder_images', 1),
    '#weight' => -14,
    '#description' => t('If checked then a placeholder image will be shown for the Applications and APIs that do not have one explicitly set. Uncheck to not show an image at all.'));

  $form['ibm_apim_show_register_app'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show links to register applications'),
    '#default_value' => variable_get('ibm_apim_show_register_app', 1),
    '#weight' => -13,
    '#description' => t('If unchecked then all links to register new applications will be hidden. Applications will have to be registered externally to this portal.'));

  $form['ibm_apim_show_versions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show version numbers for APIs and Plans'),
    '#default_value' => variable_get('ibm_apim_show_versions', 1),
    '#weight' => -12,
    '#description' => t('If unchecked then version numbers will not be displayed for APIs or Plans.'));

  $form['ibm_apim_enable_api_test'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow live testing of APIs'),
    '#default_value' => variable_get('ibm_apim_enable_api_test', 1),
    '#weight' => -11,
    '#description' => t('If unchecked then interactive testing of APIs will be disabled.'));

  $form['ibm_apim_autotag_with_phase'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically tag APIs with their phase'),
    '#default_value' => variable_get('ibm_apim_autotag_with_phase', 1),
    '#weight' => -10,
    '#description' => t('If checked then APIs will be automatically tagged with their "Phase".'));

  $form['ibm_apim_show_cors_warnings'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display CORS warnings for unenforced APIs'),
    '#default_value' => variable_get('ibm_apim_show_cors_warnings', 1),
    '#weight' => -10,
    '#description' => t('If checked then unenforced APIs will have a warning about needing to check CORS (Cross-Origin Response Sharing) has been implemented. Uncheck to suppress the warnings.'));
  // analytics options
  $form['analytics'] = array(
    '#type' => 'fieldset',
    '#title' => t('Analytics'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE);
  $form['analytics']['ibm_apim_analytics_successrate'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show success rate analytics graph'),
    '#default_value' => variable_get('ibm_apim_analytics_successrate', 1),
    '#weight' => -10,
    '#description' => t('If checked then the API invocation success rate graph and data will be made available.'));
  $form['analytics']['ibm_apim_analytics_latencies'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show latencies analytics graph'),
    '#default_value' => variable_get('ibm_apim_analytics_latencies', 1),
    '#weight' => -10,
    '#description' => t('If checked then the API invocation latency graph and data will be made available.'));
  $form['analytics']['ibm_apim_analytics_datausage'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show data usage analytics graph'),
    '#default_value' => variable_get('ibm_apim_analytics_datausage', 1),
    '#weight' => -10,
    '#description' => t('If checked then the API invocation data usage graph and data will be made available.'));

  // user registration options
  $form['userreg'] = array(
    '#type' => 'fieldset',
    '#title' => t('User Registration'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE);
  $form['userreg']['intro'] = array(
    '#markup' => '<p>' . t('The settings below allow you to customize what fields are shown during user registration.') . '</p>');

  $form['userreg']['fielddiv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('fieldDiv')));
  $form['userreg']['reqddiv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('requiredDiv')));
  if ($readonly != 1) {

    $form['userreg']['fielddiv']['emaildiv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('showFieldDiv')));
    $form['userreg']['fielddiv']['emaildiv']['ibm_apim_email_show'] = array(
      '#type' => 'checkbox',
      '#title' => t('Email'),
      '#default_value' => variable_get('ibm_apim_email_show', 1),
      '#weight' => -3);
    $form['userreg']['reqddiv']['emaildiv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('requiredFieldDiv')));
    $form['userreg']['reqddiv']['emaildiv']['ibm_apim_email_reqd'] = array(
      '#type' => 'checkbox',
      '#title' => t('Required'),
      '#default_value' => variable_get('ibm_apim_email_reqd', 1),
      '#states' => array(
        'visible' => array(
          ':input[name="ibm_apim_email_show"]' => array('checked' => TRUE))),
      '#attributes' => array('class' => array('requiredCheckbox')));
    $form['userreg']['reqddiv']['emaildiv']['ibm_apim_email_as_username'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use Email as username'),
      '#default_value' => variable_get('ibm_apim_email_as_username', 1),
      '#states' => array(
        'visible' => array(
          ':input[name="ibm_apim_email_show"]' => array('checked' => TRUE))),
      '#attributes' => array('class' => array('requiredCheckbox')));
    $form['userreg']['reqddiv']['emaildiv']['spacer'] = array(
      '#markup' => '<div class="spacerDiv">&nbsp;</div>');
  }

  // if using email as the username then disable the username field,
  // if registry is readonly then force field to be on but disabled
  $current_email_as_user = variable_get('ibm_apim_email_as_username');
  if ($readonly == 1) {
    $user_defvalue = 1;
    $user_reqdvalue = 1;
    $user_disabled = TRUE;
  }
  elseif ($current_email_as_user == 1) {
    $user_defvalue = 0;
    $user_reqdvalue = 0;
    $user_disabled = TRUE;
  }
  else {
    $user_defvalue = 1;
    $user_reqdvalue = 1;
    $user_disabled = FALSE;
  }
  $form['userreg']['fielddiv']['usernamediv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('showFieldDiv')));
  $form['userreg']['fielddiv']['usernamediv']['ibm_apim_username_show'] = array(
    '#type' => 'checkbox',
    '#title' => t('Username'),
    '#default_value' => $user_defvalue,
    '#disabled' => $user_disabled,
    '#weight' => -3);
  $form['userreg']['reqddiv']['usernamediv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('requiredFieldDiv')));
  $form['userreg']['reqddiv']['usernamediv']['ibm_apim_username_reqd'] = array(
    '#type' => 'checkbox',
    '#title' => t('Required'),
    '#default_value' => $user_reqdvalue,
    '#disabled' => $user_disabled,
    '#attributes' => array('class' => array('requiredCheckbox')));
  $form['userreg']['reqddiv']['usernamediv']['spacer'] = array(
    '#markup' => '<div class="spacerDiv">&nbsp;</div>');

  $form['userreg']['fielddiv']['passworddiv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('showFieldDiv')));
  $form['userreg']['fielddiv']['passworddiv']['ibm_apim_password_show'] = array(
    '#type' => 'checkbox',
    '#title' => t('Password and Confirm password'),
    '#default_value' => 1,
    '#disabled' => TRUE,
    '#weight' => -3);
  $form['userreg']['reqddiv']['passworddiv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('requiredFieldDiv')));
  $form['userreg']['reqddiv']['passworddiv']['ibm_apim_password_reqd'] = array(
    '#type' => 'checkbox',
    '#title' => t('Required'),
    '#default_value' => 1,
    '#disabled' => TRUE,
    '#attributes' => array('class' => array('requiredCheckbox')));
  $form['userreg']['reqddiv']['passworddiv']['spacer'] = array(
    '#markup' => '<div class="spacerDiv">&nbsp;</div>');

  $form['userreg']['fielddiv']['orgdiv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('showFieldDiv')));
  $form['userreg']['fielddiv']['orgdiv']['ibm_apim_organization_show'] = array(
    '#type' => 'checkbox',
    '#title' => t('Developer organization'),
    '#default_value' => variable_get('ibm_apim_organization_show', 1),
    '#weight' => -3);
  $form['userreg']['reqddiv']['orgdiv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('requiredFieldDiv')));
  $form['userreg']['reqddiv']['orgdiv']['ibm_apim_organization_reqd'] = array(
    '#type' => 'checkbox',
    '#title' => t('Required'),
    '#default_value' => variable_get('ibm_apim_organization_reqd', 1),
    '#states' => array(
      'visible' => array(
        ':input[name="ibm_apim_organization_show"]' => array('checked' => TRUE))),
    '#attributes' => array('class' => array('requiredCheckbox')));
  $form['userreg']['reqddiv']['orgdiv']['spacer'] = array(
    '#markup' => '<div class="spacerDiv">&nbsp;</div>');

  if ($readonly != 1) {
    $form['userreg']['fielddiv']['firstnamediv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('showFieldDiv')));
    $form['userreg']['fielddiv']['firstnamediv']['ibm_apim_firstname_show'] = array(
      '#type' => 'checkbox',
      '#title' => t('First name'),
      '#default_value' => variable_get('ibm_apim_firstname_show', 1),
      '#weight' => -3);
    $form['userreg']['reqddiv']['firstnamediv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('requiredFieldDiv')));
    $form['userreg']['reqddiv']['firstnamediv']['ibm_apim_firstname_reqd'] = array(
      '#type' => 'checkbox',
      '#title' => t('Required'),
      '#default_value' => variable_get('ibm_apim_firstname_reqd', 1),
      '#states' => array(
        'visible' => array(
          ':input[name="ibm_apim_firstname_show"]' => array('checked' => TRUE))),
      '#attributes' => array('class' => array('requiredCheckbox')));
    $form['userreg']['reqddiv']['firstnamediv']['spacer'] = array(
      '#markup' => '<div class="spacerDiv">&nbsp;</div>');

    $form['userreg']['fielddiv']['lastnamediv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('showFieldDiv')));
    $form['userreg']['fielddiv']['lastnamediv']['ibm_apim_lastname_show'] = array(
      '#type' => 'checkbox',
      '#title' => t('Last name'),
      '#default_value' => variable_get('ibm_apim_lastname_show', 1),
      '#weight' => -3);
    $form['userreg']['reqddiv']['lastnamediv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('requiredFieldDiv')));
    $form['userreg']['reqddiv']['lastnamediv']['ibm_apim_lastname_reqd'] = array(
      '#type' => 'checkbox',
      '#title' => t('Required'),
      '#default_value' => variable_get('ibm_apim_lastname_reqd', 1),
      '#states' => array(
        'visible' => array(
          ':input[name="ibm_apim_lastname_show"]' => array('checked' => TRUE))),
      '#attributes' => array('class' => array('requiredCheckbox')));
    $form['userreg']['reqddiv']['lastnamediv']['spacer'] = array(
      '#markup' => '<div class="spacerDiv">&nbsp;</div>');
  }

  if ($readonly != 1) {
    $form['userreg']['fielddiv']['companydiv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('showFieldDiv')));
    $form['userreg']['fielddiv']['companydiv']['ibm_apim_company_show'] = array(
      '#type' => 'checkbox',
      '#title' => t('Company Name'),
      '#default_value' => variable_get('ibm_apim_company_show', 1),
      '#weight' => -3);
    $form['userreg']['reqddiv']['companydiv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('requiredFieldDiv')));
    $form['userreg']['reqddiv']['companydiv']['ibm_apim_company_reqd'] = array(
      '#type' => 'checkbox',
      '#title' => t('Required'),
      '#default_value' => variable_get('ibm_apim_company_reqd', 1),
      '#states' => array(
        'visible' => array(
          ':input[name="ibm_apim_company_show"]' => array('checked' => TRUE))),
      '#attributes' => array('class' => array('requiredCheckbox')));
    $form['userreg']['reqddiv']['companydiv']['spacer'] = array(
      '#markup' => '<div class="spacerDiv">&nbsp;</div>');

    $form['userreg']['fielddiv']['phonediv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('showFieldDiv')));
    $form['userreg']['fielddiv']['phonediv']['ibm_apim_phone_show'] = array(
      '#type' => 'checkbox',
      '#title' => t('Phone number'),
      '#default_value' => variable_get('ibm_apim_phone_show', 1),
      '#weight' => -3);
    $form['userreg']['reqddiv']['phonediv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('requiredFieldDiv')));
    $form['userreg']['reqddiv']['phonediv']['ibm_apim_phone_reqd'] = array(
      '#type' => 'checkbox',
      '#title' => t('Required'),
      '#default_value' => variable_get('ibm_apim_phone_reqd', 1),
      '#states' => array(
        'visible' => array(
          ':input[name="ibm_apim_phone_show"]' => array('checked' => TRUE))),
      '#attributes' => array('class' => array('requiredCheckbox')));
    $form['userreg']['reqddiv']['phonediv']['spacer'] = array(
      '#markup' => '<div class="spacerDiv">&nbsp;</div>');

    $form['userreg']['fielddiv']['addressdiv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('showFieldDiv')));
    $form['userreg']['fielddiv']['addressdiv']['ibm_apim_address_show'] = array(
      '#type' => 'checkbox',
      '#title' => t('Address'),
      '#default_value' => variable_get('ibm_apim_address_show', 1),
      '#weight' => -3);
    $form['userreg']['reqddiv']['addressdiv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('requiredFieldDiv')));
    $form['userreg']['reqddiv']['addressdiv']['ibm_apim_address_reqd'] = array(
      '#type' => 'checkbox',
      '#title' => t('Required'),
      '#default_value' => variable_get('ibm_apim_address_reqd', 1),
      '#states' => array(
        'visible' => array(
          ':input[name="ibm_apim_address_show"]' => array('checked' => TRUE))),
      '#attributes' => array('class' => array('requiredCheckbox')));
    $form['userreg']['reqddiv']['addressdiv']['spacer'] = array(
      '#markup' => '<div class="spacerDiv">&nbsp;</div>');
  }

  if (module_exists('legal')) {
    $form['userreg']['tsandcs'] = array(
      '#markup' => '<p>' . t('To configure the display of terms and conditions during user registration <a href="@url">click here</a>.', array(
        '@url' => url('admin/config/people/legal'))) . '</p>');
  }
  if (module_exists('captcha')) {
    $form['userreg']['captcha'] = array(
      '#markup' => '<p>' . t('To configure the use of CAPTCHAs during user login or registration <a href="@url">click here</a>.', array(
        '@url' => url('admin/config/people/captcha'))) . '</p>');
  }

  $form['#attached']['js'][] = array(
    'data' => 'jQuery(document).ready(function(){
                    jQuery("#edit-ibm-apim-email-as-username").click(toggleemailasuer);
                    function toggleemailasuer() {
                       if(this.checked) {
                         jQuery("#edit-ibm-apim-username-show").prop("checked", false);
                         jQuery("#edit-ibm-apim-username-reqd").prop("checked", false);
                         jQuery("#edit-ibm-apim-username-show").attr("disabled", true);
                         jQuery("#edit-ibm-apim-username-reqd").attr("disabled", true);
                       } else {
                         jQuery("#edit-ibm-apim-username-show").prop("checked", true);
                         jQuery("#edit-ibm-apim-username-reqd").prop("checked", true);
                         jQuery("#edit-ibm-apim-username-show").removeAttr("disabled");
                         jQuery("#edit-ibm-apim-username-reqd").removeAttr("disabled");
                       }
                    }
                    jQuery("#edit-ibm-apim-email-show").click(toggleemail);
                    function toggleemail() {
                       if(!this.checked) {
                         jQuery("#edit-ibm-apim-email-as-username").prop("checked", false);
                         jQuery(".form-item-ibm-apim-email-as-username").hide();
                         jQuery("#edit-ibm-apim-username-show").prop("checked", true);
                         jQuery(".form-item-ibm-apim-username-reqd").show();
                         jQuery("#edit-ibm-apim-username-reqd").prop("checked", true);
                       }
                    }
                    jQuery("#edit-ibm-apim-username-show").click(toggleuser);
                    function toggleuser() {
                       if(!this.checked) {
                         jQuery("#edit-ibm-apim-email-show").prop("checked", true);
                         jQuery(".form-item-ibm-apim-email-reqd").show();
                         jQuery("#edit-ibm-apim-email-reqd").prop("checked", true);
                         jQuery("#edit-ibm-apim-email-as-username").prop("checked", true);
                         jQuery(".form-item-ibm-apim-email-as-username").show();
                       }
                    }
        });',
    'type' => 'inline');

  // Make it a settings form.
  $form = system_settings_form($form);
  // But also do some custom submission handling.
  $form['#submit'][] = 'ibm_apim_config_form_submit';

  return $form;
}

/**
 * Submission handler for the config settings form.
 */
function ibm_apim_config_form_submit($form, &$form_state) {
  // have to set these ourselves as the JS in the form seems to mess up the ['values'] array
  // so the variables arent set automagically by drupal
  if (isset($form_state['input']['ibm_apim_username_show'])) {
    variable_set('ibm_apim_username_show', $form_state['input']['ibm_apim_username_show']);
  }
  if (isset($form_state['input']['ibm_apim_email_show'])) {
    variable_set('ibm_apim_email_show', $form_state['input']['ibm_apim_email_show']);
  }
  if (isset($form_state['input']['ibm_apim_username_reqd'])) {
    variable_set('ibm_apim_username_reqd', $form_state['input']['ibm_apim_username_reqd']);
  }
  if (isset($form_state['input']['ibm_apim_email_reqd'])) {
    variable_set('ibm_apim_email_reqd', $form_state['input']['ibm_apim_email_reqd']);
  }
  if (isset($form_state['input']['ibm_apim_email_as_username'])) {
    variable_set('ibm_apim_email_as_username', $form_state['input']['ibm_apim_email_as_username']);
  }

  $ibm_apim_first_name_show = variable_get('ibm_apim_firstname_show', 1);
  $ibm_apim_last_name_show = variable_get('ibm_apim_lastname_show', 1);
  $ibm_apim_phone_show = variable_get('ibm_apim_phone_show', 0);
  $ibm_apim_company_show = variable_get('ibm_apim_company_show', 0);
  $ibm_apim_developer_organization_show = variable_get('ibm_apim_organization_show', 1);
  $ibm_apim_address_show = variable_get('ibm_apim_address_show', 0);

  $ibm_apim_first_name_reqd = variable_get('ibm_apim_firstname_reqd', 1);
  $ibm_apim_last_name_reqd = variable_get('ibm_apim_lastname_reqd', 1);
  $ibm_apim_phone_reqd = variable_get('ibm_apim_phone_reqd', 0);
  $ibm_apim_company_reqd = variable_get('ibm_apim_company_reqd', 0);
  $ibm_apim_developer_organization_reqd = variable_get('ibm_apim_organization_reqd', 1);
  $ibm_apim_address_reqd = variable_get('ibm_apim_address_reqd', 0);

  if ($ibm_apim_first_name_show == 1) {
    _ibm_apim_show_first_name_field();
  }
  else {
    _ibm_apim_hide_first_name_field();
    variable_set('ibm_apim_firstname_reqd', 0);
  }
  if ($ibm_apim_last_name_show == 1) {
    _ibm_apim_show_last_name_field();
  }
  else {
    _ibm_apim_hide_last_name_field();
    variable_set('ibm_apim_lastname_reqd', 0);
  }
  if ($ibm_apim_developer_organization_show == 1) {
    _ibm_apim_show_developer_organization_field();
  }
  else {
    _ibm_apim_hide_developer_organization_field();
    variable_set('ibm_apim_organization_reqd', 0);
  }
  if ($ibm_apim_phone_show == 1) {
    _ibm_apim_show_phone_field();
  }
  else {
    _ibm_apim_hide_phone_field();
    variable_set('ibm_apim_phone_reqd', 0);
  }
  if ($ibm_apim_company_show == 1) {
    _ibm_apim_show_company_field();
  }
  else {
    _ibm_apim_hide_company_field();
    variable_set('ibm_apim_company_reqd', 0);
  }
  if ($ibm_apim_address_show == 1) {
    _ibm_apim_show_address_field();
  }
  else {
    _ibm_apim_hide_address_field();
    variable_set('ibm_apim_address_reqd', 0);
  }

  // toggle whether required or not
  _ibm_apim_toggle_field_required("field_first_name", $ibm_apim_first_name_reqd);
  _ibm_apim_toggle_field_required("field_last_name", $ibm_apim_last_name_reqd);
  _ibm_apim_toggle_field_required("field_developer_organization", $ibm_apim_developer_organization_reqd);
  _ibm_apim_toggle_field_required("field_phone", $ibm_apim_phone_reqd);
  _ibm_apim_toggle_field_required("field_company", $ibm_apim_company_reqd);
  _ibm_apim_toggle_field_required("field_address", $ibm_apim_address_reqd);
}

// hide all fields other than username and password for readonly registries
function _ibm_apim_hide_extra_userfields() {
  variable_set('ibm_apim_firstname_show', 0);
  variable_set('ibm_apim_lastname_show', 0);
  variable_set('ibm_apim_phone_show', 0);
  variable_set('ibm_apim_company_show', 0);
  variable_set('ibm_apim_address_show', 0);
  variable_set('ibm_apim_firstname_reqd', 0);
  variable_set('ibm_apim_lastname_reqd', 0);
  variable_set('ibm_apim_phone_reqd', 0);
  variable_set('ibm_apim_company_reqd', 0);
  variable_set('ibm_apim_address_reqd', 0);
  variable_set('ibm_apim_email_as_username', 0);
  _ibm_apim_hide_first_name_field();
  _ibm_apim_hide_last_name_field();
  _ibm_apim_hide_company_field();
  _ibm_apim_hide_address_field();
  _ibm_apim_hide_phone_field();
  _ibm_apim_toggle_field_required("field_first_name", 0);
  _ibm_apim_toggle_field_required("field_last_name", 0);
  _ibm_apim_toggle_field_required("field_phone", 0);
  _ibm_apim_toggle_field_required("field_company", 0);
  _ibm_apim_toggle_field_required("field_address", 0);

  // shouldnt need to set these but just in case:
  variable_set('ibm_apim_username_show', 1);
  variable_set('ibm_apim_username_reqd', 1);
  variable_set('ibm_apim_email_show', 0);
  variable_set('ibm_apim_email_reqd', 0);
  variable_set('ibm_apim_password_show', 1);
  variable_set('ibm_apim_password_reqd', 1);
}

// reverse of the hide method above
// unlikely to ever get run since only for when switch from readonly IDP to a writable one
// which isn't hugely likely, but for completeness....
function _ibm_apim_show_default_extra_userfields() {
  variable_set('ibm_apim_firstname_show', 1);
  variable_set('ibm_apim_lastname_show', 1);
  variable_set('ibm_apim_phone_show', 0);
  variable_set('ibm_apim_company_show', 0);
  variable_set('ibm_apim_address_show', 0);
  variable_set('ibm_apim_firstname_reqd', 1);
  variable_set('ibm_apim_lastname_reqd', 1);
  variable_set('ibm_apim_phone_reqd', 0);
  variable_set('ibm_apim_company_reqd', 0);
  variable_set('ibm_apim_address_reqd', 0);
  variable_set('ibm_apim_email_as_username', 1);
  _ibm_apim_show_first_name_field();
  _ibm_apim_show_last_name_field();
  _ibm_apim_hide_company_field();
  _ibm_apim_hide_address_field();
  _ibm_apim_hide_phone_field();
  _ibm_apim_toggle_field_required("field_first_name", 1);
  _ibm_apim_toggle_field_required("field_last_name", 1);
  _ibm_apim_toggle_field_required("field_phone", 0);
  _ibm_apim_toggle_field_required("field_company", 0);
  _ibm_apim_toggle_field_required("field_address", 0);

  // shouldnt need to set these but just in case:
  variable_set('ibm_apim_username_show', 0);
  variable_set('ibm_apim_username_reqd', 0);
  variable_set('ibm_apim_email_show', 1);
  variable_set('ibm_apim_email_reqd', 1);
  variable_set('ibm_apim_password_show', 1);
  variable_set('ibm_apim_password_reqd', 1);
}

/**
 * Implementation of hook_init().
 */
function ibm_apim_init() {
  // not during install
  if (variable_get('install_task') != 'done') {
    return;
  }
  else {
    drupal_add_css(drupal_get_path('module', 'ibm_apim') . '/css/ibm_apim.css');
    // get the APIM config on init so we correctly enable/disable registration etc.
    $host_pieces = _ibm_apim_parse_apim_host();
    if (isset($host_pieces) && isset($host_pieces['host']) && drupal_valid_http_host($host_pieces['host'])) {
      // in try catch so that any issues in init dont prevent the site loading
      try {
        _ibm_apim_check_and_get_config();
      }
      catch (Exception $e) {
        watchdog('ibm_apim_init', 'Caught exception: %message', array(
          '%message' => $e->getMessage()), WATCHDOG_NOTICE);
      }
    }
  }
}

/**
 * Setup our session storage.
 */
function &_ibm_apim_get_apim_session() {
  $retSession = NULL;

  // We need $_SESSION to always exist even when the user
  // has not logged in yet
  if (!isset($_SESSION)) {
    $_SESSION = array();
  }

  // Ensure we have our storage area in the session
  if (!isset($_SESSION['ibm_apim'])) {
    $_SESSION['ibm_apim'] = array();
  }

  $retSession = &$_SESSION['ibm_apim'];

  return $retSession;
}

/**
 * Get basic APIM config and store it in the session.
 */
function _ibm_apim_check_and_get_config() {
  // skip during install
  if (variable_get('install_task') != 'done') {
    return;
  }

  // Ensure that we have a session variable as we require the _SESSION varaible
  // so that we can store a few essential variables
  $apim_session = &_ibm_apim_get_apim_session();

  if (!isset($apim_session['config_done'])) {
    $config_data = _ibm_apim_get_apim_config();

    if (isset($config_data)) {
      $apim_session['config_done'] = 'true';
      $apim_session['gatewayURL'] = check_plain($config_data['gatewayURL']);
      $apim_session['portalURL'] = check_plain($config_data['portalURL']);
      $apim_session['customGatewayURL'] = check_plain($config_data['customGatewayURL']);
      $apim_session['customPortalURL'] = check_plain($config_data['customPortalURL']);
      $apim_session['env'] = check_plain($config_data['envName']);
      $apim_session['org'] = check_plain($config_data['orgName']);
      $apim_session['apis'] = array();
      $apim_session['plans'] = array();
      $apim_session['apps'] = array();
      // if selfSignUpEnabled is disabled then disable user registration
      if (isset($config_data['selfSignUpEnabled']) && $config_data['selfSignUpEnabled'] == false) {
        variable_set('user_register', 0);
        variable_set('ibm_apim_selfSignUpEnabled', 0);
        // hide create new org link too
        $mlid = db_query("SELECT mlid FROM {menu_links} WHERE link_path=:link_path AND menu_name=:menu_name", array(
          ':link_path' => 'ibm_apim/org/create',
          ':menu_name' => 'user-menu'))->fetchField();
        $link = menu_link_load($mlid);
        // Alter "hidden" value.
        $link['hidden'] = 1;
        $link['customized'] = 1;
        menu_link_save($link);
      }
      else {
        variable_set('user_register', 1);
        $current_selfsignup = variable_get('ibm_apim_selfSignUpEnabled');
        variable_set('ibm_apim_selfSignUpEnabled', 1);
        // show create new org link if onboarding just enabled
        // this protects against people who have intentionally turned it off and want it to stay that way
        if (isset($current_selfsignup) && $current_selfsignup == 0) {
          $mlid = db_query("SELECT mlid FROM {menu_links} WHERE link_path=:link_path AND menu_name=:menu_name", array(
            ':link_path' => 'ibm_apim/org/create',
            ':menu_name' => 'user-menu'))->fetchField();
          $link = menu_link_load($mlid);
          // Alter "hidden" value.
          $link['hidden'] = 0;
          $link['customized'] = 1;
          menu_link_save($link);
        }
      }
      // if invitationEnabled is disabled then disable developer invitations
      if (isset($config_data['invitationEnabled']) && $config_data['invitationEnabled'] == false) {
        variable_set('ibm_apim_disallow_invitations', 1);
      }
      else {
        variable_set('ibm_apim_disallow_invitations', 0);
      }

      // get current saml variable to see if its changed
      $prev_saml_idp = variable_get('ibm_apim_saml_idp', 0);
      // IBM ID / SAML
      if (isset($config_data['userRegistry']) && isset($config_data['userRegistry']['type']) && $config_data['userRegistry']['type'] == "saml") {
        variable_set('ibm_apim_saml_idp', 1);
        if (!isset($prev_saml_idp) || (isset($prev_saml_idp) && $prev_saml_idp == 0)) {
          // Change Login link
          $mlid = db_query("SELECT mlid FROM {menu_links} WHERE link_path=:link_path", array(
            ':link_path' => 'user/login'))->fetchField();
          $link = menu_link_load($mlid);

          $link['link_path'] = 'ibm_apim/saml/login';
          $link['customized'] = 1;
          menu_link_save($link);
          if (module_exists('menu_item_visibility')) {
            $query = db_insert('menu_links_visibility_role');
            $query->fields(array('mlid', 'rid'));
            $query->values(array('mlid' => $mlid, 'rid' => 1));
            $query->execute();
          }
          $item = array(
            'link_title' => 'Admin Login',
            'link_path' => 'user/login',
            'menu_name' => 'login-menu',
            'language' => 'en',
            'customized' => 1,
            'weight' => 2);
          menu_link_save($item);

          // change autologout redirection
          variable_set('autologout_redirect_url', '<front>');

          // disable TFA modules
          module_disable(array('tfa'), TRUE);
          menu_cache_clear_all();
        }
      }
      else {
        if (isset($prev_saml_idp) && $prev_saml_idp == 1) {
          // change login link back to normal
          $mlid = db_query("SELECT mlid FROM {menu_links} WHERE link_path=:link_path", array(
            ':link_path' => 'ibm_apim/saml/login'))->fetchField();
          $link = menu_link_load($mlid);
          $link['link_path'] = 'user/login';
          $link['router_path'] = 'user/login';
          $link['customized'] = 0;
          menu_link_save($link);

          if (module_exists('menu_item_visibility')) {
            db_delete('menu_links_visibility_role')->condition('mlid', $mlid)->execute();
          }

          // remove admin login link
          $admmlid = db_query("SELECT mlid FROM {menu_links} WHERE link_title=:link_title AND menu_name=:menu_name", array(
            ':link_title' => 'Admin Login',
            ':menu_name' => 'login-menu'))->fetchField();
          menu_link_delete($admmlid);

          // change autologout redirection
          variable_set('autologout_redirect_url', 'user/login');
          menu_cache_clear_all();
        }
      }

      // if not writable then disable editing user form
      if (isset($config_data['userRegistry']) && isset($config_data['userRegistry']['writable']) && $config_data['userRegistry']['writable'] == false) {
        // if IDP type has changed then flush all caches
        $current_ro_idp = variable_get('ibm_apim_readonly_idp');
        if ($current_ro_idp != 1) {
          drupal_flush_all_caches();
        }
        variable_set('ibm_apim_readonly_idp', 1);
        // set all fields other than username and password to not be visible on registration form
        _ibm_apim_hide_extra_userfields();
      }
      else {
        // check if we previously had readonly registry set, if so enable default fields and turn it off
        $current_ro_idp = variable_get('ibm_apim_readonly_idp');
        if ($current_ro_idp != 0) {
          // if IDP type has changed then flush all caches
          drupal_flush_all_caches();
          variable_set('ibm_apim_readonly_idp', 0);
          _ibm_apim_show_default_extra_userfields();
        }
      }
      if (isset($config_data['userRegistry']) && isset($config_data['userRegistry']['usernameIsAlwaysEmail']) && $config_data['userRegistry']['usernameIsAlwaysEmail'] == false) {
        variable_set('ibm_apim_email_as_username', 0);
        variable_set('ibm_apim_username_show', 1);
        variable_set('ibm_apim_username_reqd', 1);
        variable_set('ibm_apim_email_show', 1);
        variable_set('ibm_apim_email_reqd', 1);
      }
      else {
        variable_set('ibm_apim_email_as_username', 1);
      }
      if (isset($config_data['userRegistry']) && isset($config_data['userRegistry']['inviteViaEmailOnly']) && $config_data['userRegistry']['inviteViaEmailOnly'] == true) {
        variable_set('ibm_apim_inviteViaEmailOnly', 1);
      }
      else {
        variable_set('ibm_apim_inviteViaEmailOnly', 0);
      }
      if (isset($config_data['userRegistry']) && isset($config_data['userRegistry']['displayName']) && !empty($config_data['userRegistry']['displayName'])) {
        variable_set('ibm_apim_idp_displayname', $config_data['userRegistry']['displayName']);
      }
    }
    else {
      // Clear any other messages as until this problem is fixed they will just muddy the water
      drupal_get_messages();

      // Throw an exception with a useful message so that we stop processing the request here
      global $base_url;
      throw new Exception(t('Could not retrieve portal configuration. Please ensure the Custom Developer Portal URL is set to "@baseurl" in the API Manager.', array(
        '@baseurl' => $base_url)));
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function ibm_apim_menu() {
  $items = array();
  $items['admin/config/system/ibm_apim'] = array(
    'title' => 'IBM API Management',
    'description' => 'Configuration for the IBM API Management module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ibm_apim_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM);
  $items['admin/config/development/ibm_apim'] = array(
    'title' => 'IBM Development',
    'description' => 'Development configuration for the IBM API Management module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ibm_apim_devel_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM);
  $items['ibm_apim/swaggerjson/%/%/%'] = array(
    'title' => 'Swagger UI JSON',
    'page callback' => '_ibm_apim_swaggerjson_callback',
    'page arguments' => array(2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK);
  $items['ibm_apim/notifications'] = array(
    'title' => 'Notifications',
    'page callback' => '_ibm_apim_notifications_callback',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/org/%'] = array(
    'title' => 'Developer Organization Selection',
    'page callback' => 'ibm_apim_developer_org_callback',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK);
  $items['ibm_apim/org/create'] = array(
    'title' => 'Create organization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ibm_apim_create_developer_org_form'),
    'access callback' => 'user_is_logged_in',
    'menu_name' => 'user-menu',
    'weight' => 9);
  $items['ibm_apim/ibmid/%'] = array(
    'title' => 'IBM ID Activation',
    'page callback' => 'ibm_apim_saml_callback',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK);
  $items['ibm_apim/activate/%'] = array(
    'title' => 'User ID Activation',
    'page callback' => 'ibm_apim_activate_id_callback',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK);
  $items['ibm_apim/forgotpwd/%'] = array(
    'title' => 'User ID Password reset',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ibm_apim_forgotpwd_form', 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK);
  $items['ibm_apim/analytics/org/datausage'] = array(
    'title' => 'Organization Data Usage Analytics',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_org_datausage',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/analytics/org/latency'] = array(
    'title' => 'Organization Latency Analytics',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_org_latency',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/analytics/org/successrate'] = array(
    'title' => 'Organization Success Rate Analytics',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_org_successrate',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/analytics/app/datausage/%'] = array(
    'title' => 'Application Data Usage Analytics',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_app_datausage',
    'page arguments' => array(4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/analytics/app/latency/%'] = array(
    'title' => 'Application Latency Analytics',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_app_latency',
    'page arguments' => array(4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/analytics/app/successrate/%'] = array(
    'title' => 'Application Success Rate Analytics',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_app_successrate',
    'page arguments' => array(4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/analytics/datausage/%/%/%/%'] = array(
    'title' => 'Operation Data Usage Analytics',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_op_datausage',
    'page arguments' => array(3, 4, 5, 6),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/analytics/latency/%/%/%/%'] = array(
    'title' => 'Operation Latency Analytics',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_op_latency',
    'page arguments' => array(3, 4, 5, 6),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/analytics/successrate/%/%/%/%'] = array(
    'title' => 'Operation Success Rate Analytics',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_op_successrate',
    'page arguments' => array(3, 4, 5, 6),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/downloadanalytics/datausage/org'] = array(
    'title' => 'Download Organization Analytics Data Usage',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_get_org_datausage_json',
    'page arguments' => array(4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/downloadanalytics/latency/org'] = array(
    'title' => 'Download Organization Analytics Latency',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_get_org_latency_json',
    'page arguments' => array(4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/downloadanalytics/successrate/org'] = array(
    'title' => 'Download Organization Analytics Success Rate',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_get_org_successrate_json',
    'page arguments' => array(4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/downloadanalytics/datausage/app/%'] = array(
    'title' => 'Download Application Analytics Data Usage',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_get_app_datausage_json',
    'page arguments' => array(4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/downloadanalytics/latency/app/%'] = array(
    'title' => 'Download Application Analytics Latency',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_get_app_latency_json',
    'page arguments' => array(4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/downloadanalytics/successrate/app/%'] = array(
    'title' => 'Download Application Analytics Success Rate',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_get_app_successrate_json',
    'page arguments' => array(4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/downloadanalytics/datausage/op/%/%'] = array(
    'title' => 'Download Application Analytics Data Usage',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_get_op_datausage_json',
    'page arguments' => array(4, 5),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/downloadanalytics/latency/op/%/%'] = array(
    'title' => 'Download Application Analytics Latency',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_get_op_latency_json',
    'page arguments' => array(4, 5),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['ibm_apim/downloadanalytics/successrate/op/%/%'] = array(
    'title' => 'Download Application Analytics Success Rate',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_get_op_successrate_json',
    'page arguments' => array(4, 5),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK);
  $items['myorg'] = array(
    'title' => 'My organization',
    'page callback' => '_ibm_apim_myorg_page',
    'menu_name' => 'user-menu',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 8,
    'access callback' => '_ibm_apim_user_is_org_owner');
  $items['myorg/manage'] = array(
    'title' => 'Manage',
    'page callback' => '_ibm_apim_myorg_page',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'menu_name' => 'user-menu',
    'weight' => 8,
    'access callback' => '_ibm_apim_user_is_org_owner');
  $items['myorg/analytics/datausage'] = array(
    'title' => 'Data Usage Analytics',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_org_datausage',
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'user-menu',
    'weight' => 9,
    'access callback' => '_ibm_apim_user_is_org_owner');
  $items['myorg/analytics/latency'] = array(
    'title' => 'Latency Analytics',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_org_latency',
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'user-menu',
    'weight' => 9,
    'access callback' => '_ibm_apim_user_is_org_owner');
  $items['myorg/analytics/successrate'] = array(
    'title' => 'Success Rate Analytics',
    'file' => 'ibm_apim.analytics.inc',
    'page callback' => 'ibm_apim_analytics_org_successrate',
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'user-menu',
    'weight' => 9,
    'access callback' => '_ibm_apim_user_is_org_owner');
  $items['myorg/edit/%'] = array(
    'title' => 'Edit My Organization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_ibm_apim_edit_myorg', 2),
    'type' => MENU_CALLBACK,
    'access callback' => '_ibm_apim_user_is_org_owner');
  $items['myorg/%'] = array(
    'title' => 'Ajax test callback',
    'type' => MENU_CALLBACK,
    'page callback' => '_ibm_apim_myorg_ajax_link_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'));
  $items['ibm_apim/saml/login'] = array(
    'title' => 'IBMID Login',
    'type' => MENU_CALLBACK,
    'page callback' => 'ibm_apim_do_saml_login',
    'access callback' => TRUE);
  if (module_exists('flag_bookmark')) {
    $items['mybookmarks'] = array(
      'title' => 'My bookmarks',
      'page callback' => '_ibm_apim_mybookmarks',
      'menu_name' => 'user-menu',
      'weight' => 7,
      'access callback' => 'user_is_logged_in');
  }
  $items['ibm_apim/version'] = array(
    'title' => 'IBM API Management Version',
    'type' => MENU_CALLBACK,
    'page callback' => 'ibm_apim_version',
    'access callback' => TRUE);
  return $items;
}

/**
 * Implementation hook_menu_alter()
 */
function ibm_apim_menu_alter(&$items) {
  // disable the user password tab if using a readonly registry
  $ibm_apim_readonly_idp = variable_get('ibm_apim_readonly_idp', FALSE);
  if ($ibm_apim_readonly_idp == TRUE) {
    $items['user/password']['access callback'] = FALSE;
  }
}

/**
 * Implementation hook_menu_local_tasks_alter()
 */
function ibm_apim_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $ibm_apim_saml_idp = variable_get('ibm_apim_saml_idp', 0);
  if ($ibm_apim_saml_idp == 1) {
    // Modify link to 'user/login' on 'user'* pages for IBMID.
    if (substr($root_path, 0, 4) === "user") {
      $item = menu_get_item('user/login');
      if ($item['access']) {
        // $data ['actions']['output'][] = array(
        // '#theme' => 'menu_local_action',
        // '#link' => $item
        // );
      }
    }
  }
}

/**
 * We need our module to run last for the user register form so we can remove any other fields
 * other modules might have added - such as the forum notifications.
 * With one exception, we want legal to run after us.
 *
 * @param unknown $implementations
 * @param unknown $hook
 */
function ibm_apim_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['ibm_apim'])) {
    $group = $implementations['ibm_apim'];
    unset($implementations['ibm_apim']);
    $implementations['ibm_apim'] = $group;
    if ($hook == 'form_alter' && isset($implementations['legal'])) {
      $group = $implementations['legal'];
      unset($implementations['legal']);
      $implementations['legal'] = $group;
    }
  }
}

/**
 * Implementation of hook_form_user_register_form_alter().
 */
function ibm_apim_form_user_register_form_alter(&$form, &$form_state) {
  $showusername = variable_get('ibm_apim_username_show', 0);
  if ($showusername == 0) {
    unset($form['account']['name']);
    $form['account']['mail']['#description'] = t('A valid e-mail address. All e-mails from the system will be sent to this address.  Your e-mail address will also be your username.');
  }
  if (isset($form['notifications_forum'])) {
    unset($form['notifications_forum']);
  }
  $form['#submit'] = array('ibm_apim_register_user');
}

/**
 * Use a custom submit handler for the register userform, adding extra values
 * from the IBM API Management account.
 *
 * @param $form The
 *          form
 *
 * @param $form_state The
 *          state of the form
 */
function ibm_apim_register_user($form, &$form_state) {
  $name = '';
  $mail = '';
  $pass = '';
  $companyname = '';
  $phone = '';
  $address = '';
  if (isset($form_state['values']['name'])) {
    $name = $form_state['values']['name'];
  }
  if (isset($form_state['values']['mail'])) {
    $mail = $form_state['values']['mail'];
  }
  if (isset($form_state['values']['pass'])) {
    $pass = $form_state['values']['pass'];
  }
  if (isset($form_state['values']['legal_accept'])) {
    $legal_accept = $form_state['values']['legal_accept'];
  }
  $username = $name;
  $emailasuser = variable_get('ibm_apim_email_as_username', 1);
  if ($emailasuser) {
    $username = $mail;
  }
  if (isset($form_state['values']['field_company']['und'][0]['value'])) {
    $companyname = $form_state['values']['field_company']['und'][0]['value'];
  }
  if (isset($form_state['values']['field_phone']['und'][0]['value'])) {
    $phone = $form_state['values']['field_phone']['und'][0]['value'];
  }
  if (isset($form_state['values']['field_address']['und'][0])) {
    $address = $form_state['values']['field_address']['und'][0];
  }

  $data = _ibm_apim_convert_to_apim_address($form_state['values']);
  $data["emailURLSuffix"] = "?q=ibm_apim/activate/x";

  // Make sure we have the session variables set
  _ibm_apim_check_and_get_config();
  $apim_session = &_ibm_apim_get_apim_session();
  $host_pieces = _ibm_apim_parse_apim_host();
  $url = $host_pieces['url'] . '/v1/portal/users/register';
  $headers = array(
    'Content-Type: application/json',
    "X-IBM-APIManagement-Context: " . $apim_session['org'] . '.' . $apim_session['env'],
    'Accept: application/json');
  $result = _ibm_apim_json_http_request($url, 'POST', $headers, json_encode($data));

  watchdog('ibm_apim_register_user', 'Register user %username, return code %code', array(
    '%username' => $username,
    '%code' => $result->code), WATCHDOG_NOTICE);

  if (isset($result) && in_array($result->code, array(201)) && $result->data != '') {
    drupal_set_message(t('Your account was created successfully.'));

    global $user;
    $fields = array(
      'status' => 0,
      'field_first_name' => $data['firstName'],
      'field_last_name' => $data['lastName'],
      'pass' => $pass,
      'email' => $mail,
      'mail' => $mail,
      'field_developer_organization' => $data['organization'],
      'field_company' => $companyname,
      'field_phone' => $phone,
      'field_address' => $address);
    if (isset($legal_accept)) {
      $fields['legal_accept'] = $legal_accept;
    }

    $ibm_apim_readonly_idp = variable_get('ibm_apim_readonly_idp', FALSE);
    if ($ibm_apim_readonly_idp == TRUE) {
      $fields['status'] = 1;
    }
    _ibm_apim_external_login_register($username, $fields, true);

    if (module_exists('security_questions')) {
      $account = user_external_load($username);
      security_questions_user_answers_save($account, $form_state['values']['questions']);
    }

    module_load_include('pages.inc', 'user');
    user_cookie_save(array('ibmapimactivate' => 1));
    user_logout();
    drupal_goto('user/login');
  }
  else {
    watchdog('ibm_apim_register_user', 'Error registering user %username. response: %response', array(
      '%username' => $username,
      '%response' => serialize($result)), WATCHDOG_NOTICE);
    if ($result->data && $result->data['errors'] && array_key_exists("user.exists.in.idp.active", $result->data['errors'][0])) {
      // user already exists in IDP
      drupal_set_message(t('A user already exists by that name. Use existing credentials to login.'), 'error');
    }
    elseif ($result->data && $result->data['errors'] && array_key_exists("user.creation.authenticationFailed", $result->data['errors'][0])) {
      // user auth failed (authURL)
      drupal_set_message(t('Unable to create user because authentication failed.'), 'error');
    }
    else {
      drupal_set_message(t('There was an error creating your account: %data', array(
        '%data' => serialize($result->data))), 'error');
    }
  }
}

/**
 * Implementation of hook_form_legal_login_alter().
 */
function ibm_apim_form_legal_login_alter(&$form, &$form_state) {
  // add a custom submit handler for the legal login form that logs you out straight away and then
  // ensure our activation message is displayed
  $form['#submit'][] = 'ibm_apim_legal_login_submit';
}

/**
 * Custom submit handler for legal_login form.
 */
function ibm_apim_legal_login_submit(&$form, &$form_state) {
  global $user;
  if ($user->uid && $user->status != 1) {
    module_load_include('pages.inc', 'user');
    user_cookie_save(array('ibmapimactivate' => 1));
    user_logout();
    drupal_goto('user/login');
  }
}

/**
 * Implementation of hook_boot().
 */
function ibm_apim_boot() {
}

/**
 * Implementation of hook_block_info().
 */
function ibm_apim_block_info() {
  $blocks['api_list'] = array(
    'info' => t('API List'),
    'status' => TRUE,
    'cache' => DRUPAL_CACHE_PER_USER,
    'region' => -1,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "api\napi/*");
  $blocks['plan_list'] = array(
    'info' => t('Plan List'),
    'status' => TRUE,
    'cache' => DRUPAL_CACHE_PER_USER,
    'region' => -1,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "plan\nplan/*");
  $blocks['app_list'] = array(
    'info' => t('Application List'),
    'status' => TRUE,
    'cache' => DRUPAL_CACHE_PER_USER,
    'region' => -1,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "application\napplication/*");
  $blocks['developer_org_select'] = array(
    'info' => t('Developer Organization Selection'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'header');
  // This block is to display the registration / activation message
  // has to be a block as can't send messages once the user has been logged out.
  $blocks['activatemessage'] = array(
    'info' => t('Activation Message'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'menu_bar');
  // This block is to display the registration message for invited users
  // has to be a block as can't send messages once the user has been logged out.
  $blocks['invitedmessage'] = array(
    'info' => t('Invited User Created Message'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'menu_bar');
  $blocks['app_details_menu'] = array(
    'info' => t('Application Menu'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'secondary_content');
  $blocks['apim_notification_count'] = array(
    'info' => t('APIM Notification Count'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'header');
  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function ibm_apim_block_view($delta = '') {
  global $user;
  $block = array();
  switch ($delta) {
    case 'developer_org_select' :
      if (user_is_logged_in() && $user->uid != 1) {
        $block['subject'] = NULL;
        $markup = ibm_apim_select_developer_menu();
        $block['content'] = array('#markup' => $markup);
      }
      break;
    case 'api_list' :
      $block['subject'] = t('APIs');
      if (module_exists('api')) {
        $result = api_list_contents();
        $items = array();
        if (is_array($result)) {
          foreach ($result as $item) {
            $items[] = array(
              'data' => l(check_plain($item['name']), 'api/' . check_plain($item['id']) . '/' . check_plain($item['version'])));
          }
          $block['content'] = theme('item_list', array('items' => $items));
        }
        else {
          $items[] = array('data' => $result);
          $block['content'] = array(
            '#markup' => '<p>' . check_plain($result) . '</p>');
        }
      }
      else {
        $block['content'] = array(
          '#markup' => '<p>' . t('Enable the api module to use this block.') . '</p>');
      }
      break;
    case 'plan_list' :
      $block['subject'] = t('Plan List');
      if (module_exists('plan')) {
        $result = plan_list_contents();
        $items = array();
        if (is_array($result)) {
          foreach ($result as $item) {
            $items[] = array(
              'data' => l(check_plain($item['name']), 'plan/' . check_plain($item['id']) . '/' . check_plain($item['version'])));
          }
          $block['content'] = theme('item_list', array('items' => $items));
        }
        else {
          $items[] = array('data' => $result);
          $block['content'] = array(
            '#markup' => '<p>' . check_plain($result) . '</p>');
        }
      }
      else {
        $block['content'] = array(
          '#markup' => '<p>' . t('Enable the plan module to use this block.') . '</p>');
      }
      break;
    case 'app_list' :
      $block['subject'] = t('Applications');
      if (module_exists('application')) {
        $result = application_list_contents();
        $items = array();
        if (is_array($result)) {
          foreach ($result as $item) {
            $items[] = array(
              'data' => l(check_plain($item['name']), 'application/' . check_plain($item['id'])));
          }
        }
        if (_ibm_apim_user_is_developer()) {
          $items[] = array(
            'data' => l(t('Register New Application'), 'application/new'));
        }
        $block['content'] = theme('item_list', array('items' => $items));
      }
      else {
        $block['content'] = array(
          '#markup' => '<p>' . t('Enable the application module to use this block.') . '</p>');
      }
      break;
    case 'activatemessage' :
      if (isset($_COOKIE['Drupal_visitor_logoff']) && isset($_COOKIE['Drupal_visitor_ibmapimactivate'])) {
        if ($_COOKIE['Drupal_visitor_logoff'] == 1 && $_COOKIE['Drupal_visitor_ibmapimactivate'] == 1 && !user_is_logged_in()) {
          $ibm_apim_readonly_idp = variable_get('ibm_apim_readonly_idp', FALSE);
          if ($ibm_apim_readonly_idp == TRUE) {
            drupal_set_message(t('Account created successfully. Please login to continue.'));
          }
          else {
            drupal_set_message(t('You have been sent an account activation email. You need to click on the link in it to activate your account before you can login.'));
          }
          user_cookie_save(array('logoff' => 0));
          user_cookie_save(array('ibmapimactivate' => 0));
        }
      }
      $block = array('subject' => t('Activate'), 'content' => '');
      break;
    case 'invitedmessage' :
      if (isset($_COOKIE['Drupal_visitor_logoff']) && isset($_COOKIE['Drupal_visitor_ibmapiminvited'])) {
        if ($_COOKIE['Drupal_visitor_logoff'] == 1 && $_COOKIE['Drupal_visitor_ibmapiminvited'] == 1 && !user_is_logged_in()) {
          drupal_set_message(t('Account created successfully. Login to continue.'));
          user_cookie_save(array('logoff' => 0));
          user_cookie_save(array('ibmapiminvited' => 0));
        }
      }
      $block = array('subject' => t('Activate'), 'content' => '');
      break;
    case 'app_details_menu' :

      // Only show this link on the collection of applications
      if ($user->uid && arg(0) == 'application' && arg(1) == NULL && _ibm_apim_user_is_developer()) {
        if (module_exists('application')) {
          $ibm_apim_show_register_app = variable_get('ibm_apim_show_register_app', 1);
          if ($ibm_apim_show_register_app == 1) {
            $content = '<span class="registerApp"><a href="' . url("application/new") . '">' . t('Register new Application') . '</a></span>';
            $block = array('subject' => '<none>', 'content' => $content);
          }
        }
        else {
          $block['content'] = array(
            '#markup' => '<p>' . t('Enable the application module to use this block.') . '</p>');
        }
      }
      break;
    case 'apim_notification_count' :
      if (user_is_logged_in() && $user->uid != 1) {
        $block['subject'] = NULL;
        $markup = ibm_apim_notification_count_block();
        $block['content'] = array('#markup' => $markup);
      }
      break;
  }
  return $block;
}

/**
 * A function to check the SAML token for IBMID and login the user if valid
 *
 *
 * @return true of logged in successfully, false otherwise .
 */
function _ibm_apim_verify_saml_token($samltoken = NULL) {
  $returnVal = null;
  // Make sure we have the session variables set
  _ibm_apim_check_and_get_config();
  $apim_session = &_ibm_apim_get_apim_session();
  $host_pieces = _ibm_apim_parse_apim_host();
  $url = $host_pieces['url'] . '/v1/portal/me';
  $headers = array(
    'Content-Type: application/json',
    'Accept: application/json',
    "X-IBM-APIManagement-Context: " . $apim_session['org'] . '.' . $apim_session['env'],
    'X-IBM-APIManagement-IBMIDToken: ' . $samltoken);

  $result = _ibm_apim_json_http_request($url, 'GET', $headers);

  // Must get the session again now as it may have changed when we logged in
  $apim_session = &_ibm_apim_get_apim_session();
  watchdog('_ibm_apim_verify_saml_token', 'IBMID validation return code %data', array(
    '%data' => $result->code), WATCHDOG_NOTICE);
  if (isset($result) && ($result->code == 200) && $result->data != '') {
    if (isset($result->data['id'])) {
      $apim_session['memberid'] = $result->data['id'];
    }
    $apim_session['samltoken'] = $samltoken;
    if (isset($result->data['name'])) {
      $newresult = _ibm_apim_authenticated_login($result->data['name'], "!n0r1t5@C", $result->data);
      $returnVal = $newresult;
    }
  }
  return $returnVal;
}

/**
 * A function to get the APIm config
 *
 *
 * @return string NULL if an error occurs otherwise an array of the apim config.
 */
function _ibm_apim_get_apim_config() {
  global $base_url;
  $config_data = NULL;
  $url = '/v1/portal/config?originURL=' . drupal_encode_path($base_url);
  $result = ibm_apim_call($url, 'user', TRUE);
  if (isset($result) && isset($result->code) && $result->code == 200 && isset($result->data) && !isset($result->data['errors'])) {
    $config_data = $result->data;
    // clear caches if config different to previous requests
    $current_config = variable_get('ibm_apim_portal_config');
    if (isset($current_config)) {
      if ($current_config != serialize($config_data)) {
        cache_clear_all();
      }
    }
    variable_set('ibm_apim_portal_config', serialize($config_data));
  }

  return $config_data;
}

/**
 * A helper function to use when submitted an IBM API GET call
 *
 * @param
 *          string url
 *          The IBM APIm API URL
 *
 * @param
 *          string auth
 *          The authorization string to use, the default is the current user
 *
 * @return array NULL if an error occurs otherwise an array with data from the API.
 *
 * @see _ibm_apim_call_base()
 */
function ibm_apim_call($url, $auth = 'user', $getting_config = FALSE) {
  $returnValue = NULL;
  return _ibm_apim_call_base($url, 'GET', $auth, NULL, TRUE, FALSE, $getting_config);
}

/**
 * A helper function to use when submitted an IBM API GET call.
 * This
 * function is only needed if you need the raw return data, for instance
 * when retrieving an image.
 *
 * @param
 *          string url
 *          The IBM APIm API URL
 *
 * @param
 *          string auth
 *          The authorization string to use, the default is the current user
 *
 * @return array NULL if an error occurs otherwise a result object.
 *
 * @see _ibm_apim_call_base()
 */
function ibm_apim_raw_data($url, $auth = 'user') {
  $returnValue = NULL;
  return _ibm_apim_call_base($url, 'GET', $auth, NULL, FALSE, TRUE);
}

/**
 * A helper function to use when submitted an IBM API POST call
 *
 * @param
 *          string url
 *          The IBM APIm API URL
 *
 * @param
 *          string data
 *          A string containing the JSON data to submit to the IBM API
 *
 * @param
 *          string auth
 *          The authorization string to use, the default is the current user
 *
 * @return array NULL if an error occurs otherwise an array with data from the API.
 *
 * @see _ibm_apim_call_base()
 */
function ibm_apim_post($url, $data, $auth = 'user') {
  $returnValue = NULL;
  return _ibm_apim_call_base($url, 'POST', $auth, $data);
}

/**
 * A helper function to use when submitted an IBM API PUT call
 *
 * @param
 *          string url
 *          The IBM APIm API URL
 *
 * @param
 *          string data
 *          A string containing the JSON data to submit to the IBM API
 *
 * @param
 *          string auth
 *          The authorization string to use, the default is the current user
 *
 * @return array NULL if an error occurs otherwise an array with data from the API.
 *
 * @see _ibm_apim_call_base()
 */
function ibm_apim_put($url, $data, $auth = 'user') {
  $returnValue = NULL;
  return _ibm_apim_call_base($url, 'PUT', $auth, $data);
}

/**
 * A helper function to use when submitted an IBM API DELETE call
 *
 * @param
 *          string url
 *          The IBM APIm API URL
 *
 * @param
 *          string auth
 *          The authorization string to use, the default is the current user
 *
 * @return array NULL if an error occurs otherwise an array with data from the API.
 *         Note that DELETE calls usually return nothing in which this function
 *         will return an empty string.
 *
 * @see _ibm_apim_call_base()
 */
function ibm_apim_delete($url, $auth = 'user') {
  $returnValue = NULL;
  return _ibm_apim_call_base($url, 'DELETE', $auth);
}

/**
 * Turns a string of JSON into a PHP object.
 */
function _ibm_apim_get_json($string) {
  $decoded = json_decode($string, TRUE);
  return $decoded;
}

/**
 * If the developer mode config parameter is true then sets options
 * on a curl resource to enable auto-accept of self-signed
 * certificates.
 */
function _ibm_apim_curl_set_accept_ssl($resource) {

  // Always set the defaults first
  curl_setopt($resource, CURLOPT_SSL_VERIFYPEER, TRUE);
  curl_setopt($resource, CURLOPT_SSL_VERIFYHOST, 2);

  if (variable_get('ibm_apim_insecure')) {
    curl_setopt($resource, CURLOPT_SSL_VERIFYPEER, FALSE);
    curl_setopt($resource, CURLOPT_SSL_VERIFYHOST, 0);
  }
  else {
    $provided_certificate = variable_get('ibm_apim_provided_certificate');
    if ($provided_certificate) {
      // Tell curl to use the certificate the user provided
      curl_setopt($resource, CURLOPT_CAINFO, "/etc/apim.crt");
      if ($provided_certificate == 'mismatch') {
        // If the certificate is does not contain the correct server name
        // then tel curl to accept it anyway. The user gets a warning when
        // they provide a certificate like this so they understand this is
        // less secure than using a certificate with a matching server name.
        curl_setopt($resource, CURLOPT_SSL_VERIFYHOST, 0);
      }
    }
  }
}

function _ibm_apim_json_http_request($url, $verb = 'GET', $headers = NULL, $data = NULL, $return_result = FALSE) {
  // Use curl instead of drupal_http_request so that we can
  // check the server certificates are genuine so that we
  // do not fall foul of a man-in-the-middle attack.
  $resource = curl_init();

  curl_setopt($resource, CURLOPT_URL, $url);
  curl_setopt($resource, CURLOPT_HTTPHEADER, $headers);
  curl_setopt($resource, CURLOPT_RETURNTRANSFER, 1);

  // Return the response header as part of the response
  curl_setopt($resource, CURLOPT_HEADER, 1);

  if ($verb != 'GET') {
    curl_setopt($resource, CURLOPT_CUSTOMREQUEST, $verb);
  }

  if ($verb == 'PUT' || $verb == 'POST') {
    curl_setopt($resource, CURLOPT_POSTFIELDS, $data);
  }

  // Enable auto-accept of self-signed certificates if this
  // has been set in the module config by an admin.
  _ibm_apim_curl_set_accept_ssl($resource);

  $response = curl_exec($resource);
  $http_status = curl_getinfo($resource, CURLINFO_HTTP_CODE);
  $error = curl_error($resource);

  // Construct the result object we expect
  $result = new stdClass();

  // Assign the response headers
  $header_size = curl_getinfo($resource, CURLINFO_HEADER_SIZE);
  $header_txt = substr($response, 0, $header_size);
  $result->headers = array();

  foreach (explode("\r\n", $header_txt) as $line) {
    $parts = explode(': ', $line);
    if (count($parts) == 2) {
      $result->headers[$parts[0]] = $parts[1];
    }
  }

  if ($error) {
    // a return code of zero mostly likely means there has been a certificate error
    // so make sure we surface this in the UI
    if ($http_status == 0) {
      throw new Exception(t('Could not communicate with server. Reason: ') . $error);
    }
  }

  $result->data = substr($response, $header_size);

  $result->code = $http_status;

  curl_close($resource);

  if (!$return_result) {
    if ($result->data != '') {
      if (empty($headers) || !in_array('Accept: application/vnd.ibm-apim.swagger2+yaml', $headers)) {
        $result->data = _ibm_apim_get_json($result->data);
      }
    }
  }

  return $result;
}

/**
 * Where the real work to make a call to the IBM APIm API is done.
 *
 * @param
 *          string url
 *          The IBM APIm API URL
 *
 * @param
 *          string verb
 *          The HTTP verb to use, must be in the list: GET, PUT, DELETE, POST
 *
 * @param
 *          string auth
 *          The authorization string to use, the default is the current user. Other
 *          options are:
 *          admin - which will use the admin user registered in the
 *          module configuration settings
 *          NULL - use no authorization
 *          any other value - will be included in the Authorization: Basic header
 *          as is.
 *
 * @param
 *          string data
 *          A string containing the JSON data to submit to the IBM API
 *
 * @param
 *          boolean message_errors
 *          Should the function log errors?
 *
 * @param
 *          boolean return_result
 *          Normally only the result data is returned, if set to TRUE the entire
 *          result object will be returned.
 *
 * @return array NULL if an error occurs otherwise an array with data from the API.
 */
function _ibm_apim_call_base($url, $verb, $auth = 'user', $data = NULL, $message_errors = TRUE, $return_result = FALSE, $getting_config = FALSE) {

  // dont bother with running api calls during the install
  if (variable_get('install_task') != 'done') {
    return;
  }

  // Ensure we have any necessary config
  if ($getting_config == FALSE) {
    _ibm_apim_check_and_get_config();
  }
  $apim_session = &_ibm_apim_get_apim_session();

  $returnValue = NULL;
  if (strpos($url, 'https://') !== 0) {
    $host_pieces = _ibm_apim_parse_apim_host();
    if (isset($host_pieces['url'])) {
      $url = $host_pieces['url'] . $url;
    }
    else {
      drupal_set_message(t('APIM Hostname not set. Aborting'), 'error');
      return null;
    }
  }

  $headers = array('Content-Type: application/json', 'Accept: application/json');

  if ($getting_config == FALSE) {
    $headers[] = 'X-IBM-APIManagement-Context: ' . $apim_session['org'] . '.' . $apim_session['env'];
  }

  if ($auth == 'user') {
    $ibm_apim_saml_idp = variable_get('ibm_apim_saml_idp', 0);
    if ($ibm_apim_saml_idp == 1) {
      if (isset($apim_session['samltoken']) && !empty($apim_session['samltoken'])) {
        $headers[] = 'X-IBM-APIManagement-IBMIDToken: ' . $apim_session['samltoken'];
      }
    }
    elseif (isset($apim_session['auth'])) {
      $headers[] = 'Authorization: Basic ' . $apim_session['auth'];
    }
  }
  elseif ($auth != NULL) {
    $headers[] = 'Authorization: Basic ' . $auth;
  }

  $result = _ibm_apim_json_http_request($url, $verb, $headers, $data, $return_result);

  watchdog('_ibm_apim_call_base', '%verb %url %code', array(
    '%verb' => $verb,
    '%url' => $url,
    '%code' => $result->code), WATCHDOG_NOTICE);

  if ($getting_config && isset($result) && $result->code == 204) {
    $result->data = NULL;
    $returnValue = $result;
  }
  else {
    if (isset($result) && $result->code >= 200 && $result->code < 300 && $return_result != true) {
      $returnValue = $result;
    }
    else {
      if ($message_errors) {
        if ($return_result) {
          // Need to convert to json if return_result was true as _ibm_apim_json_http_request()
          // will not have done it
          $result->data = _ibm_apim_get_json($result->data);
        }
        $json_result = $result->data;
        $errors = $json_result['errors'];
        if ($errors) {
          foreach ($errors as $error) {
            $keys = array_keys($error);
            if ($keys) {
              foreach ($keys as $key) {
                if ($key != 'plans.planNotFound') {
                  // Don't log errors about unpublished plans
                  drupal_set_message($error[$key], 'error');
                  $returnValue = $result;
                }
              }
            }
          }
        }
      }
    }
  }
  if ($return_result) {
    return $result;
  }
  return $returnValue;
}

/**
 * Load the user's developer organizations and store them in a session variable.
 * The developer org is used in most IBM APIm API calls, storing it saves a lot
 * of extra calls.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 *
 * @param
 *          string appId
 *          The application ID that cooresponds to the secret
 *
 * @return array The form
 */
function _ibm_apim_load_developer_orgs() {
  $apim_session = &_ibm_apim_get_apim_session();
  if (isset($apim_session['developer_organizations'])) {
    return $apim_session['developer_organizations'];
  }
  $ibmid = variable_get('ibm_apim_saml_idp', 0);
  if ((isset($apim_session['auth']) || $ibmid == 1) && !isset($apim_session['developer_organizations'])) {
    $apim_session['developer_organizations'] = array();
    $result = ibm_apim_call('/v1/portal/orgs');
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $apim_session['developer_organizations'] = $result->data;
    }
    return $apim_session['developer_organizations'];
  }
  return NULL;
}

/**
 * Sets the current developer org in a session variable.
 * Users may belong to
 * multiple developer orgs.
 *
 * @param
 *          string org_id
 *          The org id
 *
 * @return array The form
 */
function _ibm_apim_set_current_developer_org($org_id) {
  $orgs = _ibm_apim_load_developer_orgs();
  $apim_session = &_ibm_apim_get_apim_session();
  if ($orgs) {
    foreach ($orgs as $org) {
      if ($org['id'] == $org_id) {
        $apim_session['current_developer_organizations'] = $org;
        break;
      }
    }
  }
  // remove cached isdeveloper value
  unset($apim_session['isdeveloper']);
  cache_clear_all();
  watchdog('_ibm_apim_set_current_developer_org', 'Developer org set %data', array(
    '%data' => json_encode($apim_session['current_developer_organizations'], JSON_PRETTY_PRINT)), WATCHDOG_NOTICE);
  return $apim_session['current_developer_organizations'];
}

/**
 * Gets the current developer org object from a session variable.
 *
 * @return array The the current developer org object or NULL if a user does not belong to a
 *         developer org or one is not set.
 */
function ibm_apim_get_current_developer_org() {
  $apim_session = &_ibm_apim_get_apim_session();
  if (isset($apim_session['current_developer_organizations'])) {
    return $apim_session['current_developer_organizations'];
  }
  return NULL;
}

/**
 * Generate an array suitable as input for a form select box.
 * The data will
 * be the API methods available for an application id.
 *
 * @param
 *          string appId
 *          The application id
 *
 * @return array The array of methods available for the given appId
 */
function _ibm_apim_apis_for_app_select_options($appId) {
  $returnValue = array();
  if ($appId == '') {
    return $returnValue;
  }
  $returnValue[''] = 'Select a method';
  $org = ibm_apim_get_current_developer_org();
  $developerOrg = $org['id'];
  $url = '/v1/portal/orgs/' . $developerOrg . '/apps/' . $appId . '/subscriptions';
  $result = ibm_apim_call($url);
  if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
    $plan_data = $result->data;
  }
  if (count($plan_data) == 0) {
    return NULL;
  }
  foreach ($plan_data as $plan_details) {
    if ($plan_details['approved'] == false) {
      continue;
    }
    $result = ibm_apim_call($plan_details['planURL']);
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $plan_info = $result->data;
    }
    if ($plan_info['apis']) {
      foreach ($plan_info['apis'] as $api) {
        if ($api['resources']) {
          foreach ($api['resources'] as $resource) {
            $returnValue[$api['api']['id'] . ':' . $api['api']['version'] . ':' . $developerOrg . ':' . $resource['id']] = $resource['verb'] . ' ' . $api['api']['name'] . '/' . $resource['name'];
          }
        }
      }
    }
  }
  return $returnValue;
}

/**
 * Change a user password.
 *
 * @param
 *          string new_password
 *          The new password to set
 *
 * @param
 *          string authuser
 *          The user ID to make the POST as
 *
 * @param
 *          string username
 *          The username for the user
 *
 * @param
 *          string current_pass
 *          The users current password
 */
function _ibm_apim_change_user_password($new_password, $authuser, $username, $current_pass) {
  global $user;
  // update drupal database
  if (isset($user->uid)) {
    // update user password
    $edit['pass'] = $new_password;
    user_save($user, $edit);
  }
  else {
    $acccount = user_load_by_name($username);
    // update user password
    $acccount->password = $new_password;
    // save user
    user_save((object) array('uid' => $acccount->uid), (array) $acccount);
  }
  // Make sure we have the session variables set
  _ibm_apim_check_and_get_config();
  $apim_session = &_ibm_apim_get_apim_session();
  $apim_session['auth'] = base64_encode($username . ':' . $new_password);

  $url = '/v1/portal/me/password';
  $data = array("newPassword" => $new_password, "oldPassword" => $current_pass);
  $custom_auth = base64_encode($authuser . ':' . $current_pass);
  // if not admin then update apim too
  if (!isset($user->uid) || $user->uid != 1) {
    $result = ibm_apim_put($url, json_encode($data), $custom_auth);
    if (isset($result) && $result->code == 204) {
      // update drupal database too
      global $user;
      if (isset($user->uid)) {
        // update user password
        $edit['pass'] = $new_password;
        user_save($user, $edit);
      }
      else {
        $acccount = user_load_by_name($username);
        // update user password
        $acccount->password = $new_password;
        // save user
        user_save((object) array('uid' => $acccount->uid), (array) $acccount);
      }
      $apim_session = &_ibm_apim_get_apim_session();
      $apim_session['auth'] = base64_encode($username . ':' . $new_password);
    }
  }
}

/**
 * Reset a user's password.
 * This generates an e-mail from the IBM APIm
 * system.
 *
 * @param
 *          string email
 *          The email of the user to reset
 */
function _ibm_apim_reset_user_password($email) {
  $url = '/v1/portal/users/forgot-password';
  $data = array("emailURLSuffix" => "?q=ibm_apim/forgotpwd/x", "name" => $email);
  $result = ibm_apim_post($url, json_encode($data));
  if (isset($result)) {
    drupal_set_message(t('Password reset e-mail successfully sent.'));
  }
}

/**
 * Implementation of hook_form_user_pass_alter
 */
function ibm_apim_form_user_pass_alter(&$form, &$form_state) {
  $secure_pass_form = variable_get('security_questions_password_reset', FALSE);
  if (module_exists('security_questions') && $secure_pass_form == TRUE) {
    global $user;

    // We need our own submission handler to make this a multistep form.
    $form['#submit'] = array('ibm_apim_user_pass_submit');

    // If the user is already logged in but not allowed to bypass, or our submit
    // handler triggered a rebuild, then we need to issue a challenge.
    $account = FALSE;
    if ($user->uid > 0 && !security_questions_bypass_challenge($user)) {
      $account = $user;
    }
    elseif (!empty($form_state['security_questions']['uid'])) {
      $account = user_load($form_state['security_questions']['uid']);
    }
    elseif ($account == FALSE) {
      // fallback code incase validator hasn't managed to find the account for some reason
      $name = trim($form_state['values']['name']);
      // Try to load by email.
      $users = user_load_multiple(array(), array('mail' => $name, 'status' => '1'));
      $testaccount = reset($users);
      if (!$testaccount) {
        // No success, try to load by name.
        $users = user_load_multiple(array(), array('name' => $name, 'status' => '1'));
        $testaccount = reset($users);
      }
      if (isset($testaccount->uid)) {
        $account = $testaccount;
        form_set_value(array('#parents' => array('account')), $account, $form_state);
      }
    }
    if ($account) {
      $form += security_questions_challenge($account);
      $form['#validate'][] = 'security_questions_user_pass_answer_validate';
      $form['name']['#type'] = 'value';
      $form['name']['#value'] = $account->mail;
    }
  }
  else {
    $form['#submit'] = array('ibm_apim_user_pass_submit');
  }
}

/**
 * Submit handler to reset a user's password
 */
function ibm_apim_user_pass_submit(&$form, &$form_state) {
  $secure_pass_form = variable_get('security_questions_password_reset', FALSE);
  // do not send admin password resets to apim
  $account = $form_state['values']['account'];
  if ($account->uid == 1) {
    user_pass_submit($form, $form_state);
  }
  else
    if (((module_exists('security_questions') && $secure_pass_form == TRUE) && (security_questions_bypass_challenge($account) || (!empty($form_state['security_questions']['passed_challenge']) && $form_state['security_questions']['passed_challenge'] == TRUE))) || !module_exists('security_questions') || $secure_pass_form == FALSE) {
      // if the security questions module is active and set for password resets then need to be on the second pass through this code (after submitting the answers) to actually do something since the security questions module will rebuild the form
      _ibm_apim_reset_user_password($account->name);
    }
    else {
      // Otherwise, store the ID of the user requesting the reset and rebuild.
      $form_state['security_questions']['uid'] = $account->uid;
      $form_state['rebuild'] = TRUE;
    }
}

/**
 * Callback to receive the APIm representation of the IBMID SAML token
 *
 * @param string $token
 */
function ibm_apim_saml_callback($samltoken = NULL) {
  $ibm_apim_saml_idp = variable_get('ibm_apim_saml_idp', 0);
  // only do something if using IBMID and not already logged in
  if ($ibm_apim_saml_idp == 1 && !user_is_logged_in() && isset($samltoken) && !empty($samltoken)) {
    $apim_session = &_ibm_apim_get_apim_session();
    $returnVal = _ibm_apim_verify_saml_token($samltoken);
    $account = $returnVal['account'];
    $orgs = $returnVal['orgs'];
    if (isset($account)) {
      $apim_session['samltoken'] = $samltoken;
    }
    if (!isset($orgs) || count($orgs) < 1) {
      cache_clear_all();
      drupal_set_message(t('You need to create a developer organization to continue.'));
      drupal_goto('ibm_apim/org/create');
    }
    else {
      // redirect to home now should be logged in.
      cache_clear_all();
      drupal_goto('<front>');
    }
  }
}

/**
 * Callback to handle user id activation
 * This is to handle a specific URL that APIm will send out as its
 * activation link.
 * The URL will include base64 encoded JSON with the username
 * and some temporary credentials allocated by the server to enable us to update apim
 */
function ibm_apim_activate_id_callback($path = NULL) {
  global $_GET;
  if (isset($_GET['activationToken'])) {
    $actToken = $_GET['activationToken'];
  }

  // ACTIVATE USER LINK
  if (isset($actToken)) {

    // Make sure we have the session variables set
    _ibm_apim_check_and_get_config();
    $apim_session = &_ibm_apim_get_apim_session();

    // decode the base64 encoded JSON in the incoming URL
    $activationObj = json_decode(base64_decode($actToken));
    // set global variables with the temp auth credentials from the incoming URL payload
    global $tempUser;
    global $tempPwd;
    if (!(isset($activationObj->{'username'}) && isset($activationObj->{'authentication'}) && isset($activationObj->{'authentication'}->{'username'}) && isset($activationObj->{'authentication'}->{'password'}) && isset($activationObj->{'providerContext'}) && isset($activationObj->{'providerContext'}->{'orgID'}) && isset($activationObj->{'providerContext'}->{'environmentID'}))) {
      // esential info missing from token
      drupal_set_message(t('Invalid Token: missing required fields. Contact the system administrator for assistance.'), 'error');
      watchdog('ibm_apim_activate_id_callback', 'Invalid Token: missing required fields. token: %token', array(
        '%token' => serialize($activationObj)), WATCHDOG_NOTICE);
      drupal_goto();
    }
    $tempUser = $activationObj->{'authentication'}->{'username'};
    $tempPwd = $activationObj->{'authentication'}->{'password'};
    $org = $activationObj->{'providerContext'}->{'orgID'};
    $env = $activationObj->{'providerContext'}->{'environmentID'};
    $userid = $activationObj->{'username'};

    // verify the temp userid and password are valid
    $url = $activationObj->{'url'};
    if (!isset($url)) {
      drupal_set_message(t('Token did not contain a valid URL. Contact the system administrator for assistance.'), 'error');
      watchdog('ibm_apim_activate_id_callback', 'Invalid Token: Token did not contain a valid URL. token: %token', array(
        '%token' => serialize($activationObj)), WATCHDOG_NOTICE);
      drupal_goto();
    }
    $headers = array(
      'Content-Type: application/json',
      'Accept: application/json',
      "X-IBM-APIManagement-Context: " . $org . '.' . $env,
      'Authorization: Basic ' . base64_encode($tempUser . ':' . $tempPwd));

    $result = _ibm_apim_json_http_request($url, 'POST', $headers, '{}');

    if (isset($result) && $result->code >= 200 && $result->code < 300) {
      $account = user_load_by_name($userid);
      // update status via SQL to avoid triggering drupal activation email
      db_update('users')->fields(array('status' => 1))->condition('uid', $account->uid)->execute();

      drupal_set_message(t('Account successfully activated, please login to continue.'));
      drupal_goto('user/login');
    }
    else
      if (isset($result) && $result->code == 400) {
        if ($result->data && $result->data['errors']) {
          if (array_key_exists("missingFields", $result->data['errors'][0]) || array_key_exists("validation.resource.representation.missingOrEmptyValues", $result->data['errors'][0])) {
            // user invited by others and so needs to specify required fields to populate account
            return drupal_get_form('ibm_apim_activate_create_account_form', $actToken);
          }
          elseif (array_key_exists("user.exists.in.portal.active", $result->data['errors'][0])) {
            // user already exists
            drupal_set_message(t('User already exists. Please use existing credentials to sign in.'), 'error');
            drupal_goto('user/login');
          }
          else {
            // invalid credentials, redirect to login form
            drupal_set_message(t('Invalid authentication token. Contact the system administrator.'), 'error');
            watchdog('ibm_apim_activate_id_callback', 'Invalid Token: Error from server. response: %response', array(
              '%response' => serialize($result)), WATCHDOG_NOTICE);
            drupal_goto('user/login');
          }
        }
        else {
          // invalid credentials, redirect to login form
          drupal_set_message(t('Invalid authentication token. Contact the system administrator.'), 'error');
          watchdog('ibm_apim_activate_id_callback', 'Invalid Token: Error from server. response: %response', array(
            '%response' => serialize($result)), WATCHDOG_NOTICE);
          drupal_goto('user/login');
        }
      }
      else {
        // invalid credentials, redirect to login form
        drupal_set_message(t('Invalid authentication token. Contact the system administrator.'), 'error');
        watchdog('ibm_apim_activate_id_callback', 'Invalid Token: Error from server. response: %response', array(
          '%response' => serialize($result)), WATCHDOG_NOTICE);
        drupal_goto('user/login');
      }
  }
  else {
    drupal_set_message(t('Invalid URL. Contact the system administrator for assistance.'), 'error');
    watchdog('ibm_apim_activate_id_callback', 'Missing Token', array(), WATCHDOG_NOTICE);
    drupal_goto();
  }
}

/**
 * User invited by a dev org owner but hasnt got an account yet so needs to be prompted to create one
 */
function ibm_apim_activate_create_account_form($token = NULL) {
  global $user;
  global $_GET;
  if (isset($_GET['activationToken'])) {
    $token = $_GET['activationToken'];
  }
  if (!isset($token)) {
    drupal_set_message(t('Missing token. Contact the system administrator for assistance.'), 'error');
    watchdog('ibm_apim_activate_create_account_form', 'Missing token.', array(), WATCHDOG_NOTICE);
    drupal_goto();
  }
  $activationObj = json_decode(base64_decode($token));
  $userid = $activationObj->{'username'};
  // If already logged on, go to the user page instead.
  if ($user->uid) {
    drupal_goto('user/' . $user->uid);
  }
  // if already a user with this email address error out
  if (isset($userid) && !empty($userid)) {
    $found = user_load_by_mail($userid);
    if (isset($found) && isset($found->uid)) {
      drupal_set_message(t('A user already exists with this email address. Use those credentials to log in.'), 'error');
      drupal_goto('user/login');
    }
  }

  $form = array();
  // Ensure some defaults; if already set they will not be overridden.
  $form_state = form_state_defaults();
  // set some min values to get the addressfield to stop blocking other fields displaying
  if (isset($form_state['values'])) {
    $form_state['input'] = $form_state['values'];
  }
  else {
    $form_state['input'] = array();
    $form_state['values'] = array();
  }
  $form_state['build_info'] = array();
  $form_state['build_info']['form_id'] = "";

  $form['#user'] = drupal_anonymous_user();
  $form['#user_category'] = 'register';

  $form['#attached']['library'][] = array('system', 'jquery.cookie');
  $form['#attributes']['class'][] = 'user-info-from-cookie';

  $form['intro'] = array(
    '#weight' => '-20',
    '#markup' => '<p>' . t("You must fill in the form below to complete the activation of your account: @userid.", array(
      '@userid' => $userid)) . '</p>');
  // for readonly registries with display name set add a prompt to use those credentials
  $displayname = variable_get('ibm_apim_idp_displayname');
  $ibm_apim_readonly_idp = variable_get('ibm_apim_readonly_idp', FALSE);
  if ($ibm_apim_readonly_idp == TRUE && isset($displayname) && !empty($displayname)) {
    $form['intro']['#markup'] .= '<p>' . t('Use your @displayname credentials to activate your account.', array(
      '@displayname' => $displayname)) . '</p>';
  }

  // Start with the default user account fields.
  user_account_form($form, $form_state);
  // remove username field if not set to show and disable mail since we already know it
  $showusername = variable_get('ibm_apim_username_show', 0);
  if ($showusername == 0) {
    unset($form['account']['name']);
  }
  $form['account']['mail']['#default_value'] = $userid;
  $form['account']['mail']['#disabled'] = TRUE;

  // Attach field widgets, and hide the ones where the 'user_register_form'
  // setting is not on. Plus hide the dev org field since we already know that.
  $langcode = entity_language('user', $form['#user']);
  field_attach_form('user', $form['#user'], $form, $form_state, $langcode);
  foreach (field_info_instances('user', 'user') as $field_name => $instance) {
    if (empty($instance['settings']['user_register_form']) || $field_name == "field_developer_organization") {
      $form[$field_name]['#access'] = FALSE;
    }
  }

  if (module_exists('security_questions')) {
    // Hide the questions form when the user is being registered by an admin.
    if (!user_access('administer users')) {
      // Merge in security_questions user form.
      module_load_include('inc', 'security_questions', 'security_questions.pages');
      $form['questions'] = array('#tree' => TRUE);
      $i = 0;

      if (isset($account)) {
        $form['account'] = array('#type' => 'value', '#value' => $account);
        // Fields for changing existing answers.
        $answers = security_questions_get_answer_list($account->uid);
        foreach ($answers as $answer) {
          $form['questions'][$i] = security_questions_selector_element('questions[' . $i . ']', $account, $answer);
          $i++;
        }
      }

      // Fields for selecting new answers.
      $required = variable_get('security_questions_number_required', 3);
      while ($i < $required) {
        $form['questions'][$i] = security_questions_selector_element('questions[' . $i . ']', $account);
        $i++;
      }

      $form['#validate'][] = 'security_questions_user_register_form_validate';
      // Can't add security_questions submit handler here, because the user account doesn't
      // exist yet. Instead, it will get the info during hook_user_insert().
    }
  }

  $form['token'] = array('#type' => 'hidden', '#value' => $token);
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Activate'));

  $form['#validate'][] = 'user_register_validate';
  $form['#submit'] = array(
    'ibm_apim_activate_create_account_form_submit_handler');
  return $form;
}

/**
 * Submit handler to handle the create account form
 * doesnt actually create the account in drupal though
 * that will happen on first login
 */
function ibm_apim_activate_create_account_form_submit_handler($form, &$form_state) {
  global $user;
  $actToken = $form_state['values']['token'];
  // decode the base64 encoded JSON in the incoming URL
  $activationObj = json_decode(base64_decode($actToken));

  // Make sure we have the session variables set
  _ibm_apim_check_and_get_config();
  $apim_session = &_ibm_apim_get_apim_session();

  // set global variables with the temp auth credentials from the incoming URL payload
  global $tempUser;
  global $tempPwd;
  $tempUser = $activationObj->{'authentication'}->{'username'};
  $tempPwd = $activationObj->{'authentication'}->{'password'};
  $org = $activationObj->{'providerContext'}->{'orgID'};
  $env = $activationObj->{'providerContext'}->{'environmentID'};
  $userid = $activationObj->{'username'};

  $pass = $form_state['values']['pass'];
  // create user object to send to apim
  $data = _ibm_apim_convert_to_apim_address($form_state['values']);
  if (isset($form_state['values']['field_company']['und'][0]['value'])) {
    $companyname = $form_state['values']['field_company']['und'][0]['value'];
  }
  if (isset($form_state['values']['field_phone']['und'][0]['value'])) {
    $phone = $form_state['values']['field_phone']['und'][0]['value'];
  }
  if (isset($form_state['values']['field_address']['und'][0])) {
    $address = $form_state['values']['field_address']['und'][0];
  }
  // activate from invitation cannot handle organization (and doesnt need it)
  if (isset($data['organization'])) {
    unset($data['organization']);
  }

  // verify the temp userid and password are valid
  $url = $activationObj->{'url'};
  if (!isset($url)) {
    drupal_set_message(t('Token did not contain a valid URL. Contact the system administrator for assistance.'), 'error');
    watchdog('ibm_apim_activate_create_account_form_submit_handler', 'Invalid Token: Token did not contain a valid URL. token: %token', array(
      '%token' => serialize($activationObj)), WATCHDOG_NOTICE);
    drupal_goto();
  }
  $headers = array(
    'Content-Type: application/json',
    'Accept: application/json',
    "X-IBM-APIManagement-Context: " . $org . '.' . $env,
    'Authorization: Basic ' . base64_encode($tempUser . ':' . $tempPwd));

  // override username since we already know that
  $emailasuser = variable_get('ibm_apim_email_as_username', 1);
  if ($emailasuser == 1) {
    $data['username'] = $userid;
  }
  else {
    $data['username'] = $form_state['values']['name'];
  }

  $result = _ibm_apim_json_http_request($url, 'POST', $headers, json_encode($data));

  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    drupal_set_message(t('Your account was created successfully.'));

    $fields = array(
      'pass' => $pass,
      'email' => $userid,
      'mail' => $userid,
      'status' => 1);
    _ibm_apim_external_login_register($data['username'], $fields, true);
    global $user;
    $edit = array_intersect_key((array) $user, $form_state['values']);
    $account = user_save($user, $edit);
    if (module_exists('security_questions')) {
      security_questions_user_answers_save($user, $form_state['values']['questions']);
    }

    // forcibly log the user out since drupal will automatically log them in
    // and nothing will actually work until they have activated the account in the APIm backend
    // we also save a cookie here so that we can use this alongside the logout cookie to display a suitable message.
    module_load_include('pages.inc', 'user');
    user_cookie_save(array('ibmapiminvited' => 1));
    user_logout();
    drupal_goto('user/login');
  }
  else {
    watchdog('ibm_apim_activate_create_account_form_submit_handler', 'Error registering user %username. response: %response', array(
      '%username' => $userid,
      '%response' => serialize($result)), WATCHDOG_NOTICE);
    drupal_set_message(t('There was an error creating your account: %data', array(
      '%data' => serialize($result->data))), 'error');
  }
}

/**
 * Form to allow user to reset their password.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 *
 * @param
 *          string path
 *          The token path
 *
 * @return array The form
 */
function ibm_apim_forgotpwd_form($form, &$form_state, $path = NULL) {
  global $_GET;
  $resetPasswordToken = '';
  if (isset($_GET['resetPasswordToken'])) {
    $resetPasswordToken = $_GET['resetPasswordToken'];
  }
  else {
    drupal_set_message(t('Missing resetPasswordToken. Contact the system administrator for assistance.'), 'error');
    watchdog('ibm_apim_forgotpwd_form', 'Missing Token', array(), WATCHDOG_NOTICE);
    drupal_goto();
  }

  $form = array();
  $form['pass'] = array(
    '#type' => 'password_confirm',
    '#title' => t('Password'),
    '#size' => 25);
  $form['token'] = array('#type' => 'hidden', '#value' => $resetPasswordToken);

  // if password policy module active then load the current policy and enforce it
  if (module_exists('password_policy')) {
    // add password policy's JS to evaluate password strength
    drupal_add_js(drupal_get_path('module', 'password_policy') . '/password_policy.js');

    // get current username from token so can evaluate role in case affects password policy
    $activationObj = json_decode(base64_decode($resetPasswordToken));
    $userid = $activationObj->{'username'};
    if (isset($userid)) {
      $account = user_load_by_name($userid);
    }
    $roles = isset($account->roles) ? array_keys($account->roles) : array(
      DRUPAL_AUTHENTICATED_RID);
    $policy = _password_policy_load_active_policy($roles);

    $translate = array();
    if (!empty($policy['policy'])) {
      // Some policy constraints are active.
      password_policy_add_policy_js($policy, $account, $form);
      foreach ($policy['policy'] as $key => $value) {
        if ($value) {
          $translate['constraint_' . $key] = _password_policy_constraint_error($key, $value);
        }
      }
    }

    // Printing out the restrictions.
    if (variable_get('password_policy_show_restrictions', 1) && isset($translate) && (isset($form['pass-pass1']))) {
      $restriction_html = '<div id="account-pass-restrictions">' . theme('item_list', array(
        'items' => array_values($translate),
        'title' => t('Password Requirements'))) . '</div>';
      if (isset($form['account']) && is_array($form['account'])) {
        $form['account']['pass']['#prefix'] = $restriction_html;
      }
      else {
        $form['pass-pass1']['#prefix'] = $restriction_html;
      }
    }
  }
  else {
    // add user module JS to evaluate password strength
    drupal_add_js(drupal_get_path('module', 'user') . '/user.js');
  }

  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  $form['#submit'] = array('ibm_apim_forgotpwd_form_submit_handler');
  return $form;
}

/**
 * Submit handler for the forgot password form.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 */
function ibm_apim_forgotpwd_form_submit_handler($form, &$form_state) {
  global $user;
  $password = $form_state['values']['pass'];
  $resetPasswordToken = $form_state['values']['token'];

  if (empty($resetPasswordToken)) {
    drupal_set_message(t('Missing token. Contact the system administrator.'), 'error');
    watchdog('ibm_apim_forgotpwd_form_submit_handler', 'Missing Token', array(), WATCHDOG_NOTICE);
    drupal_goto();
    return;
  }
  if (empty($password)) {
    drupal_set_message(t('New password not set. Try again.'), 'error');
    watchdog('ibm_apim_forgotpwd_form_submit_handler', 'New password not set.', array(), WATCHDOG_NOTICE);
    drupal_goto('ibm_apim/forgotpwd/?resetPasswordToken=' . $resetPasswordToken);
    return;
  }

  // Make sure we have the session variables set
  _ibm_apim_check_and_get_config();
  $apim_session = &_ibm_apim_get_apim_session();

  // decode the base64 encoded JSON in the incoming URL
  $activationObj = json_decode(base64_decode($resetPasswordToken));
  // set global variables with the temp auth credentials from the incoming URL payload
  global $tempUser;
  global $tempPwd;
  $tempUser = $activationObj->{'authentication'}->{'username'};
  $tempPwd = $activationObj->{'authentication'}->{'password'};
  $org = $activationObj->{'providerContext'}->{'orgID'};
  $env = $activationObj->{'providerContext'}->{'environmentID'};
  $userid = $activationObj->{'username'};

  // When processing the one-time login link, we have to make sure that a user
  // isn't already logged in.
  if ($user->uid) {
    // The existing user is already logged in.
    if ($user->name == $userid) {
      drupal_set_message(t('You are logged in as %user. <a href="!user_edit">Change your password.</a>', array(
        '%user' => $user->name,
        '!user_edit' => url("user/$user->uid/edit"))));
    }
    // A different user is already logged in on the computer.
    else {
      $reset_link_account = user_load_by_name($userid);
      if (!empty($reset_link_account)) {
        drupal_set_message(t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href="!logout">logout</a> and try using the link again.', array(
          '%other_user' => $user->name,
          '%resetting_user' => $reset_link_account->name,
          '!logout' => url('user/logout'))));
      }
      else {
        // Invalid one-time link specifies an unknown user.
        drupal_set_message(t('The one-time login link you clicked is invalid.'));
        watchdog('ibm_apim_forgotpwd_form_submit_handler', 'Invalid User: Did not reference a valid user. user: %user', array(
          '%user' => serialize($userid)), WATCHDOG_NOTICE);
      }
    }
    drupal_goto();
  }

  // verify the temp userid and password are valid
  $host_pieces = _ibm_apim_parse_apim_host();
  $url = $host_pieces['url'] . '/v1/portal/users/' . drupal_encode_path($userid) . '/reset-password';
  $headers = array(
    'Content-Type: application/json',
    'Accept: application/json',
    "X-IBM-APIManagement-Context: " . $org . '.' . $env,
    'Authorization: Basic ' . base64_encode($tempUser . ':' . $tempPwd));

  $data = array("password" => $password);

  $result = _ibm_apim_json_http_request($url, 'POST', $headers, json_encode($data));

  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    // log the user in
    global $user;
    $user = user_load_by_name($userid);

    // update user password
    $user->password = $password;

    // save user
    user_save((object) array('uid' => $user->uid), (array) $user);

    // update sesson auth token
    $apim_session = &_ibm_apim_get_apim_session();
    $apim_session['auth'] = base64_encode($userid . ':' . $password);

    $login_array = array('name' => $userid);
    user_login_finalize($login_array);

    // redirect to the front page
    drupal_set_message(t('Password successfully updated.'));
    drupal_goto();
  }
  else {
    // there was problem with the entered passwords, so stay on the same page
    if (isset($result->data['errors'])) {
      // show the errors that the server has returned
      foreach ($result->data['errors'] as $error_struc) {
        foreach ($error_struc as $key => $error) {
          drupal_set_message($error, 'error');
        }
      }
    }
    else {
      // Assume it is a token error and redirect to the user/password page.
      drupal_set_message(t('Invalid authentication token2. Contact the system administrator.'), 'error');
      watchdog('ibm_apim_forgotpwd_form_submit_handler', 'Invalid auth token. response: %result', array(
        '%result' => serialize($result)), WATCHDOG_NOTICE);
      drupal_goto('user/password');
    }
  }
}

/**
 * Callback for serving up the Swagger 2 JSON
 */
function _ibm_apim_swaggerjson_callback($apiid, $apiversion, $type = 'rest') {
  // handle incoming requests for Swagger JSON by converting the output from the APIm server
  // into the correct SWAGGER 2 JSON
  $useproxy = variable_get('ibm_apim_use_swagger_proxy', 0);
  if (isset($apiid) && isset($apiversion)) {
    if ($useproxy == 1 || $type == 'soap') {
      if (module_exists('api')) {
        $api = api_details_contents($apiid, $apiversion);
        if (isset($api)) {
          $swaggerjson = _ibm_apim_generate_json_per_api($api);
          if (isset($swaggerjson)) {
            drupal_add_http_header('Content-Type', 'application/vnd.ibm-apim.swagger2+yaml');
            print yaml_emit($swaggerjson);
          }
          else {
            return FALSE;
          }
        }
        else {
          return FALSE;
        }
      }
      else {
        return FALSE;
      }
    }
    else {
      // REST API
      // this method returns directly
      ibm_apim_get_api_swagger($apiid, $apiversion);
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Gets all of the members of the specified developer org
 *
 * @param
 *          string developer_org
 *          The a API ID
 *
 * @return array An array containing details for the members of the org and their roles
 */
function _ibm_apim_get_members($developer_org) {
  $url = '/v1/portal/orgs/' . $developer_org . '/members';
  $returnValue = NULL;
  $result = ibm_apim_call($url);
  if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
    $data = $result->data;
  }
  if (isset($data)) {
    $returnValue = array();
    foreach ($data as $member_record) {
      $temparray = array();
      $temparray['id'] = $member_record['id'];
      $temparray['name'] = $member_record['name'];
      $temparray['status'] = $member_record['status'];
      $temparray['url'] = $member_record['url'];
      if (isset($member_record['roleUrls'])) {
        $member_roles = array();
        $member_displayroles = array();
        foreach ($member_record['roleUrls'] as $roleurl) {
          $roleresult = ibm_apim_call($roleurl);
          if (isset($roleresult) && isset($roleresult->data) && !isset($roleresult->data['errors'])) {
            $member_roles[] = $roleresult->data['name'];
            $member_displayroles[] = $roleresult->data['displayName'];
          }
        }
        $temparray['roles'] = implode(", ", $member_roles);
        $temparray['displayroles'] = implode(", ", $member_displayroles);
      }

      $returnValue[] = $temparray;
    }
  }
  return $returnValue;
}

/**
 * Gets all of the roles in the specified developer org
 *
 * @param
 *          string developer_org
 *          The a API ID
 *
 * @return array An array containing details for the roles
 */
function _ibm_apim_get_roles($developer_org) {
  $url = '/v1/portal/orgs/' . $developer_org . '/roles';
  $returnValue = NULL;
  $result = ibm_apim_call($url);
  if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
    $returnValue = $result->data;
  }
  return $returnValue;
}

/**
 * Form to delete a user from an org
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 */
function _ibm_apim_delete_user_from_org($form, &$form_state) {
  $url = '/v1/portal/orgs/' . $form_state['values']['org'] . '/members/' . $form_state['values']['id'];
  $result = ibm_apim_delete($url);
  if (isset($result)) {
    drupal_set_message(t('User removed successfully.'));
  }
  $form_state['redirect'] = 'myorg';
}

/**
 * Form to resend a user's invite email from the IBM APIm system.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 */
function _ibm_apim_resend_user_invite_from_org($form, &$form_state) {
  watchdog('_ibm_apim_resend_user_invite_from_org', 'resend invite to %id', array(
    '%id' => $form_state['values']['id']), WATCHDOG_NOTICE);
  $apim_session = &_ibm_apim_get_apim_session();
  $url = '/v1/users/' . $form_state['values']['id'] . '/resendInvite?' . 'idpOrganization=' . $apim_session['org'] . '&idpEnvironment=' . $apim_session['env'] . '&consumerOrg=' . $form_state['values']['org'];
  $result = ibm_apim_post($url, '');
  if (isset($result)) {
    drupal_set_message(t('Invite resent successfully.'));
  }

  $form_state['redirect'] = 'myorg';
}

/**
 * Determine if the current user is the owner of the current developer org
 *
 * @return boolean TRUE if the user is the owner of the current developer org, FALSE otherwise.
 */
function _ibm_apim_user_is_org_owner() {
  global $user;
  $apim_session = &_ibm_apim_get_apim_session();
  $org = ibm_apim_get_current_developer_org();
  if (isset($org) && isset($user->data)) {
    $url = '/v1/portal/orgs/' . $org['id'] . '/owner';
    $result = ibm_apim_call($url);
    if (isset($result) && isset($result->data) && !isset($result->data['errors']) && isset($apim_session['memberid'])) {
      if ($result->data['id'] === $apim_session['memberid']) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Determine if the current user is a developer in the current developer org
 * This method uses a cache to avoid hitting the server too hard
 *
 * @return boolean TRUE if the user is in the develeoper role in the current developer org, FALSE otherwise.
 */
function ibm_apim_check_is_developer() {
  $apim_session = &_ibm_apim_get_apim_session();
  if (!isset($apim_session['isdeveloper'])) {
    $apim_session['isdeveloper'] = _ibm_apim_user_is_developer();
  }
  return $apim_session['isdeveloper'];
}

/**
 * Determine if the current user is a developer in the current developer org
 *
 * @return boolean TRUE if the user is in the develeoper role in the current developer org, FALSE otherwise.
 */
function _ibm_apim_user_is_developer() {
  global $user;
  $apim_session = &_ibm_apim_get_apim_session();
  $org = ibm_apim_get_current_developer_org();
  if (isset($org) && isset($user->data)) {
    $url = '/v1/portal/orgs/' . $org['id'] . '/members';
    $result = ibm_apim_call($url);
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      foreach ($result->data as $data) {
        if (isset($data['id']) && $data['id'] === $apim_session['memberid'] && isset($data['roleUrls'])) {
          foreach ($data['roleUrls'] as $roleurl) {
            $roleresult = ibm_apim_call($roleurl);
            if (isset($roleresult) && isset($roleresult->data) && !isset($roleresult->data['errors'])) {
              if ($roleresult->data['name'] == "developer" || $roleresult->data['name'] == "owner") {
                return TRUE;
              }
            }
          }
        }
      }
    }
  }
  return FALSE;
}

/**
 * Page callback to the bookmarks for the current user
 * only really needed here since can't put the uid in a path
 */
function _ibm_apim_mybookmarks() {
  global $user;
  if (isset($user->uid)) {
    drupal_goto('user/' . $user->uid . '/bookmarks');
  }
}

/**
 * Page callback to display the members of the current developer org
 */
function _ibm_apim_myorg_page() {
  drupal_add_library('system', 'ui.accordion');
  drupal_add_js('jQuery(document).ready(function(){
      jQuery("div#accordion").accordion({
        header: "> div > h3",
        collapsible: true,
        active: false,
        heightStyle: "content",
      });
      jQuery(".myorgEditLink").on("click", null, null, function(event) {
        window.location.href = jQuery(this).attr("href");
        event.preventDefault();
      });
    });', 'inline');

  $markup = '';

  $image = theme('image', array(
    'path' => file_create_url(drupal_get_path('module', 'ibm_apim') . '/images/user_add.png'),
    'width' => '20',
    'height' => '20',
    'title' => 'Add a user',
    'alt' => 'Invite user'));

  $_ibm_apim_invite_user_form = drupal_get_form('_ibm_apim_invite_user_form');

  $org = ibm_apim_get_current_developer_org();
  $markup .= '<div class="myorgLinks"><div class="myorgEditLink">' . l(t('Edit Organization'), 'myorg/edit/' . $org['id']) . '</div>';
  $disallow_invitations = variable_get('ibm_apim_disallow_invitations', 0);
  if ($disallow_invitations != 1) {
    $markup .= '<div id="accordion"><div class="myorgAddUserLink"><h3>' . t('Add a user') . $image .'</h3>';
    $markup .= '<div class="portalApi animateMaxHeight">'. drupal_render($_ibm_apim_invite_user_form) . '</div></div></div>';
  }
  $markup .= '<div class="clearBoth" id="ajax-response-goes-here"></div></div>';

  $developer_org = ibm_apim_get_current_developer_org();
  if (isset($developer_org)) {
    $members = _ibm_apim_get_members($developer_org['id']);
    if ($members) {
      foreach ($members as $member) {
        $user_form = drupal_get_form('_ibm_apim_myorg_user_form_' . $member['id'], $member, $developer_org['id']);
        $markup .= drupal_render($user_form);
      }
    }
    drupal_set_title($developer_org['name']);
  }
  return array('#markup' => $markup);
}

/**
 * AJAX callback to add the invite user form to the organization page.
 *
 * @param
 *          string ajax
 *          Needed by Drupal's AJAX system
 */
function _ibm_apim_myorg_ajax_link_callback($ajax) {
  if ($ajax == 'ajax') {
    $_ibm_apim_invite_user_form = drupal_get_form('_ibm_apim_invite_user_form');
    $markup = drupal_render($_ibm_apim_invite_user_form);

    $commands = array();
    // Ajax command to replace the #ajax-response-goes-here element with the form.
    $commands[] = ajax_command_replace('#ajax-response-goes-here', '<div class="clearBoth" id="ajax-response-goes-here">' . $markup . '</div>');
    // Add a visual "changed" marker.
    $commands[] = ajax_command_changed('#ajax-response-goes-here');
    // Menu 'page callback' and #ajax['callback'] functions return render
    // arrays. Render array wrapper for the AJAX commands array.
    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
  }
  else {
    return array('#markup' => '');
  }
}

/**
 * Form to allow user to edit their organization details.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 *
 * @param
 *          string orgId
 *          The organization ID to edit
 *
 * @return array The form
 */
function _ibm_apim_edit_myorg($form, &$form_state, $orgId) {
  $org_data = array();
  $org_data['name'] = '';
  $org = ibm_apim_get_current_developer_org();
  $developerOrg = $org['id'];
  $result = ibm_apim_call('/v1/portal/orgs/' . $orgId);
  if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
    $org_data = $result->data;
  }
  $form = array();
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => 'Organization name',
    '#size' => 25,
    '#maxlength' => 50,
    '#required' => TRUE,
    '#default_value' => $org_data['name']);
  $form['orgid'] = array('#type' => 'hidden', '#value' => $orgId);

  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  $form['#submit'] = array('_ibm_apim_edit_myorg_submit_handler');
  $form['#attributes']['class'] = 'reg-form';
  return $form;
}

/**
 * Submit handler for the organization edit form.
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 */
function _ibm_apim_edit_myorg_submit_handler($form, &$form_state) {
  $name = $form_state['values']['name'];
  $orgid = $form_state['values']['orgid'];

  if (empty($name)) {
    drupal_set_message(t('An organization name is required.', 'error'));
    watchdog('_ibm_apim_edit_myorg_submit_handler', 'Missing organization name', array(), WATCHDOG_NOTICE);
  }

  // update APIm
  $result = ibm_apim_update_org_name($orgid, $name);
  if (isset($result) && ($result->code == 200 && $result->code < 300)) {
    drupal_set_message(t('Organization name updated.'));
    $apim_session = &_ibm_apim_get_apim_session();
    unset($apim_session['developer_organizations']);
    // clear block cache
    cache_clear_all(NULL, 'cache_block');
    _ibm_apim_load_developer_orgs();
    _ibm_apim_set_current_developer_org($orgid);
  }
  $form_state['redirect'] = 'myorg/';
}

/**
 * Form to invite a user to the current developer org
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 */
function _ibm_apim_invite_user_form($form, $form_state) {
  $org = ibm_apim_get_current_developer_org();
  $form['invite_user_fieldset'] = array('#type' => 'fieldset', '#attributes' => array('class' => array('container-inline')));
  $form['invite_user_fieldset']['developer_org'] = array('#type' => 'hidden', '#value' => $org['id']);
  $emailasuser = variable_get('ibm_apim_email_as_username', 1);
  $inviteviaemail = variable_get('ibm_apim_inviteViaEmailOnly', 0);
  if ($emailasuser == 1) {
    $form['invite_user_fieldset']['new_email'] = array(
      '#type' => 'textfield',
      '#title' => t('New user\'s e-mail address'),
      '#required' => TRUE);
  }
  elseif ($inviteviaemail == 1) {
    $form['invite_user_fieldset']['new_email'] = array(
      '#type' => 'textfield',
      '#title' => t('New user\'s e-mail address'),
      '#required' => TRUE);
  }
  else {
    $form['invite_user_fieldset']['new_email'] = array('#type' => 'textfield', '#title' => t('New user\'s username'), '#required' => TRUE);
  }

  $roles = _ibm_apim_get_roles($org['id']);
  if (isset($roles) && count($roles) > 1) {
    $roles_array = array();
    foreach ($roles as $role) {
      $roles_array[$role['name']] = $role['displayName'];
    }

    $form['invite_user_fieldset']['role'] = array(
      '#type' => 'radios',
      '#title' => t('Role'),
      '#default_value' => 'developer',
      '#options' => $roles_array,
      '#description' => t('Select which role the new user will have in your organization.'));
  }
  $form['invite_user_fieldset']['invite_button'] = array(
      '#value' => t('Invite new user'),
      '#type' => 'submit',
      '#name' => 'invite_user',
      '#submit' => array('_ibm_apim_invite_user_form_submit_handler'));
  return $form;
}

/**
 * Submit handler to invite a user to the current org
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 */
function _ibm_apim_invite_user_form_submit_handler($form, &$form_state) {
  $org = ibm_apim_get_current_developer_org();
  $developerOrgs = $org['id'];
  $url = '/v1/portal/orgs/' . $developerOrgs . '/members';
  $name = $form_state['values']['new_email'];
  if (isset($name)) {
    $result = ibm_apim_call($url);
    if (isset($result) && $result->code >= 200 && $result->code < 300) {
      $data = array("emailURLSuffix" => "?q=ibm_apim/activate/x", "name" => $name);
      if (isset($form_state['values']['role'])) {
        $data["roles"] = array($form_state['values']['role']);
      }
      $add_member_result = ibm_apim_post($url, json_encode($data));
      if (isset($add_member_result) && $add_member_result->code >= 200 && $add_member_result->code < 300) {
        drupal_set_message(t('Invite sent successfully.'));
      }
    }
  } else {
    drupal_set_message(t('No user specified.'), 'error');
  }
  $form_state['redirect'] = 'myorg';
}

/**
 * Form to display details about a user
 *
 * @param
 *          form
 *          The form
 *
 * @param
 *          form_state
 *          The form state
 *
 * @param
 *          string user
 *          The user id to display
 *
 * @param
 *          string developer_org ID
 *          The developer org for the user
 */
function _ibm_apim_myorg_user_form($form, &$form_state, $otheruser, $developer_org) {
  global $user;
  $fieldset_title = $otheruser['name'];
  $form['user_fieldset_' . $otheruser['id']] = array(
    '#title' => $fieldset_title,
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE);

  $form['user_fieldset_' . $otheruser['id']]['id'] = array(
    '#type' => 'hidden',
    '#value' => $otheruser['id']);
  $form['user_fieldset_' . $otheruser['id']]['org'] = array(
    '#type' => 'hidden',
    '#value' => $developer_org);

  $form['user_fieldset_' . $otheruser['id']]['status'] = array(
    '#markup' => t('Status:') . ' ' . $otheruser['status'] . '<br/><br/>');

  $form['user_fieldset_' . $otheruser['id']]['displayroles'] = array(
    '#markup' => t('Role:') . ' ' . $otheruser['displayroles'] . '<br/><br/>');

  // can't remove yourself since not allowed to remove the owner of an org
  // and you'd only be seeing this form if you are the org owner
  if ($otheruser['name'] != $user->name) {
    $form['user_fieldset_' . $otheruser['id']]['delete_user'] = array(
      '#value' => t('Remove user'),
      '#type' => 'submit',
      '#name' => 'remove_user',
      '#submit' => array('_ibm_apim_delete_user_from_org'));
  }
  if ($otheruser['status'] == 'pending') {
    $form['user_fieldset_' . $otheruser['id']]['resend_invite'] = array(
      '#value' => t('Resend invite'),
      '#type' => 'submit',
      '#name' => 'resend_invite',
      '#submit' => array('_ibm_apim_resend_user_invite_from_org'));
  }
  return $form;
}

/**
 * Implementation of hook_form_node_form_alter().
 */
function ibm_apim_form_node_form_alter(&$form, &$form_state) {
  // Add linkit libraries to node edit pages.
  // Since paragraphs are added through ajax, not all linkit libraries are
  // loaded when needed. We fix this by adding the linkit libraries here.
  if (module_exists('linkit')) {
    // Add the linkit library for fields.
    drupal_add_library('linkit', 'field');
    // Add the linkit library for the editor.
    drupal_add_library('linkit', 'tinymce');
  }
}

/**
 * Implementation of hook_forms().
 * Catching the _ibm_apim_myorg_user_form_<userid> to
 * return _ibm_apim_myorg_user_form, this is required to have a unique form id on the page
 * for each member of an organization.
 */
function ibm_apim_forms($form_id, $args) {
  $forms = array();
  if (strpos($form_id, '_ibm_apim_myorg_user_form_') === 0) {
    $forms[$form_id] = array('callback' => '_ibm_apim_myorg_user_form');
  }
  return $forms;
}

/**
 * Generates the HTML for the dropdown organization selection menu
 */
function ibm_apim_select_developer_menu() {
  $result = _ibm_apim_load_developer_orgs();
  $markup = '';
  if (isset($result)) {
    if (count($result) == 1) {
      _ibm_apim_set_current_developer_org($result[0]['id']);
      $markup .= '<div class="elipsis-names singleOrg" title="' . t("Current organization name: ") . check_plain($result[0]['name']) . '">' . check_plain($result[0]['name']) . '</div>';
    }
    elseif (count($result) > 1) {
      $selected = ibm_apim_get_current_developer_org();
      if (!isset($selected)) {
        $selected = _ibm_apim_set_current_developer_org($result[0]['id']);
      }
      $selected_name = check_plain($selected['name']);
      $selected = check_plain($selected['id']);
      $markup .= '<ul class="dropitmenu orgmenu"><li><a href="#"><div class="elipsis-names">' . $selected_name . '</div> <span class="dropit-icon ui-icon-triangle-1-s"></span></a>';
      $markup .= '<ul id="dropdown-menu" class="dropdown-menu">';
      foreach ($result as $developer_org) {
        $markup .= '<li class="elipsis-names" title="' . check_plain($developer_org['name']) . '">' . l(check_plain($developer_org['name']), 'ibm_apim/org/' . check_plain($developer_org['id']), array(
          'html' => TRUE,
          'attributes' => array('class' => array('elipsis-names')))) . '</li>';
      }
      $markup .= '</ul></li></ul>';
    }
  }
  return $markup;
}

/**
 * A function to update the organization name.
 */
function ibm_apim_update_org_name($orgid = NULL, $orgname = NULL) {
  global $user;
  $result = NULL;
  $found = false;
  if (isset($orgid) && isset($orgname)) {
    $apim_session = &_ibm_apim_get_apim_session();
    $newdata = array('name' => $orgname);
    $developer_org_url = '/orgs/' . $orgid;
    $url = '/v1/portal' . $developer_org_url;
    $result = ibm_apim_put($url, json_encode($newdata));
  }
  return $result;
}

/**
 * Generates the HTML for the notification count block
 */
function ibm_apim_notification_count_block() {
  $result = _ibm_apim_get_notification_count();
  $markup = '';
  $class = '';
  if (isset($result)) {
    if (!isset($result['unreadCount'])) {
      $result['unreadCount'] = 0;
    }
    drupal_add_library('system', 'ui.dialog');
    drupal_add_js('jQuery(document).ready(function(){
                var notBox = document.getElementById("notificationBox");
                notBox.addEventListener("click", function() {
                  jQuery("#notificationBox").text("0");
                  jQuery("#notificationBox").addClass("greyBox");
                }, false);
        });', 'inline');
    if ($result['unreadCount'] == 0) {
      $class = 'greyBox';
    }
    $markup .= '<div class="notification"><button type="button" id="planSignupButton" data-href="?q=ibm_apim/notifications" data-title="Notifications" data-name="content" data-rel="width:500;height:550;resizable:true;position:[center,60]" class="simple-dialog my-link-class"><div id="notificationBox" class="notificationBox ' . $class . '">' . check_plain($result['unreadCount']) . '</div></button></div>';
  }
  return $markup;
}

/**
 * A function to retrieve the notification count.
 */
function _ibm_apim_get_notification_count() {
  $returnValue = NULL;
  $apim_session = &_ibm_apim_get_apim_session();

  $org = ibm_apim_get_current_developer_org();
  $developerOrgs = $org['id'];
  if (isset($developerOrgs)) {
    $developer_org_url = '/orgs/' . $developerOrgs;
    $url = '/v1/portal' . $developer_org_url . '/notifications/count';
    $result = ibm_apim_call($url);
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $returnValue = $result->data;
    }
  }
  return $returnValue;
}

/**
 * A function to retrieve the notification messages.
 */
function _ibm_apim_get_notifications() {
  $returnValue = NULL;
  $apim_session = &_ibm_apim_get_apim_session();

  $org = ibm_apim_get_current_developer_org();
  $developerOrgs = $org['id'];
  if (isset($developerOrgs)) {
    $developer_org_url = '/orgs/' . $developerOrgs;
    $url = '/v1/portal' . $developer_org_url . '/notifications';
    $result = ibm_apim_call($url);
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $returnValue = $result->data;
    }
  }
  return $returnValue;
}

/**
 * Callback to display notification messages
 */
function _ibm_apim_notifications_callback() {
  $output = '';
  $result = _ibm_apim_get_notifications();
  if ($result) {
    $output = '<div class="activityView"><div class="activityViewInner">';
    foreach ($result as $message) {
      $class = '';
      $msgoutput = '<div class="viewActivity">';
      $msgoutput .= '<div class="viewActivityInner"><div class="paddingHorizontal">';
      switch ($message['type']) {
        case "alert" :
          $class = "ALERT";
          break;
        case "event" :
          $class = "EVENT";
          break;
        case "error" :
          $class = "ERROR";
          break;
        case "success" :
          $class = "SUCCESS";
          break;
        default :
          $class = "EVENT";
          break;
      }
      $msgoutput .= '<div class="statusIcon notificationStatusIconAligment ' . $class . '"></div>';
      $msgoutput .= '<div class="notificationMessageAligment">' . check_plain($message['message']) . '</div></div></div>';
      $msgoutput .= '<div class="clearBoth"></div><div class="subText"><div class="paddingHorizontal">';
      $updateddate = new DateTime($message['datetime']);
      $msgoutput .= '<div>' . $updateddate->format('Y-m-d H:i:s') . '</div></div></div><div class="activityBorder"></div></div>';
      $output .= $msgoutput;
    }
    $output .= '</div></div>';
  }
  else {
    $output .= '<div class="activityView noNotifications"><div class="activityViewInner">' . t("There are no notifications.") . '</div></div>';
  }
  return $output;
}

/**
 * A function to retrieve the user settings.
 */
function ibm_apim_get_user_settings() {
  global $user;
  $returnValue = NULL;
  $apim_session = &_ibm_apim_get_apim_session();

  $org = ibm_apim_get_current_developer_org();
  $developerOrgs = $org['id'];
  if (isset($developerOrgs)) {
    $developer_org_url = '/orgs/' . $developerOrgs;
    $url = '/v1/portal' . $developer_org_url . '/members/' . $apim_session['memberid'] . '/settings';
    $result = ibm_apim_call($url);
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $returnValue = $result->data;
    }
  }
  return $returnValue;
}

/**
 * A function to retrieve the notification settings for a given app.
 */
function ibm_apim_get_app_notification_settings($appID = NULL) {
  $returnValue = NULL;
  $currentsettings = ibm_apim_get_user_settings();
  if (isset($appID) && isset($currentsettings) && isset($currentsettings['appNotificationSettings'])) {
    foreach ($currentsettings['appNotificationSettings'] as $setting) {
      // get appID from the appURL
      $settingid = _ibm_apim_get_id_from_appurl($setting['appURL']);
      if ($settingid == $appID) {
        $returnValue = $setting;
      }
    }
  }
  return $returnValue;
}

/**
 * A function to update the user settings.
 */
function ibm_apim_update_user_settings($appURL = NULL, $newsettings = NULL) {
  global $user;
  $returnValue = NULL;
  $found = false;
  if (isset($appURL) && isset($newsettings)) {
    $apim_session = &_ibm_apim_get_apim_session();
    $org = ibm_apim_get_current_developer_org();
    $developerOrgs = $org['id'];
    if (isset($developerOrgs)) {
      // get current settings
      $currentsettings = ibm_apim_get_user_settings();
      $mergedsettings = array();
      if (isset($currentsettings) && isset($currentsettings['appNotificationSettings'])) {
        foreach ($currentsettings['appNotificationSettings'] as $setting) {
          // get appID from the appURLs
          if (isset($setting['appURL'])) {
            $settingid = _ibm_apim_get_id_from_appurl($setting['appURL']);
            $desiredid = _ibm_apim_get_id_from_appurl($appURL);
            if ($settingid == $desiredid) {
              // use new values
              $mergedsettings[] = $newsettings;
              $found = true;
            }
            else {
              $mergedsettings[] = $setting;
            }
          }
          else {
            $mergedsettings[] = $setting;
          }
        }
      }
      if ($found == false) {
        $mergedsettings[] = $newsettings;
      }
      $newsettingwrapper = array();
      $newsettingwrapper['appNotificationSettings'] = $mergedsettings;

      $developer_org_url = '/orgs/' . $developerOrgs;
      $url = '/v1/portal' . $developer_org_url . '/members/' . $apim_session['memberid'] . '/settings';

      $result = ibm_apim_put($url, json_encode($newsettingwrapper));
      if (isset($result) && ($result->code == 200)) {
        drupal_set_message(t('Notification settings updated.'));
      }
    }
  }
  return $returnValue;
}

/**
 * Callback to change the current organization and then redirects to the front page
 */
function ibm_apim_developer_org_callback($orgId) {
  // check the specified org ID is actually one we're a member of
  $result = _ibm_apim_load_developer_orgs();
  if ($result) {
    foreach ($result as $org) {
      if ($org['id'] == $orgId) {
        $selected = _ibm_apim_set_current_developer_org($orgId);
      }
    }
  }
  drupal_goto();
}

/**
 * Helper function to convert IBM APIm representation of an authorization to
 * a user friendly display value.
 *
 * @param
 *          string ident
 *          The IBM APIm name for authorization
 *
 * @return string A user friendly string or the input string if it has no conversion.
 */
function ibm_apim_get_ident_label($ident) {
  $name_map = array(
    'clientIDAndSecret' => t('Client ID and Secret'),
    'clientID' => t('Client ID'),
    'none' => t('None'));
  return array_key_exists($ident, $name_map) ? $name_map[$ident] : $ident;
}

/**
 * Helper function to convert IBM APIm representation of an authorization to
 * a user friendly display explanation text.
 *
 * @param
 *          string ident
 *          The IBM APIm name for authorization
 *
 * @return string A user friendly string or the input string if it has no conversion.
 */
function ibm_apim_get_ident_explanation($ident) {
  $name_map = array(
    'clientIDAndSecret' => t('You must always provide your application\'s client ID and Secret in order to access this API'),
    'clientID' => t('You must always provide your application\'s client ID in order to access this API'),
    'none' => t('No authorization is needed to access this API'));
  return array_key_exists($ident, $name_map) ? $name_map[$ident] : $ident;
}

/**
 * Helper function to convert IBM APIm representation of an authentication to
 * a user friendly display value.
 *
 * @param
 *          string auth
 *          The IBM APIm name for authentication
 *
 * @return string A user friendly string or the input string if it has no conversion.
 */
function ibm_apim_get_auth_label($auth) {
  $auth_map = array(
    'basic' => t('Basic'),
    'oauth' => t('OAuth'),
    'none' => t('None'));
  return array_key_exists($auth, $auth_map) ? $auth_map[$auth] : $auth;
}

/*
 * Toggle last name field visibility
 */
function _ibm_apim_hide_last_name_field() {
  _ibm_apim_toggle_field_display('last_name', 'hidden');
}

/*
 * Toggle last name field visibility
 */
function _ibm_apim_show_last_name_field() {
  _ibm_apim_toggle_field_display('last_name', 'text_default');
}

/*
 * Toggle first name field visibility
 */
function _ibm_apim_hide_first_name_field() {
  _ibm_apim_toggle_field_display('first_name', 'hidden');
}

/*
 * Toggle first name field visibility
 */
function _ibm_apim_show_first_name_field() {
  _ibm_apim_toggle_field_display('first_name', 'text_default');
}

/*
 * Toggle dev org field visibility
 */
function _ibm_apim_hide_developer_organization_field() {
  _ibm_apim_toggle_field_display('developer_organization', 'hidden');
}

/*
 * Toggle dev org field visibility
 */
function _ibm_apim_show_developer_organization_field() {
  _ibm_apim_toggle_field_display('developer_organization', 'text_default');
}

/*
 * Toggle phone field visibility
 */
function _ibm_apim_hide_phone_field() {
  _ibm_apim_toggle_field_display('phone', 'hidden');
}

/*
 * Toggle phone field visibility
 */
function _ibm_apim_show_phone_field() {
  _ibm_apim_toggle_field_display('phone', 'text_default');
}

/*
 * Toggle company name field visibility
 */
function _ibm_apim_hide_company_field() {
  _ibm_apim_toggle_field_display('company', 'hidden');
}

/*
 * Toggle company name field visibility
 */
function _ibm_apim_show_company_field() {
  _ibm_apim_toggle_field_display('company', 'text_default');
}

/*
 * Toggle address field visibility
 */
function _ibm_apim_hide_address_field() {
  _ibm_apim_toggle_field_display('address', 'hidden');
}

/*
 * Toggle address field visibility
 */
function _ibm_apim_show_address_field() {
  _ibm_apim_toggle_field_display('address', 'addressfield_default');
}

/*
 * Utility method to toggle whether a given field is visible or not on user registration form
 */
function _ibm_apim_toggle_field_display($fieldname, $display) {
  // Fetch an instance info array.
  $instance_info = field_info_instance('user', 'field_' . $fieldname, 'user');
  // Change a single property in the instance definition.
  $instance_info['display']['default']['type'] = $display;
  if ($display == "hidden") {
    $instance_info['settings']['user_register_form'] = 0;
  }
  else {
    $instance_info['settings']['user_register_form'] = 1;
  }
  // Write the changed definition back.
  field_update_instance($instance_info);
}

/*
 * Toggle whether a given field is required or not ($required = 1 | 0)
 */
function _ibm_apim_toggle_field_required($fieldname, $required) {
  // Fetch an instance info array.
  $instance_info = field_info_instance('user', $fieldname, 'user');
  // Change a single property in the instance definition.
  $instance_info['required'] = $required;
  // if address field then also toggle whether the individual address fields are required
  if ($fieldname == "field_address") {
    if ($required == 1) {
      unset($instance_info['widget']['settings']['format_handlers']['address-optional']);
    }
    else {
      $instance_info['widget']['settings']['format_handlers']['address-optional'] = "address-optional";
    }
  }
  // Write the changed definition back.
  field_update_instance($instance_info);
}

/*
 * Custom function to fool the user_register_validate() function.
 * Only used for readonly IDP registries.
 * Users might have email addresses, but they will be populated from LDAP and not provided by the user
 * who will just provide a username.
 */
function ibm_apim_user_register_validate($form, &$form_state) {
  $numb = _ibm_apim_random_num();
  $nomail = $numb . 'nobody.null@nowhere.example.com';
  if (!isset($form_state['values']['mail'])) { // Not null. Then proceed.
    $form_state['values']['mail'] = $nomail;
  }

  // call the original validation
  user_register_validate($form, $form_state);
  if ($form_state['values']['mail'] == $nomail) {
    $form_state['values']['mail'] = ''; // stuff empty back again. Fool the user_register_validate().
  }
}

/*
 * Utility function to handle different combinations of scheme, host and port in the apim host field
 */
function _ibm_apim_parse_apim_host() {
  $returnValue = null;
  $variable = variable_get('ibm_apim_host');
  if (isset($variable)) {
    // only use parse_url if scheme is set
    $pieces = explode(":", $variable);
    $pieces_c = count($pieces);
    if (count($pieces) > 1) {
      // this will only work is scheme is set
      try {
        $host = parse_url($variable, PHP_URL_HOST);
        $scheme = parse_url($variable, PHP_URL_SCHEME);
        $port = (int) parse_url($variable, PHP_URL_PORT);
      }
      catch (Exception $e) {
      }
    }
    if (!isset($host)) {
      // check if we have custom port but no scheme
      // grab last element which must be the port
      if ($pieces_c > 1) {
        $last = array_pop($pieces);
      }
      if ($pieces_c > 1 && (is_int($last) || ctype_digit($last))) {
        $host = implode(':', $pieces);
        $port = (int) $last;
      }
      else {
        $host = $variable;
      }
    }
    if (!isset($port) || $port == 0) {
      $port = 443;
    }
    if (!isset($scheme) || ($scheme != 'https' && $scheme != 'http')) {
      $scheme = 'https';
    }
    $returnValue = array(
      'host' => $host,
      'port' => $port,
      'scheme' => $scheme,
      'url' => $scheme . '://' . $host . ':' . $port);
  }
  return $returnValue;
}

/**
 * Callback to handle redirecting to the right SAML endpoint
 */
function ibm_apim_do_saml_login() {
  global $_GET;
  global $base_url;
  $endpoint = _ibm_apim_get_saml_endpoint();
  $currentpath = str_replace($base_url . '/', '', $_SERVER['HTTP_REFERER']);
  if (isset($currentpath) && !empty($currentpath) && strpos($currentpath, "http") === false) {
    $endpoint .= '?currentpath=' . $currentpath;
  }
  drupal_goto($endpoint, array('external' => TRUE));
}

/**
 * Custom Function to return the SAML login endpoint
 */
function _ibm_apim_get_saml_endpoint() {
  $endpoint = null;
  $envname = null;
  $envfile = "/etc/ibm/metadata.env";
  if (file_exists($envfile)) {
    $env_array = parse_ini_file($envfile);
    $envname = trim($env_array['export environment']);
    $advPortalConfigIni = '/etc/ibm/apimConfigFiles/' . $envname . '/advPortalConfiguration.ini';
    if (file_exists($advPortalConfigIni)) {
      $advPortalConfig_array = parse_ini_file($advPortalConfigIni);
      $endpoint_host = trim($advPortalConfig_array['devportal_lb_dns_name']);
    }
  }
  if (isset($endpoint_host) && !(empty($endpoint_host))) {
    $endpoint = 'https://' . $endpoint_host . '/saml/signon';
  }
  else {
    // fallback on apim hostname
    $apim_session = &_ibm_apim_get_apim_session();
    $host_pieces = _ibm_apim_parse_apim_host();
    $endpoint = $host_pieces['url'] . '/saml/signon';
  }
  return $endpoint;
}

/**
 * Custom Function to return random numbers.
 */
function _ibm_apim_random_num($n = 5) {
  return rand(0, pow(10, $n));
}

/**
 * A function to retrieve the api in swagger.
 */
function ibm_apim_get_api_swagger($apiid, $apiversion) {
  global $user;
  $returnValue = NULL;
  $apim_session = &_ibm_apim_get_apim_session();

  $org = ibm_apim_get_current_developer_org();
  $developerOrgs = $org['id'];
  if (isset($developerOrgs)) {
    $developer_org_url = '/orgs/' . $developerOrgs;
  }
  else {
    $developer_org_url = '';
  }

  $host_pieces = _ibm_apim_parse_apim_host();
  $url = $host_pieces['url'] . '/v1/portal' . $developer_org_url . '/apis/' . $apiid . '/v' . $apiversion;

  // update the stored swagger for this API
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'api')->fieldCondition('api_apiid', 'value', $apiid)->fieldCondition('api_version', 'value', $apiversion);
  $results = $query->execute();

  if (isset($results['node'])) {
    $keys = array_keys($results['node']);
    $node = node_load($keys[0]);
  }
  else {
    $node = 'dummy';
  }
  _ibm_apim_download_proxy($url, $node);
}

/**
 * Generic API download proxy, used for documents and wsdls
 * if node is passed in then it will save the content as the swagger doc for that api
 */
function _ibm_apim_download_proxy($url, $node = null) {
  // Make sure we have the session variables set
  _ibm_apim_check_and_get_config();
  $apim_session = &_ibm_apim_get_apim_session();
  if (empty($url)) {
    drupal_set_message(t('URL not specified. Specify a valid URL and try again.'), 'error');
    return;
  }

  $ch = curl_init($url);
  $ibmid = variable_get('ibm_apim_saml_idp', 0);
  $headers = array();
  if (isset($apim_session['auth'])) {
    $headers[] = "X-IBM-APIManagement-Context: " . $apim_session['org'] . '.' . $apim_session['env'];
    $headers[] = "Authorization: Basic " . $apim_session['auth'];
  }
  elseif ($ibmid == 1) {
    $headers[] = "X-IBM-APIManagement-Context: " . $apim_session['org'] . '.' . $apim_session['env'];
    if (isset($apim_session['samltoken']) && !empty($apim_session['samltoken'])) {
      $headers[] = 'X-IBM-APIManagement-IBMIDToken: ' . $apim_session['samltoken'];
    }
  }
  else {
    $headers[] = "X-IBM-APIManagement-Context: " . $apim_session['org'] . '.' . $apim_session['env'];
  }
  if (isset($node)) {
    $headers[] = 'Accept: application/vnd.ibm-apim.swagger2+yaml';
    $headers[] = 'Content-Type: application/vnd.ibm-apim.swagger2+yaml';
  }
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
  curl_setopt($ch, CURLOPT_HEADER, true);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

  // Enable auto-accept of self-signed certificates if this
  // has been set in the module config by an admin.
  _ibm_apim_curl_set_accept_ssl($ch);

  list($header, $contents) = preg_split('/([\r\n][\r\n])\\1/', curl_exec($ch), 2);
  $status = curl_getinfo($ch);
  curl_close($ch);

  // preserve http response code from API call
  if (isset($status['http_code']) && !empty($status['http_code']) && is_int($status['http_code'])) {
    http_response_code($status['http_code']);
  }

  // Split header text into an array.
  $header_text = preg_split('/[\r\n]+/', $header);

  // Propagate headers to response.
  foreach ($header_text as $header) {
    if (preg_match('/^(?:Content-Length|Location|Content-Type|Content-Language|Set-Cookie|X-APIM):/i', $header)) {
      header($header);
    }
  }
  // for YAML download force the filename, otherwise will default to version number
  if (isset($node)) {
    header('Content-Disposition: attachment; filename="apidownload.yaml"');
  }
  else {
    // use original filename if set
    foreach ($header_text as $header) {
      if (preg_match('/^(?:Content-Disposition):/i', $header)) {
        header($header);
      }
    }
  }

  if (isset($node) && $node != 'dummy' && isset($contents)) {
    $data = $contents;
    if (!isset($node->api_resources[$node->language][0]['value']) || $node->api_resources[$node->language][0]['value'] != $data) {
      $node->api_resources[$node->language][0]['value'] = $data;
      node_save($node);
    }
  }

  print $contents;
}

/**
 * Generate the the Swagger JSON data for a specified API
 *
 * @param string $api
 *          The API ID
 *
 * @param
 *          The API object returned from the server
 *
 * @return string The output is the JSON string.
 */
function _ibm_apim_generate_json_per_api($api) {
  $apim_session = &_ibm_apim_get_apim_session();
  $host = '';
  $port = '';
  if (isset($apim_session['customGatewayURL']) && !empty($apim_session['customGatewayURL'])) {
    $gateway_url = parse_url($apim_session['customGatewayURL']);
    $host = $gateway_url['host'];
    if (isset($gateway_url['port']) && !empty($gateway_url['port'])) {
      $port = ':' . $gateway_url['port'];
    }
    if (isset($gateway_url['scheme']) && !empty($gateway_url['scheme'])) {
      $protocol = $gateway_url['scheme'];
    }
    if (isset($gateway_url['path']) && !empty($gateway_url['path'])) {
      $basePath = $gateway_url['path'];
    }
    if (!isset($basePath) || empty($basePath)) {
      $basePath = '/';
    }
  }
  else
    if (isset($apim_session['gatewayURL']) && !empty($apim_session['gatewayURL'])) {
      $gateway_url = parse_url($apim_session['gatewayURL']);
      $host = $gateway_url['host'];
      if (isset($gateway_url['port']) && !empty($gateway_url['port'])) {
        $port = ':' . $gateway_url['port'];
      }
      if (isset($gateway_url['scheme']) && !empty($gateway_url['scheme'])) {
        $protocol = $gateway_url['scheme'];
      }
      if (isset($gateway_url['path']) && !empty($gateway_url['path'])) {
        $basePath = $gateway_url['path'];
      }
      if (!isset($basePath) || empty($basePath)) {
        $basePath = '/' . $apim_session['org'] . '/' . $apim_session['env'];
      }
    }
  if (!isset($basePath) || empty($basePath)) {
    $basePath = '/';
  }

  if (!isset($protocol) || empty($protocol)) {
    $protocol = 'https';
  }
  // basePath MUST start with a /
  $firstchar = $basePath[0];
  if ($firstchar != '/') {
    $basePath = '/' . $basePath;
  }
  $output = array(
    'swagger' => '2.0',
    'basePath' => $basePath,
    'host' => $host . $port,
    'schemes' => array($protocol),
    'paths' => array(),
    'tags' => array());
  if (isset($api['protocol'])) {
    $output['x-ibm-protocol'] = $api['protocol'];
  }
  else {
    $output['x-ibm-protocol'] = 'soap';
  }
  if (isset($api['soapVersion'])) {
    $output['x-ibm-soapversion'] = $api['soapVersion'];
  }
  else {
    $output['x-ibm-soapversion'] = '1.2';
  }
  $output['definitions'] = array();
  $output['info'] = array(
    'description' => check_plain($api['description']),
    'version' => check_plain($api['version']) . '.0.0',
    'title' => check_plain($api['name']));
  // $output['securityDefinitions'] = array();

  $_authorization = array();
  $_authentication = array();

  // Commented out since swaggerui stops sending client id if these are in the model
  // add security definitions
  // if ($api['authorization'] == 'clientID') {
  // $output['securityDefinitions']['clientID'] = array(
  // 'type' => 'apiKey',
  // 'name' => 'clientID',
  // 'in' => 'header');
  // $_authorization[] = 'clientID';
  // }
  // elseif ($api['authorization'] == 'clientIDAndSecret') {
  // $output['securityDefinitions']['clientID'] = array(
  // 'type' => 'apiKey',
  // 'name' => 'clientID',
  // 'in' => 'header');
  // $output['securityDefinitions']['clientSecret'] = array(
  // 'type' => 'apiKey',
  // 'name' => 'clientSecret',
  // 'in' => 'header');
  // $_authorization[] = 'clientID';
  // $_authorization[] = 'clientSecret';
  // }
  //
  // if ($api['authentication'] == 'oauth') {
  // // use implicit if available else use first grantType returned
  // if (in_array('implicit', $api['oauthConfig']['grantType'])) {
  // $flow = "implicit";
  // }
  // else {
  // switch ($api['oauthConfig']['grantType'][0]) {
  // case "clientCredentials" :
  // $flow = "application";
  // break;
  // case "authorizationCode" :
  // $flow = "accessCode";
  // break;
  // case "resourceOwnerPasswordCredentials" :
  // $flow = "password";
  // break;
  // case "implicit" :
  // default :
  // $flow = "implicit";
  // }
  // }
  // $output['securityDefinitions']['oauth'] = array(
  // 'type' => 'oauth2',
  // 'scopes' => array('scope' => $api['context']),
  // 'flow' => $flow);
  // if ($flow == "implicit" || $flow == "accessCode") {
  // $output['securityDefinitions']['oauth']['authorizationUrl'] = $api['oauthConfig']['authorizationEndpointURL'];
  // }
  // if ($flow == "password" || $flow == "application" || $flow == "accessCode") {
  // $output['securityDefinitions']['oauth']['tokenUrl'] = $api['oauthConfig']['tokenEndpointURL'];
  // }
  // $_authentication[] = 'oauth';
  // }
  // elseif ($api['authentication'] == 'basic') {
  // $output['securityDefinitions']['basic'] = array("type" => "basic");
  // $_authentication[] = 'basic';
  // }

  $temparray = array();
  $context = $api['context'];
  // context MUST start with a /
  $firstchar = $context[0];
  if (isset($firstchar) && $firstchar != '/') {
    $context = '/' . $context;
  }
  if ($api['resources']) {
    foreach ($api['resources'] as $resource) {
      $exploded = explode('?', $resource['path']);
      $path = $exploded[0];
      if ($path[0] == '/') {
        $resource_path = $context . $path;
      }
      else {
        $resource_path = $context . '/' . $path;
      }

      $resource_verb = $resource['verb'];
      $resource_array = array();
      $resource_array[$resource_path] = array();
      $resource_array[$resource_path][$resource_verb] = array();
      $resource_array[$resource_path][$resource_verb] = array(
        'summary' => check_plain($resource['name']),
        'description' => check_plain($resource['description']),
        'parameters' => array(),

        // 'security' => array(),
        'responses' => array());

      if (isset($resource['soapAction'])) {
        $resource_array[$resource_path][$resource_verb]['x-ibm-soapaction'] = $resource['soapAction'];
      }

      // if ($resource['authorization'] == true) {
      // foreach ($_authorization as $auth) {
      // $resource_array[$resource_path][$resource_verb]['security'][] = array('name' => $auth);
      // }
      // }
      // if ($resource['authentication'] == true) {
      // foreach ($_authentication as $auth) {
      // $resource_array[$resource_path][$resource_verb]['security'][] = array('name' => $auth);
      // }
      // }

      // hardcode all resources to be part of same tag for now
      $resource_array[$resource_path][$resource_verb]['tags'] = array(
        'resources');
      // $trimmedpath = ltrim($path, '\/');
      // $patharray = explode("/", ltrim($path, '\/'));
      // $resource_array[$resource_path][$resource_verb]['tags'] = array($patharray[0]);
      // // Add to list of all tags if not already present
      // if (null === _ibm_apim_searchForId($patharray[0], $output['tags'])) {
      // $newtag = array('name' => $patharray[0], 'description' => '');
      // array_push($output['tags'], $newtag);
      // }

      if (isset($resource['errors']) && !empty($resource['errors'])) {
        // TODO do something with the errors objects to include in responses array
      }
      $resource_array[$resource_path][$resource_verb]['responses']['200'] = array(
        'description' => 'successful operation');

      $trimmed = trim($resource['contentType']);
      if (isset($resource['contentType']) && !empty($trimmed)) {
        $resource_array[$resource_path][$resource_verb]['produces'] = array(
          $resource['contentType']);
        $resource_array[$resource_path][$resource_verb]['consumes'] = array(
          $resource['contentType']);
      }
      else {
        // default to JSON if nothing specified in source API
        $resource_array[$resource_path][$resource_verb]['produces'] = array(
          "application/json");
        $resource_array[$resource_path][$resource_verb]['consumes'] = array(
          "application/json");
      }
      if ($resource['queryParameters']) {
        foreach ($resource['queryParameters'] as $parameter) {
          if (isset($parameter['name']) && isset($parameter['description'])) {
            $parameter_array = array();
            $parameter_array['in'] = 'query';
            $parameter_array['name'] = check_plain($parameter['name']);
            $parameter_array['description'] = check_plain($parameter['description']);
            if (isset($parameter['optional'])) {
              $parameter_array['required'] = !filter_var($parameter['optional'], FILTER_VALIDATE_BOOLEAN);
            }
            else {
              $parameter_array['required'] = false;
            }
            $parameter_array['type'] = 'string';
            $resource_array[$resource_path][$resource_verb]['parameters'][] = $parameter_array;
          }
        }
      }
      if ($resource['pathParameters']) {
        foreach ($resource['pathParameters'] as $parameter) {
          if (isset($parameter['name']) && isset($parameter['description'])) {
            $parameter_array = array();
            $parameter_array['in'] = 'path';
            $parameter_array['name'] = check_plain($parameter['name']);
            $parameter_array['description'] = check_plain($parameter['description']);
            $parameter_array['required'] = true;
            $parameter_array['type'] = 'string';
            $resource_array[$resource_path][$resource_verb]['parameters'][] = $parameter_array;
          }
        }
      }
      // handle request body
      if (isset($api['protocol']) && strtolower($api['protocol']) == 'soap') {
        $resource_array[$resource_path][$resource_verb]['x-ibm-soapmessage'] = $resource['soapMessage'];
      }
      if (isset($resource['requestBody']) && !empty($resource['requestBody'])) {
        $resource_array[$resource_path][$resource_verb]['x-ibm-requestbody'] = $resource['requestBody'];
        $body_array = array();
        $body_array['in'] = 'body';
        $body_array['name'] = 'body';
        $body_array['required'] = true;
        $body_array['schema'] = array(
          'type' => 'string',
          'example' => $resource['requestBody']);
        $resource_array[$resource_path][$resource_verb]['parameters'][] = $body_array;
      }
      // handle response body
      if (isset($resource['responseBody']) && !empty($resource['responseBody'])) {
        $resource_array[$resource_path][$resource_verb]['x-ibm-responsebody'] = $resource['responseBody'];
        $resource_array[$resource_path][$resource_verb]['responses']['200']['schema'] = array(
          'type' => 'string',
          'example' => $resource['responseBody']);
      }

      if (isset($output['paths'][$resource_path])) {
        $output['paths'][$resource_path] = array_merge($output['paths'][$resource_path], $resource_array[$resource_path]);
      }
      else {
        $output['paths'][$resource_path] = $resource_array[$resource_path];
      }
    }
  }

  return $output;
}

/**
 * Util function to search for a given name in an array
 */
function _ibm_apim_searchForId($newname, $array) {
  if ($array) {
    foreach ($array as $key => $val) {
      if ($val['name'] === $newname) {
        return $key;
      }
    }
  }
  return null;
}

function _ibm_apim_startsWith($haystack, $needle) {
  return $needle === "" || strpos($haystack, $needle) === 0;
}

function _ibm_apim_endsWith($haystack, $needle) {
  return $needle === "" || substr($haystack, -strlen($needle)) === $needle;
}

/*
 * Convert SimpleXMLElement to an array by http://outlandish.com/blog/xml-to-json/
 */
function _ibm_apim_normalizeSimpleXML($xml, $options = array()) {
  $defaults = array('namespaceSeparator' => ':', // you may want this to be something other than a colon
'attributePrefix' => '@', // to distinguish between attributes and nodes with the same name
'alwaysArray' => array(), // array of xml tag names which should always become arrays
'autoArray' => true, // only create arrays for tags which appear more than once
'textContent' => '$', // key used for the text content of elements
'autoText' => true, // skip textContent key if node has no attributes or child nodes
'keySearch' => false, // optional search and replace on tag and attribute names
'keyReplace' => false); // replace values for above search values (as passed to str_replace())
  if (isset($xml) && !empty($xml)) {
    $options = array_merge($defaults, $options);
    $namespaces = $xml->getDocNamespaces();
    $namespaces[''] = null; // add base (empty) namespace
                            // get attributes from all namespaces
    $attributesArray = array();
    foreach ($namespaces as $prefix => $namespace) {
      foreach ($xml->attributes($namespace) as $attributeName => $attribute) {
        // replace characters in attribute name
        if ($options['keySearch'])
          $attributeName = str_replace($options['keySearch'], $options['keyReplace'], $attributeName);
        $attributeKey = $options['attributePrefix'] . ($prefix ? $prefix . $options['namespaceSeparator'] : '') . $attributeName;
        $attributesArray[$attributeKey] = (string) $attribute;
      }
    }

    // get child nodes from all namespaces
    $tagsArray = array();
    foreach ($namespaces as $prefix => $namespace) {
      foreach ($xml->children($namespace) as $childXml) {
        // recurse into child nodes
        $childArray = _ibm_apim_normalizeSimpleXML($childXml, $options);
        list($childTagName, $childProperties) = each($childArray);

        // replace characters in tag name
        if ($options['keySearch'])
          $childTagName = str_replace($options['keySearch'], $options['keyReplace'], $childTagName);
          // add namespace prefix, if any
        if ($prefix)
          $childTagName = $prefix . $options['namespaceSeparator'] . $childTagName;

        if (!isset($tagsArray[$childTagName])) {
          // only entry with this key
          // test if tags of this type should always be arrays, no matter the element count
          $tagsArray[$childTagName] = in_array($childTagName, $options['alwaysArray']) || !$options['autoArray'] ? array(
            $childProperties) : $childProperties;
        }
        elseif (is_array($tagsArray[$childTagName]) && array_keys($tagsArray[$childTagName]) === range(0, count($tagsArray[$childTagName]) - 1)) {
          // key already exists and is integer indexed array
          $tagsArray[$childTagName][] = $childProperties;
        }
        else {
          // key exists so convert to integer indexed array with previous value in position 0
          $tagsArray[$childTagName] = array(
            $tagsArray[$childTagName],
            $childProperties);
        }
      }
    }

    // get text content of node
    $textContentArray = array();
    $plainText = trim((string) $xml);
    if ($plainText !== '')
      $textContentArray[$options['textContent']] = $plainText;

      // stick it all together
    $propertiesArray = !$options['autoText'] || $attributesArray || $tagsArray || ($plainText === '') ? array_merge($attributesArray, $tagsArray, $textContentArray) : $plainText;

    // return node as array
    return array($xml->getName() => $propertiesArray);
  }
  else {
    return array();
  }
}

/**
 * Function to introspect the app URL and return the ID
 *
 * @return array An array with id and version.
 */
function _ibm_apim_get_id_from_appurl($appurl) {
  $ret = null;
  $parts = parse_url($appurl);
  if ($parts) {
    $planpath = $parts['path'];
    $dirs = explode('/', $planpath);
    $id = array_pop($dirs);
    $ret = $id;
  }
  return $ret;
}

/*
 * Utility method to create the user object to send to apim
 */
function _ibm_apim_convert_to_apim_address($values) {
  $ibm_apim_readonly_idp = variable_get('ibm_apim_readonly_idp', FALSE);
  $name = '';
  $pass = '';
  $name = '';
  $fname = '';
  $lname = '';
  $developerorg = '';
  $data = array();

  if (isset($values['name'])) {
    $name = $values['name'];
  }
  if (isset($values['pass'])) {
    $pass = $values['pass'];
    $data['password'] = $pass;
  }
  if (isset($values['field_first_name']['und'][0]['value'])) {
    $fname = $values['field_first_name']['und'][0]['value'];
    $data['firstName'] = $fname;
  }
  if (isset($values['field_last_name']['und'][0]['value'])) {
    $lname = $values['field_last_name']['und'][0]['value'];
    $data['lastName'] = $lname;
  }
  if (isset($values['field_developer_organization']['und'][0]['value'])) {
    $developerorg = $values['field_developer_organization']['und'][0]['value'];
    $data['organization'] = $developerorg;
  }
  if (isset($values['mail'])) {
    $mail = $values['mail'];
  }
  $username = $name;
  $emailasuser = variable_get('ibm_apim_email_as_username', 1);
  if ($emailasuser) {
    $username = $mail;
  }
  else
    if (isset($values['mail'])) {
      // if username not email then update that too
      // commented out until APIM API can handle it
      // $data['email'] = $mail;
    }
  $data['username'] = $username;
  // do not include additionalFields for readonly IDPs
  if ($ibm_apim_readonly_idp != TRUE) {
    $data['additionalFields'] = array();
    if (isset($values['mail'])) {
      $data['additionalFields']['email'] = $mail;
    }
    if (isset($values['field_company']['und'][0]['value'])) {
      $companyname = $values['field_company']['und'][0]['value'];
      $data['additionalFields']['company_name'] = $companyname;
    }
    if (isset($values['field_phone']['und'][0]['value'])) {
      $phone = $values['field_phone']['und'][0]['value'];
      $data['additionalFields']['phone_number'] = array(
        array('value' => $phone));
    }
    if (isset($values['field_address']['und'][0])) {
      $administrative_area = @$values['field_address']['und'][0]['administrative_area'] or $administrative_area = "";
      $country = @$values['field_address']['und'][0]['country'] or $country = "";
      $locality = @$values['field_address']['und'][0]['locality'] or $locality = "";
      $postal_code = @$values['field_address']['und'][0]['postal_code'] or $postal_code = "";
      $thoroughfare = @$values['field_address']['und'][0]['thoroughfare'] or $thoroughfare = "";
      $premise = @$values['field_address']['und'][0]['premise'] or $premise = "";
      $address = array(
        'administrative_area' => $administrative_area,
        'country' => $country,
        'locality' => $locality,
        'postal_code' => $postal_code,
        'thoroughfare' => $thoroughfare,
        'premise' => $premise);
      $data['additionalFields']['addresses'] = array($address);
    }
  }

  return $data;
}

/*
 * Using this not user_external_login_register so we can create the initial user with extra info
 */
function _ibm_apim_external_login_register($name, $edit = array(), $login = false) {
  $account = user_external_load($name);
  if (!$account) {
    // Register this new user.
    $edit['name'] = $name;
    if (!isset($edit['pass'])) {
      $edit['pass'] = user_password();
    }
    $edit['init'] = $name;
    $edit['access'] = REQUEST_TIME;

    $account = user_save(drupal_anonymous_user(), $edit);
    // Terminate if an error occurred during user_save().
    if (!$account) {
      drupal_set_message(t("Error saving user account."), 'error');
      watchdog('_ibm_apim_external_login_register', 'Error saving user account. userid: %name', array(
        '%name' => serialize($name)), WATCHDOG_NOTICE);
      return;
    }
    user_set_authmaps($account, array("authname_ibm_apim" => $name));
  }

  if ($login) {
    // Log user in.
    $form_state['uid'] = $account->uid;
    user_login_submit(array(), $form_state);
  }
}

/**
 * Implements hook_cron().
 */
function ibm_apim_cron() {
  // Clear the cache of the queries used to build up the forum
  // blocks on the home page otherwise they only change when
  // the ALL cache is cleared completely
  cache_clear_all('forum_block_view:', 'cache', TRUE);
}

/**
 * Returns the adv portal version number
 */
function ibm_apim_version() {
  $path = drupal_get_path('module', 'ibm_apim') . '/ibm_apim.info';
  $info = drupal_parse_info_file($path);
  $data = t('IBM API Management Advanced Portal version %ver', array(
    '%ver' => $info['version']));
  return $data;
}

function ibm_apim_base64_url_encode($input) {
  return strtr(base64_encode($input), '+/=', '-_,');
}

function ibm_apim_base64_url_decode($input) {
  return base64_decode(strtr($input, '-_,', '+/='));
}

?>
