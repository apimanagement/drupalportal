<?php

/**
 * IBM API Management Integration
 *
 * Adds the Plan node content type to Drupal for representing Plans from IBM APIM
 */

/**
 * Implements hook_node_info().
 */
function plan_node_info() {
  return array(
    'plan' => array(
      'name' => t('Plan'),
      'base' => 'plan',
      'description' => t('A Plan in IBM API Management')));
}

/**
 * Implements hook_help().
 */
function plan_help($path, $arg) {
  switch ($path) {
    case 'admin/help#plan' :
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The plan module provides a new custom node type for use with IBM API Management.") . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Select a plan') . '</dt>';
      $output .= '<dd>' . t("This module enables the user to see the different plans available in IBM API Management for a given API, showing the details and any rate limiting policy included in them.") . '</dd>';
      $output .= '<dt>' . t('Subscribe to a plan') . '</dt>';
      $output .= '<dd>' . t("Using this module it is possible for a user to subscribe an application to a plan in IBM API Management.") . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_form().
 */
function plan_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 */
function plan_view($node, $view_mode) {
  return $node;
}

/**
 * Implements hook_node_view().
 */
function plan_node_view($node, $view_mode) {
}

/**
 * Implements hook_menu().
 */
function plan_menu() {
  // the use of _plan_path_param_to_arg in some of these menu entries is to avoid a menu_translate error message
  // we cant use a proper load method since we need both args to return the proper object
  $items = array();
  $items['plan'] = array(
    'title' => 'Plans',
    'page callback' => 'plan_collection_callback',
    'menu_name' => 'main-menu',
    'weight' => 15,
    'description' => 'Pricing plans',
    'access callback' => 'user_is_logged_in');
  $items['plan/subscribe/%/%'] = array(
    'title' => 'Subscribe',
    'type' => MENU_CALLBACK,
    'page callback' => 'plan_subscribeapp_callback',
    'page arguments' => array(2, 3),
    'access callback' => 'user_is_logged_in');
  $items['plan/%_plan_path_param_to_arg/%_plan_path_param_to_arg'] = array(
    'title' => 'View',
    'page callback' => 'plan_collection_callback',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK);
  return $items;
}

/**
 * Implements hook_node_access().
 * This is checking if the specified plan is returned from apim, if not it blocks access.
 */
function plan_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  $planfound = FALSE;
  if ($type == 'plan' && $op == 'view') {
    $plans = plan_list_contents();
    if ($plans) {
      foreach ($plans as $plan) {
        if (isset($node->plan_apiid) && $plan['id'] == $node->plan_apiid[$node->language][0]['value']) {
          $planfound = TRUE;
        }
      }
    }
    if ($planfound == TRUE) {
      return NODE_ACCESS_ALLOW;
    }
    else {
      return NODE_ACCESS_DENY;
    }
  }
  else {
    return NODE_ACCESS_IGNORE;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function plan_preprocess_node(&$variables) {
  if ($variables['node']->type == 'plan' && $variables['view_mode'] == 'teaser') {
    $variables['theme_hook_suggestions'][] = 'node__plan__teaser';
  }
  if ($variables['node']->type == 'plan' && $variables['view_mode'] == 'search_result') {
    $variables['theme_hook_suggestions'][] = 'node__plan__search_result';
  }
  if ($variables['node']->type == 'plan') {
    $showversion = variable_get('ibm_apim_show_versions', 1);
    $versiontext = '';
    if ($showversion == 1) {
      $versiontext = '(v' . $variables['plan_version'][0]['value'] . ')';
    }
    $variables['titlelink'] = t('<span class="apimTitle"> <a href="!link">!title</a> !version</span>', array(
      '!title' => $variables['title'],
      '!version' => $versiontext,
      '!link' => url("plan/" . $variables['plan_apiid'][0]['value'] . "/" . $variables['plan_version'][0]['value'])));
    if ($variables['view_mode'] == 'full') {
      $details = plan_details_contents($variables['plan_apiid'][0]['value'], $variables['plan_version'][0]['value']);
      $variables['details'] = $details;
      $variables['apis'] = $details['apis'];
    }
  }
}

/**
 * Implements hook_theme().
 */
function plan_theme($existing, $type, $theme, $path) {
  return array(
    'plan_node_form' => array(
      'render element' => 'form',
      'template' => 'plan-node-form',

      // this will set to module/theme path by default:
      'path' => drupal_get_path('module', 'ibm_apim') . '/templates'));
}

/**
 * Preprocessor for theme('plan_node_form').
 */
function template_preprocess_plan_node_form(&$variables) {
  // Extract the form buttons, and put them in independent variable.
  $variables['buttons'] = $variables['form']['actions'];
  hide($variables['form']['actions']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function plan_form_plan_node_form_alter(&$form, &$form_state) {
  // this function hides all our custom fields from the edit node form as they are all set explicitly
  $form['plan_apimhostname']['#access'] = 0;
  $form['plan_providerid']['#access'] = 0;
  $form['plan_environmentid']['#access'] = 0;
  $form['plan_description']['#access'] = 0;
  $form['plan_version']['#access'] = 0;
  $form['title']['#access'] = 0;
  $form['plan_apiid']['#access'] = 0;
  $form['plan_displayname']['#access'] = 0;
  $form['plan_requiresapproval']['#access'] = 0;
  $form['plan_url']['#access'] = 0;
  $form['plan_updated']['#access'] = 0;
  $form['plan_apis']['#access'] = 0;
  $form['plan_subscribable']['#access'] = 0;
}

/**
 * Implements hook_preprocess_search_result
 *
 * @param type $variables
 */
function plan_preprocess_search_result(&$variables) {
  $node = $variables['result']['node'];
  if ($node->nid && $node->type == 'plan') { // if the result is a plan node we can load the teaser
    $variables['teaser'] = node_view($node, 'teaser');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Adds our custom submit handler
 */
function plan_form_comment_form_alter(&$form, &$form_state) {
  // Add a custom submit handler to act when the form submits.
  $form['#submit'][] = 'plan_custom_comment_submit_handler';
}

/**
 * Custom submit handler for the comment form.
 * This is to redirect users back to our custom path after posting a comment
 * e.g. to plan/xxx instead of node/nid
 */
function plan_custom_comment_submit_handler($form, &$form_state) {
  // Redirect the user after submission
  $nid = arg(2);
  if (isset($nid)) {
    $nodes = node_load_multiple(array($nid));
    if (is_array($nodes)) {
      reset($nodes);
      $first_key = key($nodes);
      if ($first_key) {
        $node = $nodes[$first_key];
        if (isset($node) && $node->type == 'plan') {
          $form_state['redirect'] = 'plan/' . $node->plan_apiid[$node->language][0]['value'] . '/' . $node->plan_version[$node->language][0]['value'];
        }
      }
    }
  }
}

/**
 * Callback to display a form for subscribing an app to a plan.
 */
function plan_subscribeapp_callback($planid = NULL, $planversion = NULL) {
  $markup = '';
  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();
  $app_form = drupal_get_form('plan_subscribeapp_modal_form', $planid, $planversion);
  $markup .= drupal_render($app_form);
  return array('#markup' => $markup);
}

/**
 * Form for subscribing an app to a plan.
 */
function plan_subscribeapp_modal_form($form, &$form_state, $planId, $planVersion) {
  if (!module_exists('application')) {
    drupal_set_message("Application module must be enabled to subscribe to a plan.", 'error');
    drupal_goto('plan');
    return;
  }
  $apps = application_list_contents();
  $options = array();
  if ($apps) {
    foreach ($apps as $app) {
      $options[$app['id']] = $app['name'];
    }
  }
  if (!count($apps) > 0) {
    $markup = '<p>' . t('No applications found.') . '</p>';

    $ibm_apim_show_register_app = variable_get('ibm_apim_show_register_app', 1);
    if ($ibm_apim_show_register_app == 1) {
      $markup .= '<p>' . l(t('Register a new application'), 'application/new') . '</p>';
    }
    $form['message'] = array('#markup' => $markup);
  }

  $org = ibm_apim_get_current_developer_org();
  $form['planId'] = array('#type' => 'hidden', '#value' => $planId);
  $form['planVersion'] = array('#type' => 'hidden', '#value' => $planVersion);
  $form['orgId'] = array('#type' => 'hidden', '#value' => $org['id']);
  $host_pieces = _ibm_apim_parse_apim_host();
  $form['host'] = array('#type' => 'hidden', '#value' => $host_pieces['url']);

  $form['app'] = array(
    '#type' => 'radios',
    '#title' => t('Application'),
    '#options' => $options,
    '#description' => t('Select an application to sign up to this plan'));
  $form["#submit"][] = "plan_subscribeapp_modal_form_submit";

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  if (!count($apps) > 0) {
    $form['submit']['#disabled'] = TRUE;
  }
  return $form;
}

/**
 * Validate handler for subscribing an app to a plan.
 */
function plan_subscribeapp_modal_form_validate($form, &$form_state) {
}

/**
 * Submit handler for subscribing an app to a plan.
 */
function plan_subscribeapp_modal_form_submit($form, &$form_state) {
  ctools_include('ajax');
  ctools_include('modal');

  $appId = $form_state['values']['app'];
  $planId = $form_state['values']['planId'];
  $planVersion = $form_state['values']['planVersion'];
  $orgId = $form_state['values']['orgId'];
  $host = $form_state['values']['host'];
  if (isset($orgId)) {
    $developer_org_url = '/orgs/' . $orgId;
  }
  else {
    $developer_org_url = '';
  }

  $url = '/v1/portal/' . $developer_org_url . '/apps/' . $appId . '/subscriptions';
  $planurl = $host . '/v1/portal/' . $developer_org_url . '/plans/' . $planId . '/v' . $planVersion;
  $data = array("planURL" => $planurl);
  // retrieve the plan node to find out if needs approval
  $requiresapproval = false;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'plan')->fieldCondition('plan_apiid', 'value', $planId)->fieldCondition('plan_version', 'value', $planVersion);
  $queryresults = $query->execute();
  if (isset($queryresults['node'])) {
    $keys = array_keys($queryresults['node']);
    $node = node_load($keys[0]);
    $requiresapproval = $node->plan_requiresapproval[$node->language][0]['value'];
  }

  $result = ibm_apim_post($url, json_encode($data));
  // dismiss the popup
  $form_state['plan_subscribeapp'][] = ctools_modal_command_dismiss();
  if (isset($result) && (!isset($result->data) || (isset($result->data) && !isset($result->data['errors'])))) {
    // only print success message if it actually was successful
    // error messages will be automatically displayed if there are any
    if (isset($requiresapproval) && ($requiresapproval == true || $requiresapproval == 1)) {
      drupal_set_message(t("Subscription request for this plan has been submitted for approval."));
    }
    else {
      drupal_set_message(t("Successfully subscribed to this plan."));
    }
  }
  // redirect to the plan page
  drupal_goto("plan/" . $planId . "/" . $planVersion, array());
}

/**
 * Menu callback;
 * if a specific plan has been requested will display that as full viewmode,
 * else it will show teaser viewmode for all available plans
 */
function plan_collection_callback($planid = NULL, $planversion = NULL) {
  global $user;
  $build = array();
  $host_pieces = _ibm_apim_parse_apim_host();
  if (empty($host_pieces)) {
    drupal_set_message(t('IBM APIM Module is not correctly configured. Specify a valid hostname and try again.'), 'error');
    return;
  }
  $limit = variable_get('default_nodes_main', 10);

  if ($planid == NULL || $planversion == NULL) {
    $nodes = array();

    $query = db_select('node', 'n');
    $nids = $query->fields('n', array('nid'))->condition('type', 'plan')->condition('status', 1)->addTag('node_access')->execute()->fetchCol();
    if (!empty($nids)) {
      $nodes = node_load_multiple($nids);
    }

    $plans = plan_list_contents();
    if ($plans) {
      foreach ($plans as $plan) {
        $planfound = FALSE;
        if ($nodes) {
          foreach ($nodes as $node) {
            if (isset($node->plan_apiid) && isset($node->plan_version) && $plan['id'] == $node->plan_apiid[$node->language][0]['value'] && $plan['version'] == $node->plan_version[$node->language][0]['value']) {
              $planfound = TRUE;
              _plan_updateExistingPlanNode($node, $plan);
            }
          }
        }
        if ($planfound == FALSE) {
          _plan_createNewPlanNode($plan);
        }
      }
    }
    // rerun query now we've created entries for any new Plans we found
    $nids = $query->fields('n', array('nid'))->condition('type', 'plan')->condition('status', 1)->addTag('node_access')->execute()->fetchCol();
    $finalnids = array();

    if (!empty($nids)) {
      // now remove the nodes that weren't in our list of Plans
      if ($plans) {
        $nodes = node_load_multiple($nids);
        if ($nodes) {
          foreach ($nodes as $node) {
            foreach ($plans as $plan) {
              if (isset($node->plan_apiid) && isset($node->plan_version) && $plan['id'] == $node->plan_apiid[$node->language][0]['value'] && $plan['version'] == $node->plan_version[$node->language][0]['value']) {
                array_push($finalnids, $node->nid);
              }
            }
          }
        }
      }

      // handle paging
      $page = pager_find_page();
      $total = count($finalnids);
      $offset = $limit * $page;
      $chunk = array_slice($finalnids, $offset, $limit);
      pager_default_initialize($total, $limit);

      $finalnodes = node_load_multiple($chunk);
      if ($finalnodes) {
        $build = array(
          'content' => node_view_multiple($finalnodes),
          'pager' => array('#markup' => theme('pager'), '#weight' => $limit));
      }
      else {
        drupal_set_message(t('No plans have been found.'), 'warning');
      }
    }
    else {
      drupal_set_message(t('No plans have been found.'), 'warning');
    }
  }
  else {
    // specific plan
    $plan = plan_details_contents($planid, $planversion);
    if (isset($plan)) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'plan')->fieldCondition('plan_apiid', 'value', $planid)->fieldCondition('plan_version', 'value', $planversion);

      $results = $query->execute();

      if (isset($results['node'])) {
        $keys = array_keys($results['node']);
        $node = node_load($keys[0]);
        _plan_updateExistingPlanNode($node, $plan);
        drupal_goto('node/' . $node->nid);
      }
      else {
        // no existing node for this Plan so create one
        $nid = _plan_createNewPlanNode($plan);
        drupal_goto('node/' . $nid);
      }
    }
    else {
      drupal_set_message(t('The specified Plan could not be found.'), 'error');
    }
  }
  return $build;
}

/**
 * Create a new Plan node
 * Used to create the new placeholder nodes for any new Plans returned by APIm
 */
function _plan_createNewPlanNode($plan) {
  $hostvariable = variable_get('ibm_apim_host');
  $apim_session = &_ibm_apim_get_apim_session();
  global $user;
  $node = new stdClass();
  $node->title = $plan['name'];
  $node->type = "plan";
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = LANGUAGE_NONE;
  $node->uid = 1;
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 2;

  $node->plan_apimhostname[$node->language][] = array(
    'value' => $hostvariable,
    'format' => 'plain_text');
  $node->plan_providerid[$node->language][] = array(
    'value' => $apim_session['org'],
    'format' => 'plain_text');
  $node->plan_environmentid[$node->language][] = array(
    'value' => $apim_session['env'],
    'format' => 'plain_text');
  $node->plan_apiid[$node->language][] = array('value' => $plan['id'], 'format' => 'plain_text');
  $node->plan_version[$node->language][] = array(
    'value' => $plan['version'],
    'format' => 'plain_text');
  // ensure description is at least set to empty string
  if (!isset($plan['description']) || empty($plan['description'])) {
    $plan['description'] = '';
  }
  $node->plan_description[$node->language][] = array(
    'value' => $plan['description'],
    'format' => 'plain_text');
  $node->plan_displayname[$node->language][] = array(
    'value' => $plan['displayName'],
    'format' => 'plain_text');
  $node->plan_requiresapproval[$node->language][] = array(
    'value' => $plan['requiresApproval'],
    'format' => 'plain_text');
  $node->plan_subscribable[$node->language][] = array(
    'value' => $plan['subscribable'],
    'format' => 'plain_text');
  $node->plan_url[$node->language][] = array('value' => $plan['url'], 'format' => 'plain_text');
  $node->plan_updated[$node->language][] = array(
    'value' => $plan['updatedAt'],
    'format' => 'plain_text');
  $node = node_submit($node); // Prepare node for saving
  node_save($node);
  return $node->nid;
}

/**
 * Update an existing Plan node
 * Used to update the placeholder node for any new Plan details returned by APIm
 */
function _plan_updateExistingPlanNode($node, $plan) {
  $hostvariable = variable_get('ibm_apim_host');
  $apim_session = &_ibm_apim_get_apim_session();
  if (isset($plan['updatedAt']) && $plan['updatedAt'] != $node->plan_updated[$node->language][0]['value']) {
    $node->title = $plan['name'];
    $node->plan_apimhostname[$node->language][0]['value'] = $hostvariable;
    $node->plan_providerid[$node->language][0]['value'] = $apim_session['org'];
    $node->plan_environmentid[$node->language][0]['value'] = $apim_session['env'];
    $node->plan_apiid[$node->language][0]['value'] = $plan['id'];
    $node->plan_version[$node->language][0]['value'] = $plan['version'];
    // ensure description is at least set to empty string
    if (!isset($plan['description']) || empty($plan['description'])) {
      $plan['description'] = '';
    }
    $node->plan_description[$node->language][0]['value'] = $plan['description'];
    $node->plan_displayname[$node->language][0]['value'] = $plan['displayName'];
    $node->plan_requiresapproval[$node->language][0]['value'] = $plan['requiresApproval'];
    $node->plan_subscribable[$node->language][0]['value'] = isset($plan['subscribable']) ? $plan['subscribable'] : TRUE;
    $node->plan_url[$node->language][0]['value'] = $plan['url'];
    $node->plan_updated[$node->language][0]['value'] = $plan['updatedAt'];
    node_save($node);
  }
}

/**
 * A function to lookup all the plans a user can see and return the basic
 * information for each of them.
 *
 * @return array NULL if an error occurs otherwise an array with data for each
 *         plan found.
 */
function plan_list_contents() {
  $plan_data = NULL;
  $org = ibm_apim_get_current_developer_org();
  $developerOrg = $org['id'];
  if (isset($developerOrg)) {
    $url = '/v1/portal/orgs/' . $developerOrg . '/plans';
  }
  else {
    $url = '/v1/portal/plans';
  }
  $result = ibm_apim_call($url);
  if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
    $plan_data = $result->data;
  }
  return $plan_data;
}

/**
 * A function to retrieve the details for a specified plan
 *
 * @param
 *          string planid
 *          The plan id
 *
 * @param
 *          int planversion
 *          The plan version
 *
 * @return array NULL if an error occurs otherwise an array with data for the plan.
 */
function plan_details_contents($planid = NULL, $planversion = NULL) {
  $plan_data = NULL;
  $org = ibm_apim_get_current_developer_org();
  $developerOrgs = $org['id'];

  // check if this plan is already cached in the session, if so return that
  $found = false;
  $index = 0;
  if (isset($apim_session['plans'])) {
    foreach ($apim_session['plans'] as $plan) {
      $index++;
      if (isset($plan) && isset($plan->id) && isset($plan->version)) {
        if ($plan->id == $planid && $plan->version == $planversion) {
          if (isset($plan->data)) {
            $found = true;
            return $plan->data;
          }
          else {
            // if exists but no data then remove it from the cache
            unset($apim_session['plans'][$index]);
          }
        }
      }
    }
  }
  if ($found == false) {
    if (isset($developerOrgs)) {
      $developer_org_url = '/orgs/' . $developerOrgs;
    }
    else {
      $developer_org_url = '';
    }
    $planURL = '/v1/portal' . $developer_org_url . '/plans/' . $planid . '/v' . $planversion;
    $result = ibm_apim_call($planURL);
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $plan_data = $result->data;
      // cache it in the session
      $apim_session['plans'][] = array(
        'id' => $planid,
        'version' => $planversion,
        'data' => $plan_data);
    }
    return $plan_data;
  }
}

function _plan_path_param_to_arg($arg) {
  return $arg;
}