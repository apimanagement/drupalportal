<?php

/**
 * @file
 * Install, update and uninstall functions for the api module.
 */

/**
 * Implements hook_install().
 */
function api_install() {
  // Ensure the api node type is available.
  node_types_rebuild();
  _api_add_custom_fields();
}

/**
 * Implements hook_uninstall().
 */
function api_uninstall() {
  _api_delete_node_content('api');
  _api_delete_custom_fields();
  node_type_delete('api');
  field_purge_batch(500);
}

/**
 * Custom fields for API content type.
 */
function _api_installed_fields() {
  $t = get_t();
  return array(
    'api_apimhostname' => array(
      'field_name' => 'api_apimhostname',
      'label' => t('APIM Hostname'),
      'type' => 'text'),
    'api_providerid' => array(
      'field_name' => 'api_providerid',
      'label' => t('Provider ID'),
      'type' => 'text'),
    'api_environmentid' => array(
      'field_name' => 'api_environmentid',
      'label' => t('Environment ID'),
      'type' => 'text'),
    'api_apiid' => array('field_name' => 'api_apiid', 'label' => t('ID'), 'type' => 'text'),
    'api_version' => array(
      'field_name' => 'api_version',
      'label' => t('Version'),
      'type' => 'text'),
    'api_image' => array(
      'field_name' => 'api_image',
      'label' => t('Image'),
      'type' => 'image',
      'module' => 'image'),
    'api_description' => array(
      'field_name' => 'api_description',
      'label' => t('Description'),
      'type' => 'text_long'),
    'api_context' => array(
      'field_name' => 'api_context',
      'label' => t('Context'),
      'type' => 'text'),
    'api_protocol' => array(
      'field_name' => 'api_protocol',
      'label' => t('Protocol'),
      'type' => 'text'),
    'api_authorization' => array(
      'field_name' => 'api_authorization',
      'label' => t('Authorization'),
      'type' => 'text'),
    'api_authentication' => array(
      'field_name' => 'api_authentication',
      'label' => t('Authentication'),
      'type' => 'text'),
    'api_authorizationtokenurl' => array(
      'field_name' => 'api_authorizationtokenurl',
      'label' => t('Authorization Token URL'),
      'type' => 'text'),
    'api_authorizationurl' => array(
      'field_name' => 'api_authorizationurl',
      'label' => t('Authorization URL'),
      'type' => 'text'),
    'api_url' => array('field_name' => 'api_url', 'label' => t('URL'), 'type' => 'text'),
    'api_oauthconfig' => array(
      'field_name' => 'api_oauthconfig',
      'label' => t('OAuth Config'),
      'type' => 'text_long'),
    'api_soapversion' => array(
      'field_name' => 'api_soapversion',
      'label' => t('SOAP Version'),
      'type' => 'text'),
    'api_resources' => array(
      'field_name' => 'api_resources',
      'label' => t('Resources'),
      'type' => 'text_long'),
    'api_updated' => array(
      'field_name' => 'api_updated',
      'label' => t('Updated'),
      'type' => 'text'));
}

function _api_installed_instances() {
  $t = get_t();
  return array(
    'api_apimhostname' => array(
      'field_name' => 'api_apimhostname',
      'type' => 'text',
      'label' => t('APIM Hostname'),
      'widget' => array('type' => 'text_textfield'),
      'display' => array(
        'default' => array('label' => t('APIM Hostname'), 'type' => 'text'),
        'teaser' => array('label' => t('APIM Hostname'), 'type' => 'text'))),
    'api_providerid' => array(
      'field_name' => 'api_providerid',
      'type' => 'text',
      'label' => t('Provider ID'),
      'widget' => array('type' => 'text_textfield'),
      'display' => array(
        'default' => array('label' => t('Provider ID'), 'type' => 'text'),
        'teaser' => array('label' => t('Provider ID'), 'type' => 'text'))),
    'api_environmentid' => array(
      'field_name' => 'api_environmentid',
      'type' => 'text',
      'label' => t('Environment ID'),
      'widget' => array('type' => 'text_textfield'),
      'display' => array(
        'default' => array('label' => t('Environment ID'), 'type' => 'text'),
        'teaser' => array('label' => t('Environment ID'), 'type' => 'text'))),
    'api_apiid' => array(
      'field_name' => 'api_apiid',
      'type' => 'text',
      'label' => t('ID'),
      'widget' => array('type' => 'text_textfield'),
      'display' => array(
        'default' => array('label' => t('ID'), 'type' => 'text'),
        'teaser' => array('label' => t('ID'), 'type' => 'text'))),
    'api_version' => array(
      'field_name' => 'api_version',
      'type' => 'text',
      'label' => t('Version'),
      'widget' => array('type' => 'text_textfield'),
      'display' => array(
        'default' => array('label' => t('Version'), 'type' => 'text'),
        'teaser' => array('label' => t('Version'), 'type' => 'text'))),
    'api_image' => array(
      'field_name' => 'api_image',
      'type' => 'image',
      'label' => t('Image'),
      'required' => 0,
      'description' => t('Logo or image for this API'),
      'widget' => array(
        'type' => 'image_image',
        'module' => 'image',
        'active' => 1,
        'settings' => array(
          'progress_indicator' => 'throbber',
          'preview_image_style' => 'thumbnail')),
      'settings' => array(
        'file_directory' => 'api',
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize' => '2 MB',
        'max_resolution' => '640x480',
        'min_resolution' => '',
        'alt_field' => 1,
        'title_field' => 1,
        'default_image' => 0),
      'display' => array(
        'default' => array('label' => 'hidden', 'type' => 'image', 'module' => 'image'),
        'teaser' => array('label' => 'hidden', 'type' => 'image', 'module' => 'image'))),
    'api_description' => array(
      'field_name' => 'api_description',
      'type' => 'text_long',
      'label' => t('Description'),
      'widget' => array('type' => 'text_textarea'),
      'display' => array(
        'default' => array('label' => t('Description'), 'type' => 'text_long'),
        'teaser' => array('label' => t('Description'), 'type' => 'text_long'))),
    'api_context' => array(
      'field_name' => 'api_context',
      'type' => 'text',
      'label' => t('Context'),
      'widget' => array('type' => 'text_textfield'),
      'display' => array('default' => array('label' => t('Context'), 'type' => 'text'))),
    'api_protocol' => array(
      'field_name' => 'api_protocol',
      'type' => 'text',
      'label' => t('Protocol'),
      'widget' => array('type' => 'text_textfield'),
      'display' => array('default' => array('label' => t('Protocol'), 'type' => 'text'))),
    'api_authorization' => array(
      'field_name' => 'api_authorization',
      'type' => 'text',
      'label' => t('Authorization'),
      'widget' => array('type' => 'text_textfield'),
      'display' => array(
        'default' => array('label' => t('Authorization'), 'type' => 'text'))),
    'api_authentication' => array(
      'field_name' => 'api_authentication',
      'type' => 'text',
      'label' => t('Authentication'),
      'widget' => array('type' => 'text_textfield'),
      'display' => array(
        'default' => array('label' => t('Authentication'), 'type' => 'text'))),
    'api_authorizationtokenurl' => array(
      'field_name' => 'api_authorizationtokenurl',
      'type' => 'text',
      'label' => t('Authorization Token URL'),
      'widget' => array('type' => 'text_textfield'),
      'display' => array(
        'default' => array('label' => t('Authorization Token URL'), 'type' => 'text'))),
    'api_authorizationurl' => array(
      'field_name' => 'api_authorizationurl',
      'type' => 'text',
      'label' => t('Authorization URL'),
      'widget' => array('type' => 'text_textfield'),
      'display' => array(
        'default' => array('label' => t('Authorization URL'), 'type' => 'text'))),
    'api_url' => array(
      'field_name' => 'api_url',
      'type' => 'text',
      'label' => t('URL'),
      'widget' => array('type' => 'text_textfield'),
      'display' => array('default' => array('label' => t('URL'), 'type' => 'text'))),
    'api_oauthconfig' => array(
      'field_name' => 'api_oauthconfig',
      'type' => 'text_long',
      'label' => t('OAuth Config'),
      'widget' => array('type' => 'text_textarea'),
      'display' => array(
        'default' => array('label' => t('OAuth Config'), 'type' => 'text_long'))),
    'api_soapversion' => array(
      'field_name' => 'api_soapversion',
      'type' => 'text',
      'label' => t('SOAP Version'),
      'widget' => array('type' => 'text_textfield'),
      'display' => array(
        'default' => array('label' => t('SOAP Version'), 'type' => 'text'))),
    'api_resources' => array(
      'field_name' => 'api_resources',
      'type' => 'text_long',
      'label' => t('Resources'),
      'widget' => array('type' => 'text_textarea'),
      'display' => array(
        'default' => array('label' => t('Resources'), 'type' => 'text_long'))),
    'api_updated' => array(
      'field_name' => 'api_updated',
      'type' => 'text',
      'label' => t('Updated'),
      'widget' => array('type' => 'text_textfield'),
      'display' => array(
        'default' => array('label' => t('Updated'), 'type' => 'text'),
        'teaser' => array('label' => t('Updated'), 'type' => 'text'))));
}

function _api_add_custom_fields() {
  // API
  foreach (_api_installed_fields() as $field) {
    field_create_field($field);
  }
  foreach (_api_installed_instances() as $fieldinstance) {
    $fieldinstance['entity_type'] = 'node';
    $fieldinstance['bundle'] = 'api';
    field_create_instance($fieldinstance);
  }
}

function _api_delete_custom_fields() {
  // API
  foreach (array_keys(_api_installed_fields()) as $field) {
    field_delete_field($field);
  }
  $instances = field_info_instances('node', 'api');
  foreach ($instances as $instance_name => $fieldinstance) {
    field_delete_instance($fieldinstance);
  }
}

// delete all nodes of specified type
function _api_delete_node_content($type) {
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => $type));
  $nodeids = array();
  foreach ($result as $row) {
    $nodeids[] = $row->nid;
  }
  try {
    node_delete_multiple($nodeids);
  }
  catch (Exception $e) {
    // quietly swallow exceptions from dropping the nodes.
  }
}