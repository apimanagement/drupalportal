<?php

/**
 * IBM API Management Integration
 *
 * Adds the API node content type to Drupal for representing APIs from IBM APIM
 */

/**
 * Implements hook_node_info().
 */
function api_node_info() {
  return array(
    'api' => array(
      'name' => t('API'),
      'base' => 'api',
      'description' => t('An API in IBM API Management.')));
}

/**
 * Implements hook_help().
 */
function api_help($path, $arg) {
  switch ($path) {
    case 'admin/help#api' :
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The api module provides a new custom node type for use with IBM API Management.") . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('List APIs') . '</dt>';
      $output .= '<dd>' . t("This content type is used to represent APIs in IBM API Management in Drupal.") . '</dd>';
      $output .= '<dt>' . t('Search APIs') . '</dt>';
      $output .= '<dd>' . t("Summary information about the APIs in IBM API Management is used to create these nodes in Drupal which enables the use of drupal search to index IBM API Management content.") . '</dd>';
      $output .= '<dt>' . t('Swagger UI') . '</dt>';
      $output .= '<dd>' . t("It is possible to use an embedded Swagger UI client to browse the methods of an API and test them from within this site.") . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_form().
 */
function api_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 */
function api_view($node, $view_mode) {
  return $node;
}

/**
 * Implements hook_node_view().
 */
function api_node_view($node, $view_mode) {
}

/**
 * Implements hook_theme().
 */
function api_theme($existing, $type, $theme, $path) {
  return array(
    'api_node_form' => array(
      'render element' => 'form',
      'template' => 'api-node-form',

      // this will set to module/theme path by default:
      'path' => drupal_get_path('module', 'ibm_apim') . '/templates'));
}

/**
 * Preprocessor for theme('api_node_form').
 */
function template_preprocess_api_node_form(&$variables) {
  // Extract the form buttons, and put them in independent variable.
  $variables['buttons'] = $variables['form']['actions'];
  hide($variables['form']['actions']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function api_form_api_node_form_alter(&$form, &$form_state) {
  // this function hides all our custom fields from the edit node form as they are all set explicitly
  $form['api_apimhostname']['#access'] = 0;
  $form['api_providerid']['#access'] = 0;
  $form['api_environmentid']['#access'] = 0;
  $form['api_description']['#access'] = 0;
  $form['api_version']['#access'] = 0;
  $form['title']['#access'] = 0;
  $form['api_apiid']['#access'] = 0;
  $form['api_context']['#access'] = 0;
  $form['api_protocol']['#access'] = 0;
  $form['api_authentication']['#access'] = 0;
  $form['api_authorization']['#access'] = 0;
  $form['api_authorizationtokenurl']['#access'] = 0;
  $form['api_authorizationurl']['#access'] = 0;
  $form['api_url']['#access'] = 0;
  $form['api_updated']['#access'] = 0;
  $form['api_oauthconfig']['#access'] = 0;
  $form['api_soapversion']['#access'] = 0;
  $form['api_resources']['#access'] = 0;
  $form['api_ibmconfiguration']['#access'] = 0;
}

/**
 * Implements hook_menu().
 */
function api_menu() {
  // the use of _api_path_param_to_arg in some of these menu entries is to avoid a menu_translate error message
  // we cant use a proper load method since we need both args to return the proper object
  $items = array();
  $items['api'] = array(
    'title' => 'APIs',
    'page callback' => 'api_collection_callback',
    'menu_name' => 'main-menu',
    'weight' => 5,
    'description' => 'See how you can use our data',
    'access callback' => TRUE);
  $items['api/docdownload/%'] = array(
    'title' => 'API Documents Proxy',
    'page callback' => '_api_document_proxy_callback',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK);
  $items['api/wsdldownload/%/%'] = array(
    'title' => 'API WSDL Proxy',
    'page callback' => '_api_wsdl_proxy_callback',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK);
  $items['api/swaggerdownload/%/%'] = array(
    'title' => 'API Swagger Proxy',
    'page callback' => '_api_swagger_proxy_callback',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK);
  $items['api/%_api_path_param_to_arg/%_api_path_param_to_arg'] = array(
    'title' => 'View',
    'page callback' => 'api_collection_callback',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK);
  return $items;
}

/**
 * Implements hook_node_access().
 * This is checking if the specified api is returned from apim, if not it blocks access.
 */
function api_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  $apifound = FALSE;
  if ($type == 'api' && $op == 'view') {
    $apis = api_list_contents();
    if ($apis) {
      foreach ($apis as $api) {
        if (isset($node->api_apiid) && $api['id'] == $node->api_apiid[$node->language][0]['value']) {
          $apifound = TRUE;
        }
      }
    }
    if ($apifound == TRUE) {
      return NODE_ACCESS_ALLOW;
    }
    else {
      return NODE_ACCESS_DENY;
    }
  }
  else {
    return NODE_ACCESS_IGNORE;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function api_preprocess_node(&$variables) {
  if ($variables['node']->type == 'api' && $variables['view_mode'] == 'teaser') {
    $variables['theme_hook_suggestions'][] = 'node__api__teaser';
  }
  if ($variables['node']->type == 'api' && $variables['view_mode'] == 'search_result') {
    $variables['theme_hook_suggestions'][] = 'node__api__search_result';
  }
  if ($variables['node']->type == 'api') {
    $showversion = variable_get('ibm_apim_show_versions', 1);
    $versiontext = '';
    if ($showversion == 1) {
      $versiontext = '(v' . $variables['api_version'][0]['safe_value'] . ')';
    }
    $variables['titlelink'] = '<span class="apimTitle"> <a href="' . url('api/' . $variables['api_apiid'][0]['safe_value'] . '/' . $variables['api_version'][0]['safe_value']) . '">' . $variables['title'] . '</a> ' . $versiontext . '</span>';
    if ($variables['view_mode'] == 'full') {
      $variables['allow_api_testing'] = variable_get('ibm_apim_enable_api_test', 1);
      $plans = _api_get_plans_for_api($variables['api_apiid'][0]['value'], $variables['api_version'][0]['value']);
      $variables['plans'] = $plans;
      if (module_exists('forum')) {
        $forumID = taxonomy_get_term_by_name(_api_sanitise_apiname(html_entity_decode($variables['title']), ENT_QUOTES));
        if (!empty($forumID)) {
          reset($forumID);
          $first_key = key($forumID);
          $variables['apiforumlink'] = '<a href="' . url('forum/' . $forumID[$first_key]->tid) . '">' . t('Discuss this API in the forum') . '</a>';
        }
      }
      if (module_exists('application')) {
        $apps = application_list_contents();
        $variables['apps'] = $apps;
      }
      else {
        $variables['apps'] = array();
      }
      if (isset($variables['api_oauthconfig'][0]['value'])) {
        $variables['oauthconfig'] = unserialize($variables['api_oauthconfig'][0]['value']);
      }
      else {
        $variables['oauthconfig'] = array(
          'authorizationEndpointURL' => null,
          'tokenEndpointURL' => null,
          'grantType' => array(),
          'refreshTokensEnabled' => false,
          'tokenRevocationURL' => null);
      }
    }
  }
}

/**
 * Implements hook_preprocess_search_result
 *
 * @param type $variables
 */
function api_preprocess_search_result(&$variables) {
  $node = $variables['result']['node'];
  if ($node->nid && $node->type == 'api') { // if the result is an api node we can load the teaser
    $variables['teaser'] = node_view($node, 'teaser');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Adds our custom submit handler
 */
function api_form_comment_form_alter(&$form, &$form_state) {
  // Add a custom submit handler to act when the form submits.
  $form['#submit'][] = 'api_custom_comment_submit_handler';
}

/**
 * Custom submit handler for the comment form.
 * This is to redirect users back to our custom path after posting a comment
 * e.g. to api/xxx instead of node/nid
 */
function api_custom_comment_submit_handler($form, &$form_state) {
  // Redirect the user after submission
  $nid = arg(2);
  if (isset($nid)) {
    $nodes = node_load_multiple(array($nid));
    if (is_array($nodes)) {
      reset($nodes);
      $first_key = key($nodes);
      if ($first_key) {
        $node = $nodes[$first_key];
        if (isset($node) && $node->type == 'api') {
          $form_state['redirect'] = 'api/' . $node->api_apiid[$node->language][0]['value'] . '/' . $node->api_version[$node->language][0]['value'];
        }
      }
    }
  }
}

/**
 * Menu callback;
 * if a specific api has been requested will display that as full viewmode,
 * else it will show teaser viewmode for all available apis
 */
function api_collection_callback($apiid = NULL, $apiversion = NULL) {
  global $user;
  $build = array();
  $host_pieces = _ibm_apim_parse_apim_host();
  if (empty($host_pieces)) {
    drupal_set_message(t('IBM APIM Module is not correctly configured. Specify a valid hostname and try again.'), 'error');
    return;
  }
  $limit = variable_get('default_nodes_main', 10);

  if ($apiid == NULL || $apiversion == NULL) {
    $nodes = array();

    $query = db_select('node', 'n');
    $nids = $query->fields('n', array('nid'))->condition('type', 'api')->condition('status', 1)->addTag('node_access')->execute()->fetchCol();
    if (!empty($nids)) {
      $nodes = node_load_multiple($nids);
    }

    $apis = api_list_contents();

    if ($apis) {
      foreach ($apis as $api) {
        $apifound = FALSE;
        if ($nodes) {
          foreach ($nodes as $node) {
            if (isset($node->api_apiid) && isset($node->api_version) && $api['id'] == $node->api_apiid[$node->language][0]['value'] && $api['version'] == $node->api_version[$node->language][0]['value']) {
              $apifound = TRUE;
              _api_updateExistingAPINode($node, $api);
            }
          }
        }
        if ($apifound == FALSE) {
          _api_createNewAPINode($api);
        }
      }
    }
    // rerun query now we've created entries for any new APIs we found
    $nids = $query->fields('n', array('nid'))->condition('type', 'api')->condition('status', 1)->addTag('node_access')->execute()->fetchCol();
    $finalnids = array();

    if (!empty($nids)) {
      // now remove the nodes that weren't in our list of APIs
      if ($apis) {
        $nodes = node_load_multiple($nids);
        if ($nodes) {
          foreach ($nodes as $node) {
            foreach ($apis as $api) {
              if (isset($node->api_apiid) && isset($node->api_version) && $api['id'] == $node->api_apiid[$node->language][0]['value'] && $api['version'] == $node->api_version[$node->language][0]['value']) {
                array_push($finalnids, $node->nid);
              }
            }
          }
        }
      }

      // handle paging
      $page = pager_find_page();
      $total = count($finalnids);
      $offset = $limit * $page;
      $chunk = array_slice($finalnids, $offset, $limit);
      pager_default_initialize($total, $limit);

      $finalnodes = node_load_multiple($chunk);
      if ($finalnodes) {
        $build = array(
          'content' => node_view_multiple($finalnodes),
          'pager' => array('#markup' => theme('pager'), '#weight' => $limit));
      }
      else {
        drupal_set_message(t('No apis have been found.'), 'warning');
      }
    }
    else {
      drupal_set_message(t('No apis have been found.'), 'warning');
    }
  }
  else {
    // specific api
    $api = api_details_contents($apiid, $apiversion);
    if (isset($api)) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'api')->fieldCondition('api_apiid', 'value', $apiid)->fieldCondition('api_version', 'value', $apiversion);

      $results = $query->execute();

      if (isset($results['node'])) {
        $keys = array_keys($results['node']);
        $node = node_load($keys[0]);
        _api_updateExistingAPINode($node, $api);
        drupal_goto('node/' . $node->nid);
      }
      else {
        // no existing node for this API so create one
        $nid = _api_createNewApiNode($api);
        drupal_goto('node/' . $nid);
      }
    }
    else {
      drupal_set_message(t('The specified API could not be found.'), 'error');
      // user has asked for a node which no longer exists in apim
      // remove it from our database too
      // there is a chance that this is simply due to no longer have access to it
      // in which case it will likely get recreated by someone accessing the portal who does have access
      // best we can do until webhooks come along
      // TODO remove once webhooks API available
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'api')->fieldCondition('api_apiid', 'value', $apiid)->fieldCondition('api_version', 'value', $apiversion);
      $results = $query->execute();
      if (isset($results['node'])) {
        $keys = array_keys($results['node']);
        node_delete($keys[0]);
      }
    }
  }
  return $build;
}

/**
 * Create a new API node
 * Used to create the new placeholder nodes for any new APIs returned by APIm
 */
function _api_createNewAPINode($api) {
  $hostvariable = variable_get('ibm_apim_host');
  $apim_session = &_ibm_apim_get_apim_session();
  global $user;
  $node = new stdClass();
  $node->title = $api['name'];
  $node->type = "api";
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = LANGUAGE_NONE;
  $node->uid = 1;
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 2;

  $node->api_apimhostname[$node->language][] = array(
    'value' => $hostvariable,
    'format' => 'plain_text');
  $node->api_providerid[$node->language][] = array(
    'value' => $apim_session['org'],
    'format' => 'plain_text');
  $node->api_environmentid[$node->language][] = array(
    'value' => $apim_session['env'],
    'format' => 'plain_text');
  $node->api_apiid[$node->language][] = array('value' => $api['id'], 'format' => 'plain_text');
  $node->api_version[$node->language][] = array(
    'value' => $api['version'],
    'format' => 'plain_text');
  // ensure description is at least set to empty string
  if (!isset($api['description']) || empty($api['description'])) {
    $api['description'] = '';
  }
  $node->api_description[$node->language][] = array(
    'value' => $api['description'],
    'format' => 'plain_text');
  $node->api_context[$node->language][] = array(
    'value' => $api['context'],
    'format' => 'plain_text');
  $node->api_protocol[$node->language][] = array(
    'value' => $api['protocol'],
    'format' => 'plain_text');
  $node->api_authorization[$node->language][] = array(
    'value' => $api['authorization'],
    'format' => 'plain_text');
  $node->api_authentication[$node->language][] = array(
    'value' => $api['authentication'],
    'format' => 'plain_text');
  $node->api_authorizationTokenURL[$node->language][] = array(
    'value' => $api['authorizationTokenURL'],
    'format' => 'plain_text');
  $node->api_authorizationurl[$node->language][] = array(
    'value' => $api['authorizationURL'],
    'format' => 'plain_text');
  $node->api_oauthconfig[$node->language][] = array(
    'value' => serialize($api['oauthConfig']),
    'format' => 'plain_text');
  $node->api_url[$node->language][] = array('value' => $api['url'], 'format' => 'plain_text');
  $node->api_updated[$node->language][] = array(
    'value' => $api['updatedAt'],
    'format' => 'plain_text');
  $node->api_ibmconfiguration[$node->language][] = array(
    'value' => serialize($api['x-ibm-configuration']),
    'format' => 'plain_text');
  $node = node_submit($node); // Prepare node for saving
  node_save($node);

  $phase_tagging = variable_get('ibm_apim_autotag_with_phase', 1);
  if ($phase_tagging == 1) {
    if (isset($api['x-ibm-configuration']['phase'])) {
      _api_phase_tag($node, $api['x-ibm-configuration']['phase']);
    }
  }

  $autocreate_forum = variable_get('ibm_apim_autocreate_apiforum', 1);
  if ($autocreate_forum == 1) {
    _api_create_forum($api['name'], $api['description']);
  }
  return $node->nid;
}

/**
 * Update an existing API node
 * Used to update the placeholder node for any new API details returned by APIm
 */
function _api_updateExistingAPINode($node, $api) {
  $hostvariable = variable_get('ibm_apim_host');
  $apim_session = &_ibm_apim_get_apim_session();
  if (isset($api['updatedAt']) && $api['updatedAt'] != $node->api_updated[$node->language][0]['value']) {
    $node->title = $api['name'];
    $node->api_apimhostname[$node->language][0]['value'] = $hostvariable;
    $node->api_providerid[$node->language][0]['value'] = $apim_session['org'];
    $node->api_environmentid[$node->language][0]['value'] = $apim_session['env'];
    $node->api_apiid[$node->language][0]['value'] = $api['id'];
    $node->api_version[$node->language][0]['value'] = $api['version'];
    // ensure description is at least set to empty string
    if (!isset($api['description']) || empty($api['description'])) {
      $api['description'] = '';
    }
    $node->api_description[$node->language][0]['value'] = $api['description'];
    $node->api_context[$node->language][0]['value'] = $api['context'];
    $node->api_protocol[$node->language][0]['value'] = $api['protocol'];
    $node->api_authorization[$node->language][0]['value'] = $api['authorization'];
    $node->api_authentication[$node->language][0]['value'] = $api['authentication'];
    $node->api_authorizationTokenURL[$node->language][0]['value'] = $api['authorizationTokenURL'];
    $node->api_authorizationurl[$node->language][0]['value'] = $api['authorizationURL'];
    $node->api_oauthconfig[$node->language][0]['value'] = serialize($api['oauthConfig']);
    $node->api_url[$node->language][0]['value'] = $api['url'];
    $node->api_updated[$node->language][0]['value'] = $api['updatedAt'];
    $node->api_ibmconfiguration[$node->language][0]['value'] = serialize($api['x-ibm-configuration']);
    node_save($node);
    $phase_tagging = variable_get('ibm_apim_autotag_with_phase', 1);
    if ($phase_tagging == 1) {
      if (isset($api['x-ibm-configuration']['phase'])) {
        _api_phase_tag($node, $api['x-ibm-configuration']['phase']);
      }
    }
  }
}

/*
 * Tag the API with appropriate tag for phase
 */
function _api_phase_tag($node, $origphase) {
  if (isset($node) && isset($origphase)) {
    $phase = ucfirst($origphase);
    $vocabulary = 'tags';
    $phase_parentname = 'Phase';
    $vobj = taxonomy_vocabulary_machine_name_load($vocabulary);
    $phase_parenttag = taxonomy_get_term_by_name($phase_parentname, $vocabulary);
    // get the 'Phase' tag container tid if exists, if not create it.
    if (!empty($phase_parenttag)) {
      $phase_parentterms = array_values($phase_parenttag);
      $phaseparenttid = $phase_parentterms[0]->tid;
    }
    else {
      $phaseparentterm = new stdClass();
      $phaseparentterm->name = $phase_parentname;
      $phaseparentterm->vid = $vobj->vid;
      $phaseparentterm->parent = 0;
      taxonomy_term_save($phaseparentterm);
      $phaseparenttid = $phaseparentterm->tid;
    }
    // create tag for this phase if it doesnt already exist
    $phase_tag = taxonomy_get_term_by_name($phase, $vocabulary);
    if (!empty($phase_tag)) {
      $phase_terms = array_values($phase_tag);
      $phasetid = $phase_terms[0]->tid;
    }
    else {
      $phaseterm = new stdClass();
      $phaseterm->name = $phase;
      $phaseterm->vid = $vobj->vid;
      $phaseterm->parent = $phaseparenttid;
      taxonomy_term_save($phaseterm);
      $phasetid = $phaseterm->tid;
    }
    // remove any existing other phase tags and then add the new one
    // have to ensure we preserve other tags the user might have added
    $newtags = array();
    if (isset($node->field_apitags[$node->language])) {
      foreach ($node->field_apitags[$node->language] as $existingtagarray) {
        $existingtag = $taxonomy_term_load($existingtagarray->tid);
        if (!isset($existingtag->parent) || $existingtag->parent != $phaseparenttid) {
          $newtags[] = array('tid' => $existingtag->tid);
        }
      }
    }

    // add the tag to the node
    if (isset($phasetid)) {
      $newtags[] = array('tid' => $phasetid);
      $node->field_apitags[$node->language] = $newtags;
      node_save($node);
    }
  }
}

/*
 * Create a forum for this API
 */
function _api_create_forum($apiname = NULL, $apidescription = NULL) {
  if (isset($apiname)) {
    // sanitise api name
    $cleanname = _api_sanitise_apiname($apiname);
    if (module_exists('forum')) {

      module_load_include('inc', 'forum', 'forum.admin');
      // get the container ID
      $containerID = taxonomy_get_term_by_name('APIs');
      if (empty($containerID)) {
        _api_create_forum_container();
        $containerID = taxonomy_get_term_by_name('APIs');
        if (empty($containerID)) {
          // container doesnt exist and failed to create it. abort.
          drupal_set_message(t('Failed to find or create the forum container for this API.'), 'error');
          return;
        }
      }
      $forumID = taxonomy_get_term_by_name($cleanname);
      if (!empty($forumID)) {
        // forum by this name already exists. abort (silently).
        return;
      }
      else {
        reset($containerID);
        $first_key = key($containerID);
        $forum_form_fields = array();
        $forum_form_fields['values']['name'] = $cleanname;
        $forum_form_fields['values']['description'] = $apidescription;
        $forum_form_fields['values']['parent'][0] = $containerID[$first_key]->tid;
        $forum_form_fields['values']['weight'] = 0;
        $forum_form_fields['values']['vid'] = variable_get('forum_nav_vocabulary', 1);
        $form_state = form_state_defaults();
        $forum = forum_form_forum($forum_form_fields, $form_state);
        $forum['form_id']['#value'] = "forum-form-forum";
        forum_form_submit($forum, $forum_form_fields);
      }
    }
  }

  // Don't show a confirmation, error, etc. message about this in the UI, put them in the log instead
  $messages = drupal_get_messages();

  $type_to_severity = array(
    'status' => WATCHDOG_NOTICE,
    'warning' => WATCHDOG_WARNING,
    'error' => WATCHDOG_ERROR);

  foreach ($messages as $type => $type_messages) {
    foreach ($type_messages as $msg) {
      watchdog('_api_create_forum', '%type: %msg', array('%type' => $type, '%msg' => $msg), $type_to_severity[$type]);
    }
  }
}

/*
 * Create the APIs Forum Container if it doesn't already exist.
 */
function _api_create_forum_container() {
  if (module_exists('forum')) {
    module_load_include('inc', 'forum', 'forum.admin');

    $form_state = form_state_defaults();
    $forum_container_fields = array();
    $forum_container_fields['values']['form_id'] = "forum_form_container";
    $forum_container_fields['values']['name'] = 'APIs';
    $forum_container_fields['values']['description'] = 'Get help and advice on the use of our APIs.';
    $forum_container_fields['values']['parent'][0] = 0;
    $forum_container_fields['values']['weight'] = 0;
    $forum_container_fields['values']['vid'] = variable_get('forum_nav_vocabulary', 1);
    $container = forum_form_container($forum_container_fields, $form_state);
    $container['form_id']['#value'] = 'forum_form_container';
    forum_form_submit($container, $forum_container_fields);
  }
}
/*
 * This method sanitises the API names to ensure that it is a valid forum name
 */
function _api_sanitise_apiname($apiname = NULL) {
  if (isset($apiname)) {
    $cleanname = preg_replace('/\%/', ' percentage', $apiname);
    $cleanname = preg_replace('/\@/', ' at ', $cleanname);
    $cleanname = preg_replace('/\&/', ' and ', $cleanname);
    $cleanname = preg_replace('/\s[\s]+/', '-', $cleanname); // Strip off multiple spaces
    $cleanname = preg_replace('/[^A-Za-z0-9-_.,:\s]+/', '-', $cleanname); // Strip off non-alpha-numeric
    $cleanname = preg_replace('/^[\-]+/', '', $cleanname); // Strip off the starting hyphens
    $cleanname = preg_replace('/[\-]+$/', '', $cleanname); // // Strip off the ending hyphens
    $cleanname = mb_strimwidth($cleanname, 0, 128, "..."); // truncate string at 128 characters
  }
  return $cleanname;
}

/**
 * A function to lookup all the APIs a user can see and return the basic
 * information for each of them.
 *
 * @return array NULL if an error occurs otherwise an array with data for each API found.
 */
function api_list_contents() {
  $api_data = NULL;
  $org = ibm_apim_get_current_developer_org();
  $developerOrgs = $org['id'];

  if (isset($developerOrgs)) {
    $developer_org_url = '/orgs/' . $developerOrgs;
  }
  else {
    $developer_org_url = '';
  }
  $url = '/v1/portal' . $developer_org_url . '/apis';

  $result = ibm_apim_call($url);
  if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
    $api_data = $result->data;
  }
  return $api_data;
}

/**
 * A function to retrieve the details for a specified API
 *
 * @param
 *          string apiid
 *          The API ID
 *
 * @param
 *          int apiversion
 *          The API version
 *
 * @return array NULL if an error occurs otherwise an array with data for the API.
 */
function api_details_contents($apiid, $apiversion) {
  $returnValue = NULL;
  $apim_session = &_ibm_apim_get_apim_session();
  if (isset($apim_session['portalURL'])) {
    $base_url = $apim_session['portalURL'];
  }
  else {
    $base_url = '';
  }

  // check if this api is already cached in the session, if so return that
  $found = false;
  $index = 0;
  if (isset($apim_session['apis'])) {
    foreach ($apim_session['apis'] as $api) {
      $index++;
      if (isset($api) && isset($api->id) && isset($api->version)) {
        if ($api->id == $apiid && $api->version == $apiversion) {
          if (isset($api->data)) {
            $found = true;
            return $api->data;
          }
          else {
            // if exists but no data then remove it from the cache
            unset($apim_session['apis'][$index]);
          }
        }
      }
    }
  }
  if ($found == false) {
    $org = ibm_apim_get_current_developer_org();
    $developerOrgs = $org['id'];
    if (isset($developerOrgs)) {
      $developer_org_url = '/orgs/' . $developerOrgs;
    }
    else {
      $developer_org_url = '';
    }
    $url = '/v1/portal' . $developer_org_url . '/apis/' . $apiid . '/v' . $apiversion;
    $result = ibm_apim_call($url);
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $returnValue = $result->data;
      $returnValue['base_url'] = $base_url;
      // cache it in the session
      $apim_session['apis'][] = array(
        'id' => $apiid,
        'version' => $apiversion,
        'data' => $returnValue);
    }
    return $returnValue;
  }
}

/**
 * A function to retrieve the documents associated with a specified API
 *
 * @param
 *          string apiid
 *          The API ID
 *
 * @param
 *          int apiversion
 *          The API version
 *
 * @return array NULL if an error occurs otherwise an array with data.
 */
function api_documents_contents($apiid, $apiversion) {
  $returnValue = NULL;
  $org = ibm_apim_get_current_developer_org();
  $developerOrgs = $org['id'];

  if (isset($developerOrgs)) {
    $developer_org_url = '/orgs/' . $developerOrgs;
  }
  else {
    $developer_org_url = '';
  }

  $url = '/v1/portal' . $developer_org_url . '/apis/' . $apiid . '/v' . $apiversion . '/documents';
  $result = ibm_apim_call($url);
  if (isset($result) && isset($result->data)) {
    $returnValue = $result->data;
  }
  return $returnValue;
}

/**
 * A function to return the CSS class for a specified mimetype
 *
 * @param
 *          string mimetype
 *          The mimetype of the document
 *
 * @return string The CSS classname
 */
function api_getCSSforMimetype($mimetype) {
  $class = null;
  switch ($mimetype) {
    case "application/pdf" :
      $class = "pdfDocType";
      break;
    case "application/msword" :
      $class = "docDocType";
      break;
    case "application/powerpoint" :
      $class = "pptDocType";
      break;
    case "application/vnd.ms-powerpoint" :
      $class = "pptDocType";
      break;
    case "application/vnd.ms-excel" :
      $class = "xlsDocType";
      break;
    case "application/excel" :
      $class = "xlsDocType";
      break;
    case "text/plain" :
      $class = "txtDocType";
      break;
    case "application/rtf" :
      $class = "rtfDocType";
      break;
    case "text/richtext" :
      $class = "rtfDocType";
      break;
    case "image/gif" :
      $class = "gifDocType";
      break;
    case "image/jpeg" :
      $class = "jpgDocType";
      break;
    case "image/png" :
      $class = "pngDocType";
      break;
    case "image/bmp" :
      $class = "bmpDocType";
      break;
    case "application/xml" :
      $class = "xmlDocType";
      break;
    case "text/xml" :
      $class = "xmlDocType";
      break;
    case "text/html" :
      $class = "htmlDocType";
      break;
    case "text/css" :
      $class = "cssDocType";
      break;
    case "application/xslt+xml" :
      $class = "xslDocType";
      break;
    case "application/x-gzip" :
      $class = "zipDocType";
      break;
    case "application/zip" :
      $class = "zipDocType";
      break;
    case "application/x-zip-compressed" :
      $class = "zipDocType";
      break;
    case "application/x-tar" :
      $class = "zipDocType";
      break;
    default :
      $class = "defaultDocType";
  }
  return $class;
}

/**
 * A function to return an array of plans which feature the specified API.
 *
 * @param
 *          string apiid
 *          The api id
 *
 * @param
 *          int apiversion
 *          The api version
 * @return array of the matching plan details.
 */
function _api_get_plans_for_api($apiid, $apiversion) {
  $results = array();
  if (module_exists('plan')) {
    $plans_data = plan_list_contents();
    if ($plans_data) {
      foreach ($plans_data as $plan) {
        $plan_details = plan_details_contents($plan['id'], $plan['version']);
        if (!isset($plan['displayName'])) {
          $plan['displayName'] == '';
        }
        if (!isset($plan['name'])) {
          $plan['name'] == '';
        }
        if (isset($plan_details['apis'])) {
          foreach ($plan_details['apis'] as $api) {
            if ($api['id'] == $apiid && $api['version'] == $apiversion) {
              // only include subscribable Plans (or plans without subscribable set)
              if (!isset($plan_details['subscribable']) || $plan_details['subscribable'] != false) {
                array_push($results, $plan_details);
              }
            }
          }
        }
      }
    }
  }
  return $results;
}

/**
 * Callback for swagger proxy
 */
function _api_swagger_proxy_callback($apiid, $apiversion) {
  if (isset($apiid) && isset($apiversion)) {
    ibm_apim_get_api_swagger($apiid, $apiversion);
  }
}

/**
 * Callback for document proxy
 */
function _api_document_proxy_callback($encodedurl) {
  $url = base64_decode($encodedurl);
  _ibm_apim_download_proxy($url);
}

/**
 * Callback for wsdl proxy
 */
function _api_wsdl_proxy_callback($apiid, $apiversion) {
  // Make sure we have the session variables set
  _ibm_apim_check_and_get_config();
  $apim_session = &_ibm_apim_get_apim_session();
  $host_pieces = _ibm_apim_parse_apim_host();
  if (empty($host_pieces)) {
    drupal_set_message(t('IBM APIM Module is not correctly configured. Specify a valid hostname and try again.'), 'error');
    return;
  }
  $url = $host_pieces['url'] . '/v1/portal/apis/' . $apiid . '/' . $apiversion . '/wsdl';
  _ibm_apim_download_proxy($url);
}

function _api_path_param_to_arg($arg) {
  return $arg;
}